
final.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <__udivsi3>:
 80000c0:	2200      	movs	r2, #0
 80000c2:	0843      	lsrs	r3, r0, #1
 80000c4:	428b      	cmp	r3, r1
 80000c6:	d374      	bcc.n	80001b2 <__udivsi3+0xf2>
 80000c8:	0903      	lsrs	r3, r0, #4
 80000ca:	428b      	cmp	r3, r1
 80000cc:	d35f      	bcc.n	800018e <__udivsi3+0xce>
 80000ce:	0a03      	lsrs	r3, r0, #8
 80000d0:	428b      	cmp	r3, r1
 80000d2:	d344      	bcc.n	800015e <__udivsi3+0x9e>
 80000d4:	0b03      	lsrs	r3, r0, #12
 80000d6:	428b      	cmp	r3, r1
 80000d8:	d328      	bcc.n	800012c <__udivsi3+0x6c>
 80000da:	0c03      	lsrs	r3, r0, #16
 80000dc:	428b      	cmp	r3, r1
 80000de:	d30d      	bcc.n	80000fc <__udivsi3+0x3c>
 80000e0:	22ff      	movs	r2, #255	; 0xff
 80000e2:	0209      	lsls	r1, r1, #8
 80000e4:	ba12      	rev	r2, r2
 80000e6:	0c03      	lsrs	r3, r0, #16
 80000e8:	428b      	cmp	r3, r1
 80000ea:	d302      	bcc.n	80000f2 <__udivsi3+0x32>
 80000ec:	1212      	asrs	r2, r2, #8
 80000ee:	0209      	lsls	r1, r1, #8
 80000f0:	d065      	beq.n	80001be <__udivsi3+0xfe>
 80000f2:	0b03      	lsrs	r3, r0, #12
 80000f4:	428b      	cmp	r3, r1
 80000f6:	d319      	bcc.n	800012c <__udivsi3+0x6c>
 80000f8:	e000      	b.n	80000fc <__udivsi3+0x3c>
 80000fa:	0a09      	lsrs	r1, r1, #8
 80000fc:	0bc3      	lsrs	r3, r0, #15
 80000fe:	428b      	cmp	r3, r1
 8000100:	d301      	bcc.n	8000106 <__udivsi3+0x46>
 8000102:	03cb      	lsls	r3, r1, #15
 8000104:	1ac0      	subs	r0, r0, r3
 8000106:	4152      	adcs	r2, r2
 8000108:	0b83      	lsrs	r3, r0, #14
 800010a:	428b      	cmp	r3, r1
 800010c:	d301      	bcc.n	8000112 <__udivsi3+0x52>
 800010e:	038b      	lsls	r3, r1, #14
 8000110:	1ac0      	subs	r0, r0, r3
 8000112:	4152      	adcs	r2, r2
 8000114:	0b43      	lsrs	r3, r0, #13
 8000116:	428b      	cmp	r3, r1
 8000118:	d301      	bcc.n	800011e <__udivsi3+0x5e>
 800011a:	034b      	lsls	r3, r1, #13
 800011c:	1ac0      	subs	r0, r0, r3
 800011e:	4152      	adcs	r2, r2
 8000120:	0b03      	lsrs	r3, r0, #12
 8000122:	428b      	cmp	r3, r1
 8000124:	d301      	bcc.n	800012a <__udivsi3+0x6a>
 8000126:	030b      	lsls	r3, r1, #12
 8000128:	1ac0      	subs	r0, r0, r3
 800012a:	4152      	adcs	r2, r2
 800012c:	0ac3      	lsrs	r3, r0, #11
 800012e:	428b      	cmp	r3, r1
 8000130:	d301      	bcc.n	8000136 <__udivsi3+0x76>
 8000132:	02cb      	lsls	r3, r1, #11
 8000134:	1ac0      	subs	r0, r0, r3
 8000136:	4152      	adcs	r2, r2
 8000138:	0a83      	lsrs	r3, r0, #10
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x82>
 800013e:	028b      	lsls	r3, r1, #10
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0a43      	lsrs	r3, r0, #9
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x8e>
 800014a:	024b      	lsls	r3, r1, #9
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0a03      	lsrs	r3, r0, #8
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x9a>
 8000156:	020b      	lsls	r3, r1, #8
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	d2cd      	bcs.n	80000fa <__udivsi3+0x3a>
 800015e:	09c3      	lsrs	r3, r0, #7
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__udivsi3+0xa8>
 8000164:	01cb      	lsls	r3, r1, #7
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0983      	lsrs	r3, r0, #6
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__udivsi3+0xb4>
 8000170:	018b      	lsls	r3, r1, #6
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0943      	lsrs	r3, r0, #5
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__udivsi3+0xc0>
 800017c:	014b      	lsls	r3, r1, #5
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0903      	lsrs	r3, r0, #4
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__udivsi3+0xcc>
 8000188:	010b      	lsls	r3, r1, #4
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	08c3      	lsrs	r3, r0, #3
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__udivsi3+0xd8>
 8000194:	00cb      	lsls	r3, r1, #3
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0883      	lsrs	r3, r0, #2
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xe4>
 80001a0:	008b      	lsls	r3, r1, #2
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xf0>
 80001ac:	004b      	lsls	r3, r1, #1
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	1a41      	subs	r1, r0, r1
 80001b4:	d200      	bcs.n	80001b8 <__udivsi3+0xf8>
 80001b6:	4601      	mov	r1, r0
 80001b8:	4152      	adcs	r2, r2
 80001ba:	4610      	mov	r0, r2
 80001bc:	4770      	bx	lr
 80001be:	e7ff      	b.n	80001c0 <__udivsi3+0x100>
 80001c0:	b501      	push	{r0, lr}
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 f806 	bl	80001d4 <__aeabi_idiv0>
 80001c8:	bd02      	pop	{r1, pc}
 80001ca:	46c0      	nop			; (mov r8, r8)

080001cc <__aeabi_uidivmod>:
 80001cc:	2900      	cmp	r1, #0
 80001ce:	d0f7      	beq.n	80001c0 <__udivsi3+0x100>
 80001d0:	e776      	b.n	80000c0 <__udivsi3>
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_idiv0>:
 80001d4:	4770      	bx	lr
 80001d6:	46c0      	nop			; (mov r8, r8)

080001d8 <deregister_tm_clones>:
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <deregister_tm_clones+0x14>)
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <deregister_tm_clones+0x18>)
 80001dc:	b510      	push	{r4, lr}
 80001de:	4283      	cmp	r3, r0
 80001e0:	d003      	beq.n	80001ea <deregister_tm_clones+0x12>
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <deregister_tm_clones+0x1c>)
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d000      	beq.n	80001ea <deregister_tm_clones+0x12>
 80001e8:	4798      	blx	r3
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000004 	.word	0x20000004
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000

080001f8 <register_tm_clones>:
 80001f8:	4806      	ldr	r0, [pc, #24]	; (8000214 <register_tm_clones+0x1c>)
 80001fa:	4907      	ldr	r1, [pc, #28]	; (8000218 <register_tm_clones+0x20>)
 80001fc:	1a09      	subs	r1, r1, r0
 80001fe:	108b      	asrs	r3, r1, #2
 8000200:	0fc9      	lsrs	r1, r1, #31
 8000202:	18c9      	adds	r1, r1, r3
 8000204:	b510      	push	{r4, lr}
 8000206:	1049      	asrs	r1, r1, #1
 8000208:	d003      	beq.n	8000212 <register_tm_clones+0x1a>
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <register_tm_clones+0x24>)
 800020c:	2b00      	cmp	r3, #0
 800020e:	d000      	beq.n	8000212 <register_tm_clones+0x1a>
 8000210:	4798      	blx	r3
 8000212:	bd10      	pop	{r4, pc}
 8000214:	20000004 	.word	0x20000004
 8000218:	20000004 	.word	0x20000004
 800021c:	00000000 	.word	0x00000000

08000220 <__do_global_dtors_aux>:
 8000220:	b510      	push	{r4, lr}
 8000222:	4c07      	ldr	r4, [pc, #28]	; (8000240 <__do_global_dtors_aux+0x20>)
 8000224:	7823      	ldrb	r3, [r4, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d109      	bne.n	800023e <__do_global_dtors_aux+0x1e>
 800022a:	f7ff ffd5 	bl	80001d8 <deregister_tm_clones>
 800022e:	4b05      	ldr	r3, [pc, #20]	; (8000244 <__do_global_dtors_aux+0x24>)
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <__do_global_dtors_aux+0x1a>
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <__do_global_dtors_aux+0x28>)
 8000236:	e000      	b.n	800023a <__do_global_dtors_aux+0x1a>
 8000238:	bf00      	nop
 800023a:	2301      	movs	r3, #1
 800023c:	7023      	strb	r3, [r4, #0]
 800023e:	bd10      	pop	{r4, pc}
 8000240:	20000004 	.word	0x20000004
 8000244:	00000000 	.word	0x00000000
 8000248:	080006c4 	.word	0x080006c4

0800024c <frame_dummy>:
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <frame_dummy+0x18>)
 800024e:	b510      	push	{r4, lr}
 8000250:	2b00      	cmp	r3, #0
 8000252:	d003      	beq.n	800025c <frame_dummy+0x10>
 8000254:	4904      	ldr	r1, [pc, #16]	; (8000268 <frame_dummy+0x1c>)
 8000256:	4805      	ldr	r0, [pc, #20]	; (800026c <frame_dummy+0x20>)
 8000258:	e000      	b.n	800025c <frame_dummy+0x10>
 800025a:	bf00      	nop
 800025c:	f7ff ffcc 	bl	80001f8 <register_tm_clones>
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	00000000 	.word	0x00000000
 8000268:	20000008 	.word	0x20000008
 800026c:	080006c4 	.word	0x080006c4

08000270 <main>:
#include "main.h"

int main( void )
{   
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b08d      	sub	sp, #52	; 0x34
 8000274:	af00      	add	r7, sp, #0
    uint8_t dma_msg[ 48 ] = "This a message from DMA transferred to USART2\n\r";
 8000276:	003b      	movs	r3, r7
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <main+0x34>)
 800027a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800027c:	c313      	stmia	r3!, {r0, r1, r4}
 800027e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000280:	c313      	stmia	r3!, {r0, r1, r4}
 8000282:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000284:	c313      	stmia	r3!, {r0, r1, r4}
 8000286:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000288:	c313      	stmia	r3!, {r0, r1, r4}

    /* initialize UART2 peripheral in TX mode */
    USART2_Init();
 800028a:	f000 f86d 	bl	8000368 <USART2_Init>

    /* enable:
       - DMA CH4 (USART2_TX) in memory (array) to peripheral (USART2) transfer mode
       - DMA CH4 transfer complete interrupt */
    DMA_USART2_Tx_Init( ( uint32_t ) dma_msg, ( uint32_t ) ( &( USART2->TDR ) ), sizeof( dma_msg ) );
 800028e:	003b      	movs	r3, r7
 8000290:	4905      	ldr	r1, [pc, #20]	; (80002a8 <main+0x38>)
 8000292:	2230      	movs	r2, #48	; 0x30
 8000294:	0018      	movs	r0, r3
 8000296:	f000 f943 	bl	8000520 <DMA_USART2_Tx_Init>

    /* initialize GPIOA5 (BOARD LED) as output */
    GPIOA_Init(); 
 800029a:	f000 f843 	bl	8000324 <GPIOA_Init>
    
    while( 1 )
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	e7fd      	b.n	800029e <main+0x2e>
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	080006dc 	.word	0x080006dc
 80002a8:	40004428 	.word	0x40004428

080002ac <toggle_led>:

    return 0;
}

void toggle_led( void )
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
    GPIOA->ODR ^= LED_PIN;
 80002b0:	2390      	movs	r3, #144	; 0x90
 80002b2:	05db      	lsls	r3, r3, #23
 80002b4:	695a      	ldr	r2, [r3, #20]
 80002b6:	2390      	movs	r3, #144	; 0x90
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	2120      	movs	r1, #32
 80002bc:	404a      	eors	r2, r1
 80002be:	615a      	str	r2, [r3, #20]
}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <Reset_Handler>:
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
 80002d2:	4685      	mov	sp, r0
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x6>)
 80002d6:	490e      	ldr	r1, [pc, #56]	; (8000310 <LoopForever+0xa>)
 80002d8:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <LoopForever+0xe>)
 80002da:	2300      	movs	r3, #0
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:
 80002de:	58d4      	ldr	r4, [r2, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:
 80002e4:	18c4      	adds	r4, r0, r3
 80002e6:	428c      	cmp	r4, r1
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>
 80002ea:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <LoopForever+0x12>)
 80002ec:	4c0b      	ldr	r4, [pc, #44]	; (800031c <LoopForever+0x16>)
 80002ee:	2300      	movs	r3, #0
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:
 80002f2:	6013      	str	r3, [r2, #0]
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:
 80002f6:	42a2      	cmp	r2, r4
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>
 80002fa:	f7ff ffe4 	bl	80002c6 <SystemInit>
 80002fe:	f000 f9bd 	bl	800067c <__libc_init_array>
 8000302:	f7ff ffb5 	bl	8000270 <main>

08000306 <LoopForever>:
 8000306:	e7fe      	b.n	8000306 <LoopForever>
 8000308:	20004000 	.word	0x20004000
 800030c:	20000000 	.word	0x20000000
 8000310:	20000004 	.word	0x20000004
 8000314:	08000714 	.word	0x08000714
 8000318:	20000004 	.word	0x20000004
 800031c:	20000020 	.word	0x20000020

08000320 <ADC1_IRQHandler>:
 8000320:	e7fe      	b.n	8000320 <ADC1_IRQHandler>
	...

08000324 <GPIOA_Init>:
#include "gpio.h"

void GPIOA_Init( void )
{   
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    /* enable GPIOA clock access */
    GPIOA_CLK_ENBL();
 8000328:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <GPIOA_Init+0x3c>)
 800032a:	695a      	ldr	r2, [r3, #20]
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <GPIOA_Init+0x3c>)
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	0289      	lsls	r1, r1, #10
 8000332:	430a      	orrs	r2, r1
 8000334:	615a      	str	r2, [r3, #20]

    /* GPIOA5 (BOARD LED) as output */
    GPIOA->MODER &= ~( 0x01U << 11 );
 8000336:	2390      	movs	r3, #144	; 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	2390      	movs	r3, #144	; 0x90
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	4908      	ldr	r1, [pc, #32]	; (8000364 <GPIOA_Init+0x40>)
 8000342:	400a      	ands	r2, r1
 8000344:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ( 0x01U << 10 );
 8000346:	2390      	movs	r3, #144	; 0x90
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	2390      	movs	r3, #144	; 0x90
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	00c9      	lsls	r1, r1, #3
 8000354:	430a      	orrs	r2, r1
 8000356:	601a      	str	r2, [r3, #0]
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	40021000 	.word	0x40021000
 8000364:	fffff7ff 	.word	0xfffff7ff

08000368 <USART2_Init>:
#include "usart.h"

void USART2_Init( void )
{
 8000368:	b5b0      	push	{r4, r5, r7, lr}
 800036a:	af00      	add	r7, sp, #0
    /* enable GPIOA (GPIOA2 = USART2TX, GPIOA3 = USART2RX) clock access */
    GPIOA_CLK_ENBL();
 800036c:	4b50      	ldr	r3, [pc, #320]	; (80004b0 <USART2_Init+0x148>)
 800036e:	695a      	ldr	r2, [r3, #20]
 8000370:	4b4f      	ldr	r3, [pc, #316]	; (80004b0 <USART2_Init+0x148>)
 8000372:	2180      	movs	r1, #128	; 0x80
 8000374:	0289      	lsls	r1, r1, #10
 8000376:	430a      	orrs	r2, r1
 8000378:	615a      	str	r2, [r3, #20]

    /* enable USART2 clock access */
    USART2_CLK_ENBL();
 800037a:	4b4d      	ldr	r3, [pc, #308]	; (80004b0 <USART2_Init+0x148>)
 800037c:	69da      	ldr	r2, [r3, #28]
 800037e:	4b4c      	ldr	r3, [pc, #304]	; (80004b0 <USART2_Init+0x148>)
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0289      	lsls	r1, r1, #10
 8000384:	430a      	orrs	r2, r1
 8000386:	61da      	str	r2, [r3, #28]

    /* GPIOA2 as alternate function */
    GPIOA->MODER |=  GPIO_MODER_MODER2_1;
 8000388:	2390      	movs	r3, #144	; 0x90
 800038a:	05db      	lsls	r3, r3, #23
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	2390      	movs	r3, #144	; 0x90
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	2120      	movs	r1, #32
 8000394:	430a      	orrs	r2, r1
 8000396:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODER2_0;
 8000398:	2390      	movs	r3, #144	; 0x90
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	2390      	movs	r3, #144	; 0x90
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	2110      	movs	r1, #16
 80003a4:	438a      	bics	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]

    /* GPIOA2 alternate function 1 (USART2 Tx) */
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL2_3;
 80003a8:	2390      	movs	r3, #144	; 0x90
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	6a1a      	ldr	r2, [r3, #32]
 80003ae:	2390      	movs	r3, #144	; 0x90
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	4940      	ldr	r1, [pc, #256]	; (80004b4 <USART2_Init+0x14c>)
 80003b4:	400a      	ands	r2, r1
 80003b6:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL2_2;
 80003b8:	2390      	movs	r3, #144	; 0x90
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	6a1a      	ldr	r2, [r3, #32]
 80003be:	2390      	movs	r3, #144	; 0x90
 80003c0:	05db      	lsls	r3, r3, #23
 80003c2:	493d      	ldr	r1, [pc, #244]	; (80004b8 <USART2_Init+0x150>)
 80003c4:	400a      	ands	r2, r1
 80003c6:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL2_1;
 80003c8:	2390      	movs	r3, #144	; 0x90
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	6a1a      	ldr	r2, [r3, #32]
 80003ce:	2390      	movs	r3, #144	; 0x90
 80003d0:	05db      	lsls	r3, r3, #23
 80003d2:	493a      	ldr	r1, [pc, #232]	; (80004bc <USART2_Init+0x154>)
 80003d4:	400a      	ands	r2, r1
 80003d6:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] |=  GPIO_AFRL_AFSEL2_0;
 80003d8:	2390      	movs	r3, #144	; 0x90
 80003da:	05db      	lsls	r3, r3, #23
 80003dc:	6a1a      	ldr	r2, [r3, #32]
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	0049      	lsls	r1, r1, #1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	621a      	str	r2, [r3, #32]

    /* GPIOA2 with pull-up resistor */
    GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR2_1;
 80003ea:	2390      	movs	r3, #144	; 0x90
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	68da      	ldr	r2, [r3, #12]
 80003f0:	2390      	movs	r3, #144	; 0x90
 80003f2:	05db      	lsls	r3, r3, #23
 80003f4:	2120      	movs	r1, #32
 80003f6:	438a      	bics	r2, r1
 80003f8:	60da      	str	r2, [r3, #12]
    GPIOA->PUPDR |=  GPIO_PUPDR_PUPDR2_0;
 80003fa:	2390      	movs	r3, #144	; 0x90
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	68da      	ldr	r2, [r3, #12]
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2110      	movs	r1, #16
 8000406:	430a      	orrs	r2, r1
 8000408:	60da      	str	r2, [r3, #12]

    /* GPIOA3 as alternate function */
    GPIOA->MODER |=  GPIO_MODER_MODER3_1;
 800040a:	2390      	movs	r3, #144	; 0x90
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	2390      	movs	r3, #144	; 0x90
 8000412:	05db      	lsls	r3, r3, #23
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	430a      	orrs	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODER3_0; 
 800041a:	2390      	movs	r3, #144	; 0x90
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	2390      	movs	r3, #144	; 0x90
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2140      	movs	r1, #64	; 0x40
 8000426:	438a      	bics	r2, r1
 8000428:	601a      	str	r2, [r3, #0]

    /* USART2 1 start bit and 8 data bits */
    USART2->CR1 &= ~USART_CR1_M1;
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <USART2_Init+0x158>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <USART2_Init+0x158>)
 8000430:	4924      	ldr	r1, [pc, #144]	; (80004c4 <USART2_Init+0x15c>)
 8000432:	400a      	ands	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
    USART2->CR1 &= ~USART_CR1_M0;
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <USART2_Init+0x158>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <USART2_Init+0x158>)
 800043c:	4922      	ldr	r1, [pc, #136]	; (80004c8 <USART2_Init+0x160>)
 800043e:	400a      	ands	r2, r1
 8000440:	601a      	str	r2, [r3, #0]

    /* USART2 1 stop bit */
    USART2->CR2 &= ~USART_CR2_STOP_1;
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <USART2_Init+0x158>)
 8000444:	685a      	ldr	r2, [r3, #4]
 8000446:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <USART2_Init+0x158>)
 8000448:	4920      	ldr	r1, [pc, #128]	; (80004cc <USART2_Init+0x164>)
 800044a:	400a      	ands	r2, r1
 800044c:	605a      	str	r2, [r3, #4]
    USART2->CR2 &= ~USART_CR2_STOP_0;
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <USART2_Init+0x158>)
 8000450:	685a      	ldr	r2, [r3, #4]
 8000452:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <USART2_Init+0x158>)
 8000454:	491c      	ldr	r1, [pc, #112]	; (80004c8 <USART2_Init+0x160>)
 8000456:	400a      	ands	r2, r1
 8000458:	605a      	str	r2, [r3, #4]

    /* USART2 no parity control */
    USART2->CR1 &= ~USART_CR1_PCE;
 800045a:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <USART2_Init+0x158>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <USART2_Init+0x158>)
 8000460:	4915      	ldr	r1, [pc, #84]	; (80004b8 <USART2_Init+0x150>)
 8000462:	400a      	ands	r2, r1
 8000464:	601a      	str	r2, [r3, #0]

    /* USART2 oversampling by 16 */
    USART2->CR1 &= ~USART_CR1_OVER8;
 8000466:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <USART2_Init+0x158>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <USART2_Init+0x158>)
 800046c:	4918      	ldr	r1, [pc, #96]	; (80004d0 <USART2_Init+0x168>)
 800046e:	400a      	ands	r2, r1
 8000470:	601a      	str	r2, [r3, #0]

    /* USART2 least significant bit first */
    USART2->CR2 &= ~USART_CR2_MSBFIRST;
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <USART2_Init+0x158>)
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <USART2_Init+0x158>)
 8000478:	4916      	ldr	r1, [pc, #88]	; (80004d4 <USART2_Init+0x16c>)
 800047a:	400a      	ands	r2, r1
 800047c:	605a      	str	r2, [r3, #4]

    /* USART2 9600 baud rate.
       When oversampling by 16 (OVER8 = 1):
       BRR = USARTDIV, with USARTDIV = fck / baud.
       Therefore USARTDIV = 8MHz (default value upon init.) / 9600 */
    USART2->BRR = GET_USARTDIV();
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <USART2_Init+0x170>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4c0f      	ldr	r4, [pc, #60]	; (80004c0 <USART2_Init+0x158>)
 8000484:	2296      	movs	r2, #150	; 0x96
 8000486:	0191      	lsls	r1, r2, #6
 8000488:	0018      	movs	r0, r3
 800048a:	f7ff fe19 	bl	80000c0 <__udivsi3>
 800048e:	0003      	movs	r3, r0
 8000490:	60e3      	str	r3, [r4, #12]

    /* USART2 transmitter enabled */
    USART2->CR1 |= USART_CR1_TE;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <USART2_Init+0x158>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <USART2_Init+0x158>)
 8000498:	2108      	movs	r1, #8
 800049a:	430a      	orrs	r2, r1
 800049c:	601a      	str	r2, [r3, #0]

    /* USART2 enabled */
    USART2->CR1 |= USART_CR1_UE;
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <USART2_Init+0x158>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <USART2_Init+0x158>)
 80004a4:	2101      	movs	r1, #1
 80004a6:	430a      	orrs	r2, r1
 80004a8:	601a      	str	r2, [r3, #0]
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bdb0      	pop	{r4, r5, r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	fffff7ff 	.word	0xfffff7ff
 80004b8:	fffffbff 	.word	0xfffffbff
 80004bc:	fffffdff 	.word	0xfffffdff
 80004c0:	40004400 	.word	0x40004400
 80004c4:	efffffff 	.word	0xefffffff
 80004c8:	ffffefff 	.word	0xffffefff
 80004cc:	ffffdfff 	.word	0xffffdfff
 80004d0:	ffff7fff 	.word	0xffff7fff
 80004d4:	fff7ffff 	.word	0xfff7ffff
 80004d8:	20000000 	.word	0x20000000

080004dc <DMA1_Channel4_5_IRQHandler>:
#include "interrupts.h"

void DMA1_Channel4_5_IRQHandler( void )
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    /* check if DMA CH4 (USART2_TX) transfer complete triggered the interrupt */
    if ( ( DMA1->ISR & DMA_ISR_TCIF4 ) == DMA_ISR_TCIF4 )
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <DMA1_Channel4_5_IRQHandler+0x30>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	019b      	lsls	r3, r3, #6
 80004e8:	401a      	ands	r2, r3
 80004ea:	2380      	movs	r3, #128	; 0x80
 80004ec:	019b      	lsls	r3, r3, #6
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d108      	bne.n	8000504 <DMA1_Channel4_5_IRQHandler+0x28>
    {   
        /* clear DMA CH4 (USART2_TX) transfer complete flag */
        DMA1->IFCR |= DMA_IFCR_CTCIF4;
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <DMA1_Channel4_5_IRQHandler+0x30>)
 80004f4:	685a      	ldr	r2, [r3, #4]
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <DMA1_Channel4_5_IRQHandler+0x30>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0189      	lsls	r1, r1, #6
 80004fc:	430a      	orrs	r2, r1
 80004fe:	605a      	str	r2, [r3, #4]

        /* execute DMA CH4 transfer complete callback */
        DMA_USART2_Tx_Complete_Callback();
 8000500:	f000 f806 	bl	8000510 <DMA_USART2_Tx_Complete_Callback>
    }
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40020000 	.word	0x40020000

08000510 <DMA_USART2_Tx_Complete_Callback>:

void DMA_USART2_Tx_Complete_Callback( void )
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    /* toggle board led */
    toggle_led();
 8000514:	f7ff feca 	bl	80002ac <toggle_led>
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <DMA_USART2_Tx_Init>:
#include "dma.h"

void DMA_USART2_Tx_Init( uint32_t mem_src, uint32_t periph_dest, uint16_t items )
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	1dbb      	adds	r3, r7, #6
 800052c:	801a      	strh	r2, [r3, #0]
    /* enable access to DMA clock */
    RCC->AHBENR |= RCC_AHBENR_DMAEN;
 800052e:	4b33      	ldr	r3, [pc, #204]	; (80005fc <DMA_USART2_Tx_Init+0xdc>)
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4b32      	ldr	r3, [pc, #200]	; (80005fc <DMA_USART2_Tx_Init+0xdc>)
 8000534:	2101      	movs	r1, #1
 8000536:	430a      	orrs	r2, r1
 8000538:	615a      	str	r2, [r3, #20]

    /* NOTE: data will be transferred from MEMORY (a character array)
             to PERIPHERAL (UART transmit data register) */

    /* set SOURCE buffer address (memory address) */
    DMA1_Channel4->CMAR = mem_src;
 800053a:	4b31      	ldr	r3, [pc, #196]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	60da      	str	r2, [r3, #12]

    /* set DESTINATION buffer address (peripheral address) */
    DMA1_Channel4->CPAR = periph_dest;
 8000540:	4b2f      	ldr	r3, [pc, #188]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	609a      	str	r2, [r3, #8]

    /* set DMA CH 4 (USART2_TX) memory size (source) to 8 bits */
    DMA1_Channel4->CCR &= ~DMA_CCR_MSIZE_1;
 8000546:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 800054c:	492d      	ldr	r1, [pc, #180]	; (8000604 <DMA_USART2_Tx_Init+0xe4>)
 800054e:	400a      	ands	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
    DMA1_Channel4->CCR &= ~DMA_CCR_MSIZE_0;
 8000552:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000558:	492b      	ldr	r1, [pc, #172]	; (8000608 <DMA_USART2_Tx_Init+0xe8>)
 800055a:	400a      	ands	r2, r1
 800055c:	601a      	str	r2, [r3, #0]

    /* set DMA CH 4 (USART2_TX) peripheral size (destination) to 8 bits */
    DMA1_Channel4->CCR &= ~DMA_CCR_PSIZE_1;
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000564:	4929      	ldr	r1, [pc, #164]	; (800060c <DMA_USART2_Tx_Init+0xec>)
 8000566:	400a      	ands	r2, r1
 8000568:	601a      	str	r2, [r3, #0]
    DMA1_Channel4->CCR &= ~DMA_CCR_PSIZE_0;
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000570:	4927      	ldr	r1, [pc, #156]	; (8000610 <DMA_USART2_Tx_Init+0xf0>)
 8000572:	400a      	ands	r2, r1
 8000574:	601a      	str	r2, [r3, #0]

    /* set number of data items to transfer from memory to peripheral */
    DMA1_Channel4->CNDTR = items;
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000578:	1dba      	adds	r2, r7, #6
 800057a:	8812      	ldrh	r2, [r2, #0]
 800057c:	605a      	str	r2, [r3, #4]

    /* enable DMA CH4 (USART2_TX) memory address increment mode */
    DMA1_Channel4->CCR |= DMA_CCR_MINC;
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]

    /* disable DMA CH4 (USART2_TX) peripheral address increment mode (fixed address) */
    DMA1_Channel4->CCR &= ~DMA_CCR_PINC;
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	438a      	bics	r2, r1
 8000594:	601a      	str	r2, [r3, #0]

    /* enable DMA CH4 (USART2_TX) circular mode */
    DMA1_Channel4->CCR |= DMA_CCR_CIRC;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 800059c:	2120      	movs	r1, #32
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]

    /* disable DMA CH4 (USART2_TX) memory to memory mode */
    DMA1_Channel4->CCR &= ~DMA_CCR_MEM2MEM;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005a8:	491a      	ldr	r1, [pc, #104]	; (8000614 <DMA_USART2_Tx_Init+0xf4>)
 80005aa:	400a      	ands	r2, r1
 80005ac:	601a      	str	r2, [r3, #0]

    /* set DMA CH4 (USART2_TX) transfer direction: read from memory ...
       therefore read from memory and write to peripheral */
    DMA1_Channel4->CCR |= DMA_CCR_DIR;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005b4:	2110      	movs	r1, #16
 80005b6:	430a      	orrs	r2, r1
 80005b8:	601a      	str	r2, [r3, #0]

    /* set DMA CH 4 (USART2_TX) to highest priority */
    DMA1_Channel4->CCR |= DMA_CCR_PL_1;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0189      	lsls	r1, r1, #6
 80005c4:	430a      	orrs	r2, r1
 80005c6:	601a      	str	r2, [r3, #0]
    DMA1_Channel4->CCR |= DMA_CCR_PL_0;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	0149      	lsls	r1, r1, #5
 80005d2:	430a      	orrs	r2, r1
 80005d4:	601a      	str	r2, [r3, #0]

    /* enable DMA CH4 transfer complete interrupt */
    DMA_USART2_Tx_Interrupt_Init();
 80005d6:	f000 f821 	bl	800061c <DMA_USART2_Tx_Interrupt_Init>

    /* enable DMA CH4 transmission mode on USART2 */
    USART2->CR3 |= USART_CR3_DMAT;
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <DMA_USART2_Tx_Init+0xf8>)
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <DMA_USART2_Tx_Init+0xf8>)
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	430a      	orrs	r2, r1
 80005e4:	609a      	str	r2, [r3, #8]

    /* enable DMA CH 4 (USART2_TX) */
    DMA1_Channel4->CCR |= DMA_CCR_EN;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <DMA_USART2_Tx_Init+0xe0>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	430a      	orrs	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b004      	add	sp, #16
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40021000 	.word	0x40021000
 8000600:	40020044 	.word	0x40020044
 8000604:	fffff7ff 	.word	0xfffff7ff
 8000608:	fffffbff 	.word	0xfffffbff
 800060c:	fffffdff 	.word	0xfffffdff
 8000610:	fffffeff 	.word	0xfffffeff
 8000614:	ffffbfff 	.word	0xffffbfff
 8000618:	40004400 	.word	0x40004400

0800061c <DMA_USART2_Tx_Interrupt_Init>:

void DMA_USART2_Tx_Interrupt_Init( void )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	46c0      	nop			; (mov r8, r8)
    /* disable global interrupts */
    __disable_irq();

    /* enable DMA CH4 (USART2_TX) transfer complete interrupt */
    DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <DMA_USART2_Tx_Interrupt_Init+0x54>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <DMA_USART2_Tx_Interrupt_Init+0x54>)
 800062a:	2102      	movs	r1, #2
 800062c:	430a      	orrs	r2, r1
 800062e:	601a      	str	r2, [r3, #0]

    /* enable interrupt 11 (DMA CH4 interrupt).
       Another method to do this is by using:
       NVIC_EnableIRQ( DMA1_Channel4_5_IRQn ) */
    NVIC->ISER[ 0 ] |= NVIC_ISER_SETENA_11;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <DMA_USART2_Tx_Interrupt_Init+0x58>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <DMA_USART2_Tx_Interrupt_Init+0x58>)
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	0109      	lsls	r1, r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	601a      	str	r2, [r3, #0]

    /* set DMA CH4 interrupt (N=11) priority to 64 (second highest priority).
       ISPRx. With x = N / 4 = 11 / 4, then 2 = 7. Therefore ISPRx = ISPR2.
       Byte offset = N MOD 4 = 11 MOD 4, therefore Byte offset = 3.
       NOTE: processor implements only bits 7 and 6 of each field. */
    NVIC->IP[ 2 ] &= ~NVIC_IPR_PRI11_7;
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <DMA_USART2_Tx_Interrupt_Init+0x58>)
 8000640:	23c2      	movs	r3, #194	; 0xc2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	58d3      	ldr	r3, [r2, r3]
 8000646:	490b      	ldr	r1, [pc, #44]	; (8000674 <DMA_USART2_Tx_Interrupt_Init+0x58>)
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	085a      	lsrs	r2, r3, #1
 800064c:	23c2      	movs	r3, #194	; 0xc2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	50ca      	str	r2, [r1, r3]
    NVIC->IP[ 2 ] &= ~NVIC_IPR_PRI11_6;
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <DMA_USART2_Tx_Interrupt_Init+0x58>)
 8000654:	23c2      	movs	r3, #194	; 0xc2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	58d3      	ldr	r3, [r2, r3]
 800065a:	4906      	ldr	r1, [pc, #24]	; (8000674 <DMA_USART2_Tx_Interrupt_Init+0x58>)
 800065c:	4a06      	ldr	r2, [pc, #24]	; (8000678 <DMA_USART2_Tx_Interrupt_Init+0x5c>)
 800065e:	401a      	ands	r2, r3
 8000660:	23c2      	movs	r3, #194	; 0xc2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	50ca      	str	r2, [r1, r3]
  __ASM volatile ("cpsie i" : : : "memory");
 8000666:	b662      	cpsie	i
}
 8000668:	46c0      	nop			; (mov r8, r8)

    /* enable global interrupts */
    __enable_irq();
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40020044 	.word	0x40020044
 8000674:	e000e100 	.word	0xe000e100
 8000678:	bfffffff 	.word	0xbfffffff

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	2600      	movs	r6, #0
 8000680:	4c0c      	ldr	r4, [pc, #48]	; (80006b4 <__libc_init_array+0x38>)
 8000682:	4d0d      	ldr	r5, [pc, #52]	; (80006b8 <__libc_init_array+0x3c>)
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	2600      	movs	r6, #0
 800068e:	f000 f819 	bl	80006c4 <_init>
 8000692:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <__libc_init_array+0x40>)
 8000694:	4d0a      	ldr	r5, [pc, #40]	; (80006c0 <__libc_init_array+0x44>)
 8000696:	1b64      	subs	r4, r4, r5
 8000698:	10a4      	asrs	r4, r4, #2
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	00b3      	lsls	r3, r6, #2
 80006a2:	58eb      	ldr	r3, [r5, r3]
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	00b3      	lsls	r3, r6, #2
 80006ac:	58eb      	ldr	r3, [r5, r3]
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	0800070c 	.word	0x0800070c
 80006b8:	0800070c 	.word	0x0800070c
 80006bc:	08000710 	.word	0x08000710
 80006c0:	0800070c 	.word	0x0800070c

080006c4 <_init>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr

080006d0 <_fini>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr
