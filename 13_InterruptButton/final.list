
final.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <deregister_tm_clones>:
 80000c0:	4804      	ldr	r0, [pc, #16]	; (80000d4 <deregister_tm_clones+0x14>)
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <deregister_tm_clones+0x18>)
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4283      	cmp	r3, r0
 80000c8:	d003      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000ca:	4b04      	ldr	r3, [pc, #16]	; (80000dc <deregister_tm_clones+0x1c>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d000      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000d0:	4798      	blx	r3
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000000 	.word	0x20000000
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000

080000e0 <register_tm_clones>:
 80000e0:	4806      	ldr	r0, [pc, #24]	; (80000fc <register_tm_clones+0x1c>)
 80000e2:	4907      	ldr	r1, [pc, #28]	; (8000100 <register_tm_clones+0x20>)
 80000e4:	1a09      	subs	r1, r1, r0
 80000e6:	108b      	asrs	r3, r1, #2
 80000e8:	0fc9      	lsrs	r1, r1, #31
 80000ea:	18c9      	adds	r1, r1, r3
 80000ec:	b510      	push	{r4, lr}
 80000ee:	1049      	asrs	r1, r1, #1
 80000f0:	d003      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f2:	4b04      	ldr	r3, [pc, #16]	; (8000104 <register_tm_clones+0x24>)
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d000      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f8:	4798      	blx	r3
 80000fa:	bd10      	pop	{r4, pc}
 80000fc:	20000000 	.word	0x20000000
 8000100:	20000000 	.word	0x20000000
 8000104:	00000000 	.word	0x00000000

08000108 <__do_global_dtors_aux>:
 8000108:	b510      	push	{r4, lr}
 800010a:	4c07      	ldr	r4, [pc, #28]	; (8000128 <__do_global_dtors_aux+0x20>)
 800010c:	7823      	ldrb	r3, [r4, #0]
 800010e:	2b00      	cmp	r3, #0
 8000110:	d109      	bne.n	8000126 <__do_global_dtors_aux+0x1e>
 8000112:	f7ff ffd5 	bl	80000c0 <deregister_tm_clones>
 8000116:	4b05      	ldr	r3, [pc, #20]	; (800012c <__do_global_dtors_aux+0x24>)
 8000118:	2b00      	cmp	r3, #0
 800011a:	d002      	beq.n	8000122 <__do_global_dtors_aux+0x1a>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x28>)
 800011e:	e000      	b.n	8000122 <__do_global_dtors_aux+0x1a>
 8000120:	bf00      	nop
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	080003cc 	.word	0x080003cc

08000134 <frame_dummy>:
 8000134:	4b05      	ldr	r3, [pc, #20]	; (800014c <frame_dummy+0x18>)
 8000136:	b510      	push	{r4, lr}
 8000138:	2b00      	cmp	r3, #0
 800013a:	d003      	beq.n	8000144 <frame_dummy+0x10>
 800013c:	4904      	ldr	r1, [pc, #16]	; (8000150 <frame_dummy+0x1c>)
 800013e:	4805      	ldr	r0, [pc, #20]	; (8000154 <frame_dummy+0x20>)
 8000140:	e000      	b.n	8000144 <frame_dummy+0x10>
 8000142:	bf00      	nop
 8000144:	f7ff ffcc 	bl	80000e0 <register_tm_clones>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	46c0      	nop			; (mov r8, r8)
 800014c:	00000000 	.word	0x00000000
 8000150:	20000004 	.word	0x20000004
 8000154:	080003cc 	.word	0x080003cc

08000158 <main>:
#include "main.h"

int main( void )
{   
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
    /* initialize BOARD BUTTON*/
    GPIOA_Init();
 800015c:	f000 f834 	bl	80001c8 <GPIOA_Init>

    /* initialize BOARD LED as output
       and interrupt line for both
       rising and falling edge */
    GPIOC_Init();
 8000160:	f000 f854 	bl	800020c <GPIOC_Init>

    while( 1 )
 8000164:	46c0      	nop			; (mov r8, r8)
 8000166:	e7fd      	b.n	8000164 <main+0xc>

08000168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800016c:	46c0      	nop			; (mov r8, r8)
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
	...

08000174 <Reset_Handler>:
 8000174:	480d      	ldr	r0, [pc, #52]	; (80001ac <LoopForever+0x2>)
 8000176:	4685      	mov	sp, r0
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x6>)
 800017a:	490e      	ldr	r1, [pc, #56]	; (80001b4 <LoopForever+0xa>)
 800017c:	4a0e      	ldr	r2, [pc, #56]	; (80001b8 <LoopForever+0xe>)
 800017e:	2300      	movs	r3, #0
 8000180:	e002      	b.n	8000188 <LoopCopyDataInit>

08000182 <CopyDataInit>:
 8000182:	58d4      	ldr	r4, [r2, r3]
 8000184:	50c4      	str	r4, [r0, r3]
 8000186:	3304      	adds	r3, #4

08000188 <LoopCopyDataInit>:
 8000188:	18c4      	adds	r4, r0, r3
 800018a:	428c      	cmp	r4, r1
 800018c:	d3f9      	bcc.n	8000182 <CopyDataInit>
 800018e:	4a0b      	ldr	r2, [pc, #44]	; (80001bc <LoopForever+0x12>)
 8000190:	4c0b      	ldr	r4, [pc, #44]	; (80001c0 <LoopForever+0x16>)
 8000192:	2300      	movs	r3, #0
 8000194:	e001      	b.n	800019a <LoopFillZerobss>

08000196 <FillZerobss>:
 8000196:	6013      	str	r3, [r2, #0]
 8000198:	3204      	adds	r2, #4

0800019a <LoopFillZerobss>:
 800019a:	42a2      	cmp	r2, r4
 800019c:	d3fb      	bcc.n	8000196 <FillZerobss>
 800019e:	f7ff ffe3 	bl	8000168 <SystemInit>
 80001a2:	f000 f8ef 	bl	8000384 <__libc_init_array>
 80001a6:	f7ff ffd7 	bl	8000158 <main>

080001aa <LoopForever>:
 80001aa:	e7fe      	b.n	80001aa <LoopForever>
 80001ac:	20004000 	.word	0x20004000
 80001b0:	20000000 	.word	0x20000000
 80001b4:	20000000 	.word	0x20000000
 80001b8:	080003ec 	.word	0x080003ec
 80001bc:	20000000 	.word	0x20000000
 80001c0:	2000001c 	.word	0x2000001c

080001c4 <ADC1_IRQHandler>:
 80001c4:	e7fe      	b.n	80001c4 <ADC1_IRQHandler>
	...

080001c8 <GPIOA_Init>:
#include "gpio.h"

void GPIOA_Init( void )
{   
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    /* enable GPIOA clock access */
    GPIOA_CLK_ENBL();
 80001cc:	4b0d      	ldr	r3, [pc, #52]	; (8000204 <GPIOA_Init+0x3c>)
 80001ce:	695a      	ldr	r2, [r3, #20]
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <GPIOA_Init+0x3c>)
 80001d2:	2180      	movs	r1, #128	; 0x80
 80001d4:	0289      	lsls	r1, r1, #10
 80001d6:	430a      	orrs	r2, r1
 80001d8:	615a      	str	r2, [r3, #20]

    /* GPIOA5 (BOARD LED) as output */
    GPIOA->MODER &= ~( 0x01U << 11 );
 80001da:	2390      	movs	r3, #144	; 0x90
 80001dc:	05db      	lsls	r3, r3, #23
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	2390      	movs	r3, #144	; 0x90
 80001e2:	05db      	lsls	r3, r3, #23
 80001e4:	4908      	ldr	r1, [pc, #32]	; (8000208 <GPIOA_Init+0x40>)
 80001e6:	400a      	ands	r2, r1
 80001e8:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ( 0x01U << 10 );
 80001ea:	2390      	movs	r3, #144	; 0x90
 80001ec:	05db      	lsls	r3, r3, #23
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	2390      	movs	r3, #144	; 0x90
 80001f2:	05db      	lsls	r3, r3, #23
 80001f4:	2180      	movs	r1, #128	; 0x80
 80001f6:	00c9      	lsls	r1, r1, #3
 80001f8:	430a      	orrs	r2, r1
 80001fa:	601a      	str	r2, [r3, #0]
}
 80001fc:	46c0      	nop			; (mov r8, r8)
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	46c0      	nop			; (mov r8, r8)
 8000204:	40021000 	.word	0x40021000
 8000208:	fffff7ff 	.word	0xfffff7ff

0800020c <GPIOC_Init>:

void GPIOC_Init( void )
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
    /* enable GPIOC clock access */
    GPIOC_CLK_ENBL();
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <GPIOC_Init+0x34>)
 8000212:	695a      	ldr	r2, [r3, #20]
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <GPIOC_Init+0x34>)
 8000216:	2180      	movs	r1, #128	; 0x80
 8000218:	0309      	lsls	r1, r1, #12
 800021a:	430a      	orrs	r2, r1
 800021c:	615a      	str	r2, [r3, #20]

    /* GPIOC13 (BOARD BUTTON) as input */
    GPIOC->MODER &= ~GPIO_MODER_MODER13_1;
 800021e:	4b09      	ldr	r3, [pc, #36]	; (8000244 <GPIOC_Init+0x38>)
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <GPIOC_Init+0x38>)
 8000224:	4908      	ldr	r1, [pc, #32]	; (8000248 <GPIOC_Init+0x3c>)
 8000226:	400a      	ands	r2, r1
 8000228:	601a      	str	r2, [r3, #0]
    GPIOC->MODER &= ~GPIO_MODER_MODER13_0;
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <GPIOC_Init+0x38>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	4b05      	ldr	r3, [pc, #20]	; (8000244 <GPIOC_Init+0x38>)
 8000230:	4906      	ldr	r1, [pc, #24]	; (800024c <GPIOC_Init+0x40>)
 8000232:	400a      	ands	r2, r1
 8000234:	601a      	str	r2, [r3, #0]

    /* BOARD BUTTON uses a PULL-UP resistor by default */

    /* configure GPIOC13 (BOARD button) as an interrupt on both
       falling and rising edge  */
    GPIOC_EXTI13_Init();
 8000236:	f000 f80b 	bl	8000250 <GPIOC_EXTI13_Init>
}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40021000 	.word	0x40021000
 8000244:	48000800 	.word	0x48000800
 8000248:	f7ffffff 	.word	0xf7ffffff
 800024c:	fbffffff 	.word	0xfbffffff

08000250 <GPIOC_EXTI13_Init>:
#include "exti.h"

void GPIOC_EXTI13_Init( void )
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000254:	b672      	cpsid	i
}
 8000256:	46c0      	nop			; (mov r8, r8)
    /* disable global interrupts */
    __disable_irq();

    /* enable SYSCFG clock access */
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000258:	4b29      	ldr	r3, [pc, #164]	; (8000300 <GPIOC_EXTI13_Init+0xb0>)
 800025a:	699a      	ldr	r2, [r3, #24]
 800025c:	4b28      	ldr	r3, [pc, #160]	; (8000300 <GPIOC_EXTI13_Init+0xb0>)
 800025e:	2101      	movs	r1, #1
 8000260:	430a      	orrs	r2, r1
 8000262:	619a      	str	r2, [r3, #24]

    /* map EXTI13 to GPIOC */
    SYSCFG->EXTICR[ 3 ] &= ~SYSCFG_EXTICR4_EXTI13_2;
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <GPIOC_EXTI13_Init+0xb4>)
 8000266:	695a      	ldr	r2, [r3, #20]
 8000268:	4b26      	ldr	r3, [pc, #152]	; (8000304 <GPIOC_EXTI13_Init+0xb4>)
 800026a:	2140      	movs	r1, #64	; 0x40
 800026c:	438a      	bics	r2, r1
 800026e:	615a      	str	r2, [r3, #20]
    SYSCFG->EXTICR[ 3 ] |=  SYSCFG_EXTICR4_EXTI13_1;
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <GPIOC_EXTI13_Init+0xb4>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <GPIOC_EXTI13_Init+0xb4>)
 8000276:	2120      	movs	r1, #32
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
    SYSCFG->EXTICR[ 3 ] &= ~SYSCFG_EXTICR4_EXTI13_0;
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <GPIOC_EXTI13_Init+0xb4>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	4b20      	ldr	r3, [pc, #128]	; (8000304 <GPIOC_EXTI13_Init+0xb4>)
 8000282:	2110      	movs	r1, #16
 8000284:	438a      	bics	r2, r1
 8000286:	615a      	str	r2, [r3, #20]

    /* unmask/enable interrupt request on line 13 */
    EXTI->IMR |= EXTI_IMR_IM13;
 8000288:	4b1f      	ldr	r3, [pc, #124]	; (8000308 <GPIOC_EXTI13_Init+0xb8>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <GPIOC_EXTI13_Init+0xb8>)
 800028e:	2180      	movs	r1, #128	; 0x80
 8000290:	0189      	lsls	r1, r1, #6
 8000292:	430a      	orrs	r2, r1
 8000294:	601a      	str	r2, [r3, #0]

    /* unmask/enable event request on line 13 */
    EXTI->EMR |= EXTI_EMR_EM13;
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <GPIOC_EXTI13_Init+0xb8>)
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <GPIOC_EXTI13_Init+0xb8>)
 800029c:	2180      	movs	r1, #128	; 0x80
 800029e:	0189      	lsls	r1, r1, #6
 80002a0:	430a      	orrs	r2, r1
 80002a2:	605a      	str	r2, [r3, #4]

    /* rising edge trigger enabled on line 13 */
    EXTI->RTSR |= EXTI_RTSR_RT13;
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <GPIOC_EXTI13_Init+0xb8>)
 80002a6:	689a      	ldr	r2, [r3, #8]
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <GPIOC_EXTI13_Init+0xb8>)
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	0189      	lsls	r1, r1, #6
 80002ae:	430a      	orrs	r2, r1
 80002b0:	609a      	str	r2, [r3, #8]

    /* falling edge trigger enabled on line 13 */
    EXTI->FTSR |= EXTI_FTSR_FT13;
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <GPIOC_EXTI13_Init+0xb8>)
 80002b4:	68da      	ldr	r2, [r3, #12]
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <GPIOC_EXTI13_Init+0xb8>)
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	0189      	lsls	r1, r1, #6
 80002bc:	430a      	orrs	r2, r1
 80002be:	60da      	str	r2, [r3, #12]

    /* enable interrupt 7 (EXTI4_15).
       Another method to do this is by using:
    NVIC_EnableIRQ( EXTI4_15_IRQn ) */
    NVIC->ISER[ 0 ] |= NVIC_ISER_SETENA_7;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <GPIOC_EXTI13_Init+0xbc>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <GPIOC_EXTI13_Init+0xbc>)
 80002c6:	2180      	movs	r1, #128	; 0x80
 80002c8:	430a      	orrs	r2, r1
 80002ca:	601a      	str	r2, [r3, #0]

    /* set interrupt EXTI4_15 (N=7) priority to zero (highest priority).
       ISPRx. With x = N / 4 = 7 / 4, then x = 1. Therefore ISPRx = ISPR1.
       Byte offset = N MOD 4 = 7 MOD 4, therefore Byte offset = 3.
       NOTE: processor implements only bits 7 and 6 of each field. */
    NVIC->IP[ 2 ] &= ~NVIC_IPR_PRI7_7;
 80002cc:	4a0f      	ldr	r2, [pc, #60]	; (800030c <GPIOC_EXTI13_Init+0xbc>)
 80002ce:	23c2      	movs	r3, #194	; 0xc2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	58d3      	ldr	r3, [r2, r3]
 80002d4:	490d      	ldr	r1, [pc, #52]	; (800030c <GPIOC_EXTI13_Init+0xbc>)
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	085a      	lsrs	r2, r3, #1
 80002da:	23c2      	movs	r3, #194	; 0xc2
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	50ca      	str	r2, [r1, r3]
    NVIC->IP[ 2 ] &= ~NVIC_IPR_PRI7_6;
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <GPIOC_EXTI13_Init+0xbc>)
 80002e2:	23c2      	movs	r3, #194	; 0xc2
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	58d3      	ldr	r3, [r2, r3]
 80002e8:	4908      	ldr	r1, [pc, #32]	; (800030c <GPIOC_EXTI13_Init+0xbc>)
 80002ea:	4a09      	ldr	r2, [pc, #36]	; (8000310 <GPIOC_EXTI13_Init+0xc0>)
 80002ec:	401a      	ands	r2, r3
 80002ee:	23c2      	movs	r3, #194	; 0xc2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	50ca      	str	r2, [r1, r3]
  __ASM volatile ("cpsie i" : : : "memory");
 80002f4:	b662      	cpsie	i
}
 80002f6:	46c0      	nop			; (mov r8, r8)

    /* enable global interrupts */
    __enable_irq();
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	40021000 	.word	0x40021000
 8000304:	40010000 	.word	0x40010000
 8000308:	40010400 	.word	0x40010400
 800030c:	e000e100 	.word	0xe000e100
 8000310:	bfffffff 	.word	0xbfffffff

08000314 <EXTI4_15_IRQHandler>:
#include "interrupts.h"

void EXTI4_15_IRQHandler( void )
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    /* determine if EXTI13 has occurred */
    if ( ( EXTI->PR & EXTI_PR_PIF13 ) == EXTI_PR_PIF13 )
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <EXTI4_15_IRQHandler+0x30>)
 800031a:	695a      	ldr	r2, [r3, #20]
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	019b      	lsls	r3, r3, #6
 8000320:	401a      	ands	r2, r3
 8000322:	2380      	movs	r3, #128	; 0x80
 8000324:	019b      	lsls	r3, r3, #6
 8000326:	429a      	cmp	r2, r3
 8000328:	d108      	bne.n	800033c <EXTI4_15_IRQHandler+0x28>
    {
        /* clear EXTI13 pending bit */
        EXTI->PR |= EXTI_PR_PIF13;
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <EXTI4_15_IRQHandler+0x30>)
 800032c:	695a      	ldr	r2, [r3, #20]
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <EXTI4_15_IRQHandler+0x30>)
 8000330:	2180      	movs	r1, #128	; 0x80
 8000332:	0189      	lsls	r1, r1, #6
 8000334:	430a      	orrs	r2, r1
 8000336:	615a      	str	r2, [r3, #20]

        /* execute EXTI4_15_Callback */
        EXTI4_15_Callback();
 8000338:	f000 f806 	bl	8000348 <EXTI4_15_Callback>
    }
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	40010400 	.word	0x40010400

08000348 <EXTI4_15_Callback>:

void EXTI4_15_Callback( void )
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
    /* if BOARD BUTTON is pressed */
    if ( ( GPIOC->IDR & GPIO_IDR_13 ) == 0U )
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <EXTI4_15_Callback+0x38>)
 800034e:	691a      	ldr	r2, [r3, #16]
 8000350:	2380      	movs	r3, #128	; 0x80
 8000352:	019b      	lsls	r3, r3, #6
 8000354:	4013      	ands	r3, r2
 8000356:	d108      	bne.n	800036a <EXTI4_15_Callback+0x22>
    {
        /* turn on BOARD LED */
        GPIOA->ODR |= GPIO_ODR_5;
 8000358:	2390      	movs	r3, #144	; 0x90
 800035a:	05db      	lsls	r3, r3, #23
 800035c:	695a      	ldr	r2, [r3, #20]
 800035e:	2390      	movs	r3, #144	; 0x90
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	2120      	movs	r1, #32
 8000364:	430a      	orrs	r2, r1
 8000366:	615a      	str	r2, [r3, #20]
    else
    {
        /* turn off BOARD LED */
        GPIOA->ODR &= ~GPIO_ODR_5;
    }
}
 8000368:	e007      	b.n	800037a <EXTI4_15_Callback+0x32>
        GPIOA->ODR &= ~GPIO_ODR_5;
 800036a:	2390      	movs	r3, #144	; 0x90
 800036c:	05db      	lsls	r3, r3, #23
 800036e:	695a      	ldr	r2, [r3, #20]
 8000370:	2390      	movs	r3, #144	; 0x90
 8000372:	05db      	lsls	r3, r3, #23
 8000374:	2120      	movs	r1, #32
 8000376:	438a      	bics	r2, r1
 8000378:	615a      	str	r2, [r3, #20]
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	48000800 	.word	0x48000800

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	2600      	movs	r6, #0
 8000388:	4c0c      	ldr	r4, [pc, #48]	; (80003bc <__libc_init_array+0x38>)
 800038a:	4d0d      	ldr	r5, [pc, #52]	; (80003c0 <__libc_init_array+0x3c>)
 800038c:	1b64      	subs	r4, r4, r5
 800038e:	10a4      	asrs	r4, r4, #2
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	2600      	movs	r6, #0
 8000396:	f000 f819 	bl	80003cc <_init>
 800039a:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <__libc_init_array+0x40>)
 800039c:	4d0a      	ldr	r5, [pc, #40]	; (80003c8 <__libc_init_array+0x44>)
 800039e:	1b64      	subs	r4, r4, r5
 80003a0:	10a4      	asrs	r4, r4, #2
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	00b3      	lsls	r3, r6, #2
 80003aa:	58eb      	ldr	r3, [r5, r3]
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	00b3      	lsls	r3, r6, #2
 80003b4:	58eb      	ldr	r3, [r5, r3]
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003e4 	.word	0x080003e4

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
