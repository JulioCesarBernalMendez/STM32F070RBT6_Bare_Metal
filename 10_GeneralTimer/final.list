
final.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <deregister_tm_clones>:
 80000c0:	4804      	ldr	r0, [pc, #16]	; (80000d4 <deregister_tm_clones+0x14>)
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <deregister_tm_clones+0x18>)
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4283      	cmp	r3, r0
 80000c8:	d003      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000ca:	4b04      	ldr	r3, [pc, #16]	; (80000dc <deregister_tm_clones+0x1c>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d000      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000d0:	4798      	blx	r3
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000000 	.word	0x20000000
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000

080000e0 <register_tm_clones>:
 80000e0:	4806      	ldr	r0, [pc, #24]	; (80000fc <register_tm_clones+0x1c>)
 80000e2:	4907      	ldr	r1, [pc, #28]	; (8000100 <register_tm_clones+0x20>)
 80000e4:	1a09      	subs	r1, r1, r0
 80000e6:	108b      	asrs	r3, r1, #2
 80000e8:	0fc9      	lsrs	r1, r1, #31
 80000ea:	18c9      	adds	r1, r1, r3
 80000ec:	b510      	push	{r4, lr}
 80000ee:	1049      	asrs	r1, r1, #1
 80000f0:	d003      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f2:	4b04      	ldr	r3, [pc, #16]	; (8000104 <register_tm_clones+0x24>)
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d000      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f8:	4798      	blx	r3
 80000fa:	bd10      	pop	{r4, pc}
 80000fc:	20000000 	.word	0x20000000
 8000100:	20000000 	.word	0x20000000
 8000104:	00000000 	.word	0x00000000

08000108 <__do_global_dtors_aux>:
 8000108:	b510      	push	{r4, lr}
 800010a:	4c07      	ldr	r4, [pc, #28]	; (8000128 <__do_global_dtors_aux+0x20>)
 800010c:	7823      	ldrb	r3, [r4, #0]
 800010e:	2b00      	cmp	r3, #0
 8000110:	d109      	bne.n	8000126 <__do_global_dtors_aux+0x1e>
 8000112:	f7ff ffd5 	bl	80000c0 <deregister_tm_clones>
 8000116:	4b05      	ldr	r3, [pc, #20]	; (800012c <__do_global_dtors_aux+0x24>)
 8000118:	2b00      	cmp	r3, #0
 800011a:	d002      	beq.n	8000122 <__do_global_dtors_aux+0x1a>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x28>)
 800011e:	e000      	b.n	8000122 <__do_global_dtors_aux+0x1a>
 8000120:	bf00      	nop
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	08000324 	.word	0x08000324

08000134 <frame_dummy>:
 8000134:	4b05      	ldr	r3, [pc, #20]	; (800014c <frame_dummy+0x18>)
 8000136:	b510      	push	{r4, lr}
 8000138:	2b00      	cmp	r3, #0
 800013a:	d003      	beq.n	8000144 <frame_dummy+0x10>
 800013c:	4904      	ldr	r1, [pc, #16]	; (8000150 <frame_dummy+0x1c>)
 800013e:	4805      	ldr	r0, [pc, #20]	; (8000154 <frame_dummy+0x20>)
 8000140:	e000      	b.n	8000144 <frame_dummy+0x10>
 8000142:	bf00      	nop
 8000144:	f7ff ffcc 	bl	80000e0 <register_tm_clones>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	46c0      	nop			; (mov r8, r8)
 800014c:	00000000 	.word	0x00000000
 8000150:	20000004 	.word	0x20000004
 8000154:	08000324 	.word	0x08000324

08000158 <main>:
#include "main.h"
#include "gpio.h"
#include "timer.h"

int main( void )
{
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
    GPIOA_Init();
 800015c:	f000 f846 	bl	80001ec <GPIOA_Init>
    TIM3_Init();
 8000160:	f000 f866 	bl	8000230 <TIM3_Init>

    while( 1 )
    {   
        toggle_led();
 8000164:	f000 f805 	bl	8000172 <toggle_led>
        TIM3_Delay_1s( 1U );
 8000168:	2001      	movs	r0, #1
 800016a:	f000 f88d 	bl	8000288 <TIM3_Delay_1s>
        toggle_led();
 800016e:	46c0      	nop			; (mov r8, r8)
 8000170:	e7f8      	b.n	8000164 <main+0xc>

08000172 <toggle_led>:

    return 0;
}

void toggle_led( void )
{
 8000172:	b580      	push	{r7, lr}
 8000174:	af00      	add	r7, sp, #0
    GPIOA->ODR ^= LED_PIN;
 8000176:	2390      	movs	r3, #144	; 0x90
 8000178:	05db      	lsls	r3, r3, #23
 800017a:	695a      	ldr	r2, [r3, #20]
 800017c:	2390      	movs	r3, #144	; 0x90
 800017e:	05db      	lsls	r3, r3, #23
 8000180:	2120      	movs	r1, #32
 8000182:	404a      	eors	r2, r1
 8000184:	615a      	str	r2, [r3, #20]
}
 8000186:	46c0      	nop			; (mov r8, r8)
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000190:	46c0      	nop			; (mov r8, r8)
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <Reset_Handler>:
 8000198:	480d      	ldr	r0, [pc, #52]	; (80001d0 <LoopForever+0x2>)
 800019a:	4685      	mov	sp, r0
 800019c:	480d      	ldr	r0, [pc, #52]	; (80001d4 <LoopForever+0x6>)
 800019e:	490e      	ldr	r1, [pc, #56]	; (80001d8 <LoopForever+0xa>)
 80001a0:	4a0e      	ldr	r2, [pc, #56]	; (80001dc <LoopForever+0xe>)
 80001a2:	2300      	movs	r3, #0
 80001a4:	e002      	b.n	80001ac <LoopCopyDataInit>

080001a6 <CopyDataInit>:
 80001a6:	58d4      	ldr	r4, [r2, r3]
 80001a8:	50c4      	str	r4, [r0, r3]
 80001aa:	3304      	adds	r3, #4

080001ac <LoopCopyDataInit>:
 80001ac:	18c4      	adds	r4, r0, r3
 80001ae:	428c      	cmp	r4, r1
 80001b0:	d3f9      	bcc.n	80001a6 <CopyDataInit>
 80001b2:	4a0b      	ldr	r2, [pc, #44]	; (80001e0 <LoopForever+0x12>)
 80001b4:	4c0b      	ldr	r4, [pc, #44]	; (80001e4 <LoopForever+0x16>)
 80001b6:	2300      	movs	r3, #0
 80001b8:	e001      	b.n	80001be <LoopFillZerobss>

080001ba <FillZerobss>:
 80001ba:	6013      	str	r3, [r2, #0]
 80001bc:	3204      	adds	r2, #4

080001be <LoopFillZerobss>:
 80001be:	42a2      	cmp	r2, r4
 80001c0:	d3fb      	bcc.n	80001ba <FillZerobss>
 80001c2:	f7ff ffe3 	bl	800018c <SystemInit>
 80001c6:	f000 f889 	bl	80002dc <__libc_init_array>
 80001ca:	f7ff ffc5 	bl	8000158 <main>

080001ce <LoopForever>:
 80001ce:	e7fe      	b.n	80001ce <LoopForever>
 80001d0:	20004000 	.word	0x20004000
 80001d4:	20000000 	.word	0x20000000
 80001d8:	20000000 	.word	0x20000000
 80001dc:	08000344 	.word	0x08000344
 80001e0:	20000000 	.word	0x20000000
 80001e4:	2000001c 	.word	0x2000001c

080001e8 <ADC1_IRQHandler>:
 80001e8:	e7fe      	b.n	80001e8 <ADC1_IRQHandler>
	...

080001ec <GPIOA_Init>:
#include "stm32f0xx.h"
#include "gpio.h"

void GPIOA_Init( void )
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
    GPIOA_CLK_ENBL();
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <GPIOA_Init+0x3c>)
 80001f2:	695a      	ldr	r2, [r3, #20]
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <GPIOA_Init+0x3c>)
 80001f6:	2180      	movs	r1, #128	; 0x80
 80001f8:	0289      	lsls	r1, r1, #10
 80001fa:	430a      	orrs	r2, r1
 80001fc:	615a      	str	r2, [r3, #20]

    /* GPIOA5 (BOARD LED) as output */
    GPIOA->MODER &= ~( 0x01U << 11 );
 80001fe:	2390      	movs	r3, #144	; 0x90
 8000200:	05db      	lsls	r3, r3, #23
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	2390      	movs	r3, #144	; 0x90
 8000206:	05db      	lsls	r3, r3, #23
 8000208:	4908      	ldr	r1, [pc, #32]	; (800022c <GPIOA_Init+0x40>)
 800020a:	400a      	ands	r2, r1
 800020c:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ( 0x01U << 10 );
 800020e:	2390      	movs	r3, #144	; 0x90
 8000210:	05db      	lsls	r3, r3, #23
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	2390      	movs	r3, #144	; 0x90
 8000216:	05db      	lsls	r3, r3, #23
 8000218:	2180      	movs	r1, #128	; 0x80
 800021a:	00c9      	lsls	r1, r1, #3
 800021c:	430a      	orrs	r2, r1
 800021e:	601a      	str	r2, [r3, #0]
}
 8000220:	46c0      	nop			; (mov r8, r8)
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	46c0      	nop			; (mov r8, r8)
 8000228:	40021000 	.word	0x40021000
 800022c:	fffff7ff 	.word	0xfffff7ff

08000230 <TIM3_Init>:
#include <stdint.h>
#include "stm32f0xx.h"
#include "timer.h"

void TIM3_Init( void )
{   
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    /* enable TIM3 clock */
    TIM3_CLK_ENBL();
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <TIM3_Init+0x4c>)
 8000236:	69da      	ldr	r2, [r3, #28]
 8000238:	4b10      	ldr	r3, [pc, #64]	; (800027c <TIM3_Init+0x4c>)
 800023a:	2102      	movs	r1, #2
 800023c:	430a      	orrs	r2, r1
 800023e:	61da      	str	r2, [r3, #28]

    /* TIM3 as upcounter */
    TIM3->CR1 &= ~TIM_CR1_DIR;
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <TIM3_Init+0x50>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <TIM3_Init+0x50>)
 8000246:	2110      	movs	r1, #16
 8000248:	438a      	bics	r2, r1
 800024a:	601a      	str	r2, [r3, #0]

    /* TIM3 UEV (update event) generation enabled */
    TIM3->CR1 &= ~TIM_CR1_UDIS;
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <TIM3_Init+0x50>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <TIM3_Init+0x50>)
 8000252:	2102      	movs	r1, #2
 8000254:	438a      	bics	r2, r1
 8000256:	601a      	str	r2, [r3, #0]

    /* TIM3 auto-reload preload enabled */
    TIM3->CR1 |= TIM_CR1_ARPE;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <TIM3_Init+0x50>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <TIM3_Init+0x50>)
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	430a      	orrs	r2, r1
 8000262:	601a      	str	r2, [r3, #0]
    
    /* TIM3 prescaler.
       In order to generate a TIM3_period = 1ms:
       PSC = (1ms x fck_psc) - 1
       with fck_psc = 8MHz */
    TIM3->PSC = 0x1F3FU;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <TIM3_Init+0x50>)
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <TIM3_Init+0x54>)
 8000268:	629a      	str	r2, [r3, #40]	; 0x28

    /* enable TIM3 */
    TIM3->CR1 |= TIM_CR1_CEN;
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <TIM3_Init+0x50>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <TIM3_Init+0x50>)
 8000270:	2101      	movs	r1, #1
 8000272:	430a      	orrs	r2, r1
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40021000 	.word	0x40021000
 8000280:	40000400 	.word	0x40000400
 8000284:	00001f3f 	.word	0x00001f3f

08000288 <TIM3_Delay_1s>:

void TIM3_Delay_1s( uint32_t seconds )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]

    /* TIM3 auto-reload register.
       In order to generate a timebase = 1 second:
       AUTORELOAD = (1s / TIM3_period) - 1
       with TIM3_period = 1ms */
    TIM3->ARR = 0x03E7U;
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <TIM3_Delay_1s+0x4c>)
 8000292:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <TIM3_Delay_1s+0x50>)
 8000294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* wait entered seconds */
    for ( i = 0; i < seconds; i++ )
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	e011      	b.n	80002c0 <TIM3_Delay_1s+0x38>
    {
        /* clear TIM3 counter */
        TIM3->CNT = 0x0U;
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <TIM3_Delay_1s+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* wait for update flag (1 second) */
        while ( ( TIM3->SR & TIM_SR_UIF ) == 0U )
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <TIM3_Delay_1s+0x4c>)
 80002a6:	691b      	ldr	r3, [r3, #16]
 80002a8:	2201      	movs	r2, #1
 80002aa:	4013      	ands	r3, r2
 80002ac:	d0fa      	beq.n	80002a4 <TIM3_Delay_1s+0x1c>
        {
            /* do nothing */
        }

        /* clear update flag */
        TIM3->SR &= ~TIM_SR_UIF;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <TIM3_Delay_1s+0x4c>)
 80002b0:	691a      	ldr	r2, [r3, #16]
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <TIM3_Delay_1s+0x4c>)
 80002b4:	2101      	movs	r1, #1
 80002b6:	438a      	bics	r2, r1
 80002b8:	611a      	str	r2, [r3, #16]
    for ( i = 0; i < seconds; i++ )
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3301      	adds	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d3e9      	bcc.n	800029c <TIM3_Delay_1s+0x14>
    }
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	b004      	add	sp, #16
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	40000400 	.word	0x40000400
 80002d8:	000003e7 	.word	0x000003e7

080002dc <__libc_init_array>:
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	2600      	movs	r6, #0
 80002e0:	4c0c      	ldr	r4, [pc, #48]	; (8000314 <__libc_init_array+0x38>)
 80002e2:	4d0d      	ldr	r5, [pc, #52]	; (8000318 <__libc_init_array+0x3c>)
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	10a4      	asrs	r4, r4, #2
 80002e8:	42a6      	cmp	r6, r4
 80002ea:	d109      	bne.n	8000300 <__libc_init_array+0x24>
 80002ec:	2600      	movs	r6, #0
 80002ee:	f000 f819 	bl	8000324 <_init>
 80002f2:	4c0a      	ldr	r4, [pc, #40]	; (800031c <__libc_init_array+0x40>)
 80002f4:	4d0a      	ldr	r5, [pc, #40]	; (8000320 <__libc_init_array+0x44>)
 80002f6:	1b64      	subs	r4, r4, r5
 80002f8:	10a4      	asrs	r4, r4, #2
 80002fa:	42a6      	cmp	r6, r4
 80002fc:	d105      	bne.n	800030a <__libc_init_array+0x2e>
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	00b3      	lsls	r3, r6, #2
 8000302:	58eb      	ldr	r3, [r5, r3]
 8000304:	4798      	blx	r3
 8000306:	3601      	adds	r6, #1
 8000308:	e7ee      	b.n	80002e8 <__libc_init_array+0xc>
 800030a:	00b3      	lsls	r3, r6, #2
 800030c:	58eb      	ldr	r3, [r5, r3]
 800030e:	4798      	blx	r3
 8000310:	3601      	adds	r6, #1
 8000312:	e7f2      	b.n	80002fa <__libc_init_array+0x1e>
 8000314:	0800033c 	.word	0x0800033c
 8000318:	0800033c 	.word	0x0800033c
 800031c:	08000340 	.word	0x08000340
 8000320:	0800033c 	.word	0x0800033c

08000324 <_init>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr

08000330 <_fini>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr
