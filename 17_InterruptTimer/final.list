
final.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <deregister_tm_clones>:
 80000c0:	4804      	ldr	r0, [pc, #16]	; (80000d4 <deregister_tm_clones+0x14>)
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <deregister_tm_clones+0x18>)
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4283      	cmp	r3, r0
 80000c8:	d003      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000ca:	4b04      	ldr	r3, [pc, #16]	; (80000dc <deregister_tm_clones+0x1c>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d000      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000d0:	4798      	blx	r3
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000000 	.word	0x20000000
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000

080000e0 <register_tm_clones>:
 80000e0:	4806      	ldr	r0, [pc, #24]	; (80000fc <register_tm_clones+0x1c>)
 80000e2:	4907      	ldr	r1, [pc, #28]	; (8000100 <register_tm_clones+0x20>)
 80000e4:	1a09      	subs	r1, r1, r0
 80000e6:	108b      	asrs	r3, r1, #2
 80000e8:	0fc9      	lsrs	r1, r1, #31
 80000ea:	18c9      	adds	r1, r1, r3
 80000ec:	b510      	push	{r4, lr}
 80000ee:	1049      	asrs	r1, r1, #1
 80000f0:	d003      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f2:	4b04      	ldr	r3, [pc, #16]	; (8000104 <register_tm_clones+0x24>)
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d000      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f8:	4798      	blx	r3
 80000fa:	bd10      	pop	{r4, pc}
 80000fc:	20000000 	.word	0x20000000
 8000100:	20000000 	.word	0x20000000
 8000104:	00000000 	.word	0x00000000

08000108 <__do_global_dtors_aux>:
 8000108:	b510      	push	{r4, lr}
 800010a:	4c07      	ldr	r4, [pc, #28]	; (8000128 <__do_global_dtors_aux+0x20>)
 800010c:	7823      	ldrb	r3, [r4, #0]
 800010e:	2b00      	cmp	r3, #0
 8000110:	d109      	bne.n	8000126 <__do_global_dtors_aux+0x1e>
 8000112:	f7ff ffd5 	bl	80000c0 <deregister_tm_clones>
 8000116:	4b05      	ldr	r3, [pc, #20]	; (800012c <__do_global_dtors_aux+0x24>)
 8000118:	2b00      	cmp	r3, #0
 800011a:	d002      	beq.n	8000122 <__do_global_dtors_aux+0x1a>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x28>)
 800011e:	e000      	b.n	8000122 <__do_global_dtors_aux+0x1a>
 8000120:	bf00      	nop
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	08000380 	.word	0x08000380

08000134 <frame_dummy>:
 8000134:	4b05      	ldr	r3, [pc, #20]	; (800014c <frame_dummy+0x18>)
 8000136:	b510      	push	{r4, lr}
 8000138:	2b00      	cmp	r3, #0
 800013a:	d003      	beq.n	8000144 <frame_dummy+0x10>
 800013c:	4904      	ldr	r1, [pc, #16]	; (8000150 <frame_dummy+0x1c>)
 800013e:	4805      	ldr	r0, [pc, #20]	; (8000154 <frame_dummy+0x20>)
 8000140:	e000      	b.n	8000144 <frame_dummy+0x10>
 8000142:	bf00      	nop
 8000144:	f7ff ffcc 	bl	80000e0 <register_tm_clones>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	46c0      	nop			; (mov r8, r8)
 800014c:	00000000 	.word	0x00000000
 8000150:	20000004 	.word	0x20000004
 8000154:	08000380 	.word	0x08000380

08000158 <main>:
#include "main.h"

int main( void )
{   
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
    /* initialize GPIOA5 (BOARD LED) as output */
    GPIOA_Init();
 800015c:	f000 f834 	bl	80001c8 <GPIOA_Init>

    /* enable:
       - TIM3 as general purpose timer
       - and TIM3 overflow interrupt */
    TIM3_Init();
 8000160:	f000 f854 	bl	800020c <TIM3_Init>

    while( 1 )
 8000164:	46c0      	nop			; (mov r8, r8)
 8000166:	e7fd      	b.n	8000164 <main+0xc>

08000168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800016c:	46c0      	nop			; (mov r8, r8)
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
	...

08000174 <Reset_Handler>:
 8000174:	480d      	ldr	r0, [pc, #52]	; (80001ac <LoopForever+0x2>)
 8000176:	4685      	mov	sp, r0
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x6>)
 800017a:	490e      	ldr	r1, [pc, #56]	; (80001b4 <LoopForever+0xa>)
 800017c:	4a0e      	ldr	r2, [pc, #56]	; (80001b8 <LoopForever+0xe>)
 800017e:	2300      	movs	r3, #0
 8000180:	e002      	b.n	8000188 <LoopCopyDataInit>

08000182 <CopyDataInit>:
 8000182:	58d4      	ldr	r4, [r2, r3]
 8000184:	50c4      	str	r4, [r0, r3]
 8000186:	3304      	adds	r3, #4

08000188 <LoopCopyDataInit>:
 8000188:	18c4      	adds	r4, r0, r3
 800018a:	428c      	cmp	r4, r1
 800018c:	d3f9      	bcc.n	8000182 <CopyDataInit>
 800018e:	4a0b      	ldr	r2, [pc, #44]	; (80001bc <LoopForever+0x12>)
 8000190:	4c0b      	ldr	r4, [pc, #44]	; (80001c0 <LoopForever+0x16>)
 8000192:	2300      	movs	r3, #0
 8000194:	e001      	b.n	800019a <LoopFillZerobss>

08000196 <FillZerobss>:
 8000196:	6013      	str	r3, [r2, #0]
 8000198:	3204      	adds	r2, #4

0800019a <LoopFillZerobss>:
 800019a:	42a2      	cmp	r2, r4
 800019c:	d3fb      	bcc.n	8000196 <FillZerobss>
 800019e:	f7ff ffe3 	bl	8000168 <SystemInit>
 80001a2:	f000 f8c9 	bl	8000338 <__libc_init_array>
 80001a6:	f7ff ffd7 	bl	8000158 <main>

080001aa <LoopForever>:
 80001aa:	e7fe      	b.n	80001aa <LoopForever>
 80001ac:	20004000 	.word	0x20004000
 80001b0:	20000000 	.word	0x20000000
 80001b4:	20000000 	.word	0x20000000
 80001b8:	080003a0 	.word	0x080003a0
 80001bc:	20000000 	.word	0x20000000
 80001c0:	2000001c 	.word	0x2000001c

080001c4 <ADC1_IRQHandler>:
 80001c4:	e7fe      	b.n	80001c4 <ADC1_IRQHandler>
	...

080001c8 <GPIOA_Init>:
#include "gpio.h"

void GPIOA_Init( void )
{   
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    /* enable GPIOA clock access */
    GPIOA_CLK_ENBL();
 80001cc:	4b0d      	ldr	r3, [pc, #52]	; (8000204 <GPIOA_Init+0x3c>)
 80001ce:	695a      	ldr	r2, [r3, #20]
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <GPIOA_Init+0x3c>)
 80001d2:	2180      	movs	r1, #128	; 0x80
 80001d4:	0289      	lsls	r1, r1, #10
 80001d6:	430a      	orrs	r2, r1
 80001d8:	615a      	str	r2, [r3, #20]

    /* GPIOA5 (BOARD LED) as output */
    GPIOA->MODER &= ~( 0x01U << 11 );
 80001da:	2390      	movs	r3, #144	; 0x90
 80001dc:	05db      	lsls	r3, r3, #23
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	2390      	movs	r3, #144	; 0x90
 80001e2:	05db      	lsls	r3, r3, #23
 80001e4:	4908      	ldr	r1, [pc, #32]	; (8000208 <GPIOA_Init+0x40>)
 80001e6:	400a      	ands	r2, r1
 80001e8:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ( 0x01U << 10 );
 80001ea:	2390      	movs	r3, #144	; 0x90
 80001ec:	05db      	lsls	r3, r3, #23
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	2390      	movs	r3, #144	; 0x90
 80001f2:	05db      	lsls	r3, r3, #23
 80001f4:	2180      	movs	r1, #128	; 0x80
 80001f6:	00c9      	lsls	r1, r1, #3
 80001f8:	430a      	orrs	r2, r1
 80001fa:	601a      	str	r2, [r3, #0]
}
 80001fc:	46c0      	nop			; (mov r8, r8)
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	46c0      	nop			; (mov r8, r8)
 8000204:	40021000 	.word	0x40021000
 8000208:	fffff7ff 	.word	0xfffff7ff

0800020c <TIM3_Init>:
#include "timer.h"

void TIM3_Init( void )
{   
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
    /* enable TIM3 clock */
    TIM3_CLK_ENBL();
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <TIM3_Init+0x5c>)
 8000212:	69da      	ldr	r2, [r3, #28]
 8000214:	4b14      	ldr	r3, [pc, #80]	; (8000268 <TIM3_Init+0x5c>)
 8000216:	2102      	movs	r1, #2
 8000218:	430a      	orrs	r2, r1
 800021a:	61da      	str	r2, [r3, #28]

    /* TIM3 as upcounter */
    TIM3->CR1 &= ~TIM_CR1_DIR;
 800021c:	4b13      	ldr	r3, [pc, #76]	; (800026c <TIM3_Init+0x60>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <TIM3_Init+0x60>)
 8000222:	2110      	movs	r1, #16
 8000224:	438a      	bics	r2, r1
 8000226:	601a      	str	r2, [r3, #0]

    /* TIM3 UEV (update event) generation enabled */
    TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <TIM3_Init+0x60>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <TIM3_Init+0x60>)
 800022e:	2102      	movs	r1, #2
 8000230:	438a      	bics	r2, r1
 8000232:	601a      	str	r2, [r3, #0]

    /* TIM3 auto-reload preload enabled */
    TIM3->CR1 |= TIM_CR1_ARPE;
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <TIM3_Init+0x60>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <TIM3_Init+0x60>)
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
    
    /* TIM3 prescaler.
       In order to generate a TIM3_period = 1ms:
       PSC = (1ms x fck_psc) - 1
       with fck_psc = 8MHz */
    TIM3->PSC = 0x1F3FU;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <TIM3_Init+0x60>)
 8000242:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <TIM3_Init+0x64>)
 8000244:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3 auto-reload register.
       In order to generate a timebase = 1 second:
       AUTORELOAD = (1s / TIM3_period) - 1
       with TIM3_period = 1ms */
    TIM3->ARR = 0x03E7U;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <TIM3_Init+0x60>)
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <TIM3_Init+0x68>)
 800024a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* enable TIM3 counter overflow interrupt */
    TIM3_Interrupt_Init();
 800024c:	f000 f814 	bl	8000278 <TIM3_Interrupt_Init>

    /* clear TIM3 counter */
    TIM3->CNT = 0x0U;
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <TIM3_Init+0x60>)
 8000252:	2200      	movs	r2, #0
 8000254:	625a      	str	r2, [r3, #36]	; 0x24

    /* enable TIM3 */
    TIM3->CR1 |= TIM_CR1_CEN;
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <TIM3_Init+0x60>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <TIM3_Init+0x60>)
 800025c:	2101      	movs	r1, #1
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40021000 	.word	0x40021000
 800026c:	40000400 	.word	0x40000400
 8000270:	00001f3f 	.word	0x00001f3f
 8000274:	000003e7 	.word	0x000003e7

08000278 <TIM3_Interrupt_Init>:
#include "exti.h"

void TIM3_Interrupt_Init( void )
{  
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800027c:	b672      	cpsid	i
}
 800027e:	46c0      	nop			; (mov r8, r8)
   /* disable global interrupts */
   __disable_irq();

   /* only TIM3 counter overflow/underflow generates interrupt */
   TIM3->CR1 |= TIM_CR1_URS;
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <TIM3_Interrupt_Init+0x64>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <TIM3_Interrupt_Init+0x64>)
 8000286:	2104      	movs	r1, #4
 8000288:	430a      	orrs	r2, r1
 800028a:	601a      	str	r2, [r3, #0]

   /* TIM3 update event interrupt enabled */
   TIM3->DIER |= TIM_DIER_UIE;
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <TIM3_Interrupt_Init+0x64>)
 800028e:	68da      	ldr	r2, [r3, #12]
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <TIM3_Interrupt_Init+0x64>)
 8000292:	2101      	movs	r1, #1
 8000294:	430a      	orrs	r2, r1
 8000296:	60da      	str	r2, [r3, #12]

   /* enable TIM3 global interrupt */
   NVIC->ISER[ 0 ] |= NVIC_ISER_SETENA_16;
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <TIM3_Interrupt_Init+0x68>)
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <TIM3_Interrupt_Init+0x68>)
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	0249      	lsls	r1, r1, #9
 80002a2:	430a      	orrs	r2, r1
 80002a4:	601a      	str	r2, [r3, #0]

   /* set TIM3 interrupt (N=16) priority to zero (highest priority).
      ISPRx. With x = N / 4 = 16 / 4, then x = 4. Therefore ISPRx = ISPR4.
      Byte offset = N MOD 4 = 16 MOD 4, therefore Byte offset = 0.
      NOTE: processor implements only bits 7 and 6 of each field. */
   NVIC->IP[ 4 ] &= ~NVIC_IPR_PRI16_7;
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <TIM3_Interrupt_Init+0x68>)
 80002a8:	23c4      	movs	r3, #196	; 0xc4
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	58d3      	ldr	r3, [r2, r3]
 80002ae:	490c      	ldr	r1, [pc, #48]	; (80002e0 <TIM3_Interrupt_Init+0x68>)
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	4393      	bics	r3, r2
 80002b4:	001a      	movs	r2, r3
 80002b6:	23c4      	movs	r3, #196	; 0xc4
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	50ca      	str	r2, [r1, r3]
   NVIC->IP[ 4 ] &= ~NVIC_IPR_PRI16_6;
 80002bc:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <TIM3_Interrupt_Init+0x68>)
 80002be:	23c4      	movs	r3, #196	; 0xc4
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	58d3      	ldr	r3, [r2, r3]
 80002c4:	4906      	ldr	r1, [pc, #24]	; (80002e0 <TIM3_Interrupt_Init+0x68>)
 80002c6:	2240      	movs	r2, #64	; 0x40
 80002c8:	4393      	bics	r3, r2
 80002ca:	001a      	movs	r2, r3
 80002cc:	23c4      	movs	r3, #196	; 0xc4
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	50ca      	str	r2, [r1, r3]
  __ASM volatile ("cpsie i" : : : "memory");
 80002d2:	b662      	cpsie	i
}
 80002d4:	46c0      	nop			; (mov r8, r8)

   /* enable global interrupts */
    __enable_irq();
}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40000400 	.word	0x40000400
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <TIM3_IRQHandler>:
#include "interrupts.h"

void TIM3_IRQHandler( void )
{   
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
    /* if TIM3 update event (overflow) has occurred */
    if ( ( TIM3->SR & TIM_SR_UIF ) == TIM_SR_UIF )
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <TIM3_IRQHandler+0x28>)
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	2201      	movs	r2, #1
 80002ee:	4013      	ands	r3, r2
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d107      	bne.n	8000304 <TIM3_IRQHandler+0x20>
    {   
        /* clear TIM3 update event flag */
        TIM3->SR &= ~TIM_SR_UIF;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <TIM3_IRQHandler+0x28>)
 80002f6:	691a      	ldr	r2, [r3, #16]
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <TIM3_IRQHandler+0x28>)
 80002fa:	2101      	movs	r1, #1
 80002fc:	438a      	bics	r2, r1
 80002fe:	611a      	str	r2, [r3, #16]

        /* execute TIM3 callback */
        TIM3_Callback();
 8000300:	f000 f806 	bl	8000310 <TIM3_Callback>

        /* clear TIM3 counter */
        //TIM3->CNT = 0x0U;
    }
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	40000400 	.word	0x40000400

08000310 <TIM3_Callback>:

void TIM3_Callback( void )
{   
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
    /* toggle GPIOA5 (BOARD LED) */
    toggle_led();
 8000314:	f000 f803 	bl	800031e <toggle_led>
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <toggle_led>:

void toggle_led( void )
{
 800031e:	b580      	push	{r7, lr}
 8000320:	af00      	add	r7, sp, #0
    GPIOA->ODR ^= LED_PIN;
 8000322:	2390      	movs	r3, #144	; 0x90
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	695a      	ldr	r2, [r3, #20]
 8000328:	2390      	movs	r3, #144	; 0x90
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	2120      	movs	r1, #32
 800032e:	404a      	eors	r2, r1
 8000330:	615a      	str	r2, [r3, #20]
}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	2600      	movs	r6, #0
 800033c:	4c0c      	ldr	r4, [pc, #48]	; (8000370 <__libc_init_array+0x38>)
 800033e:	4d0d      	ldr	r5, [pc, #52]	; (8000374 <__libc_init_array+0x3c>)
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	2600      	movs	r6, #0
 800034a:	f000 f819 	bl	8000380 <_init>
 800034e:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <__libc_init_array+0x40>)
 8000350:	4d0a      	ldr	r5, [pc, #40]	; (800037c <__libc_init_array+0x44>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	00b3      	lsls	r3, r6, #2
 800035e:	58eb      	ldr	r3, [r5, r3]
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	00b3      	lsls	r3, r6, #2
 8000368:	58eb      	ldr	r3, [r5, r3]
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	0800039c 	.word	0x0800039c
 800037c:	08000398 	.word	0x08000398

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
