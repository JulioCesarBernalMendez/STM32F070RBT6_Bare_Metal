
final.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <deregister_tm_clones>:
 80000c0:	4804      	ldr	r0, [pc, #16]	; (80000d4 <deregister_tm_clones+0x14>)
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <deregister_tm_clones+0x18>)
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4283      	cmp	r3, r0
 80000c8:	d003      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000ca:	4b04      	ldr	r3, [pc, #16]	; (80000dc <deregister_tm_clones+0x1c>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d000      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000d0:	4798      	blx	r3
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000000 	.word	0x20000000
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000

080000e0 <register_tm_clones>:
 80000e0:	4806      	ldr	r0, [pc, #24]	; (80000fc <register_tm_clones+0x1c>)
 80000e2:	4907      	ldr	r1, [pc, #28]	; (8000100 <register_tm_clones+0x20>)
 80000e4:	1a09      	subs	r1, r1, r0
 80000e6:	108b      	asrs	r3, r1, #2
 80000e8:	0fc9      	lsrs	r1, r1, #31
 80000ea:	18c9      	adds	r1, r1, r3
 80000ec:	b510      	push	{r4, lr}
 80000ee:	1049      	asrs	r1, r1, #1
 80000f0:	d003      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f2:	4b04      	ldr	r3, [pc, #16]	; (8000104 <register_tm_clones+0x24>)
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d000      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f8:	4798      	blx	r3
 80000fa:	bd10      	pop	{r4, pc}
 80000fc:	20000000 	.word	0x20000000
 8000100:	20000000 	.word	0x20000000
 8000104:	00000000 	.word	0x00000000

08000108 <__do_global_dtors_aux>:
 8000108:	b510      	push	{r4, lr}
 800010a:	4c07      	ldr	r4, [pc, #28]	; (8000128 <__do_global_dtors_aux+0x20>)
 800010c:	7823      	ldrb	r3, [r4, #0]
 800010e:	2b00      	cmp	r3, #0
 8000110:	d109      	bne.n	8000126 <__do_global_dtors_aux+0x1e>
 8000112:	f7ff ffd5 	bl	80000c0 <deregister_tm_clones>
 8000116:	4b05      	ldr	r3, [pc, #20]	; (800012c <__do_global_dtors_aux+0x24>)
 8000118:	2b00      	cmp	r3, #0
 800011a:	d002      	beq.n	8000122 <__do_global_dtors_aux+0x1a>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x28>)
 800011e:	e000      	b.n	8000122 <__do_global_dtors_aux+0x1a>
 8000120:	bf00      	nop
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	08000c1c 	.word	0x08000c1c

08000134 <frame_dummy>:
 8000134:	4b05      	ldr	r3, [pc, #20]	; (800014c <frame_dummy+0x18>)
 8000136:	b510      	push	{r4, lr}
 8000138:	2b00      	cmp	r3, #0
 800013a:	d003      	beq.n	8000144 <frame_dummy+0x10>
 800013c:	4904      	ldr	r1, [pc, #16]	; (8000150 <frame_dummy+0x1c>)
 800013e:	4805      	ldr	r0, [pc, #20]	; (8000154 <frame_dummy+0x20>)
 8000140:	e000      	b.n	8000144 <frame_dummy+0x10>
 8000142:	bf00      	nop
 8000144:	f7ff ffcc 	bl	80000e0 <register_tm_clones>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	46c0      	nop			; (mov r8, r8)
 800014c:	00000000 	.word	0x00000000
 8000150:	20000004 	.word	0x20000004
 8000154:	08000c1c 	.word	0x08000c1c

08000158 <main>:
#include "main.h"

int main( void )
{
 8000158:	b580      	push	{r7, lr}
 800015a:	b084      	sub	sp, #16
 800015c:	af00      	add	r7, sp, #0
   LCD_HandleTypeDef LCD_Handler;

   /* initialize LCD module */
   LCD_Handler.lcdaddress     = LCD_ADDRESS;
 800015e:	1d3b      	adds	r3, r7, #4
 8000160:	2227      	movs	r2, #39	; 0x27
 8000162:	701a      	strb	r2, [r3, #0]
   LCD_Handler.backlight      = BACKLIGHT_ENABLED;
 8000164:	1d3b      	adds	r3, r7, #4
 8000166:	2208      	movs	r2, #8
 8000168:	705a      	strb	r2, [r3, #1]
   LCD_Handler.datalenght     = INTERFACE_DATA_4_BIT;
 800016a:	1d3b      	adds	r3, r7, #4
 800016c:	2200      	movs	r2, #0
 800016e:	729a      	strb	r2, [r3, #10]
   LCD_Handler.displayline    = DISPLAY_2_LINES;
 8000170:	1d3b      	adds	r3, r7, #4
 8000172:	2208      	movs	r2, #8
 8000174:	725a      	strb	r2, [r3, #9]
   LCD_Handler.font           = DISPLAY_FONT_TYPE_5x8;
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	2200      	movs	r2, #0
 800017a:	721a      	strb	r2, [r3, #8]
   LCD_Handler.display        = DISPLAY_ON;
 800017c:	1d3b      	adds	r3, r7, #4
 800017e:	2204      	movs	r2, #4
 8000180:	719a      	strb	r2, [r3, #6]
   LCD_Handler.cursor         = CURSOR_ON;
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2202      	movs	r2, #2
 8000186:	715a      	strb	r2, [r3, #5]
   LCD_Handler.blink          = CURSOR_BLINK_ON;
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2201      	movs	r2, #1
 800018c:	711a      	strb	r2, [r3, #4]
   LCD_Handler.incrementddram = ID_DDRAM_ADDRESS_RIGHT;
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2202      	movs	r2, #2
 8000192:	70da      	strb	r2, [r3, #3]
   LCD_Handler.shiftdisplay   = SHIFT_DISPLAY_OFF;
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	2200      	movs	r2, #0
 8000198:	709a      	strb	r2, [r3, #2]
   LCD_Init( &LCD_Handler );
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	0018      	movs	r0, r3
 800019e:	f000 facf 	bl	8000740 <LCD_Init>
   
   /* move cursor to first row, third column */
   LCD_API_Move_Cursor( &LCD_Handler, 0U, 2U );
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	2202      	movs	r2, #2
 80001a6:	2100      	movs	r1, #0
 80001a8:	0018      	movs	r0, r3
 80001aa:	f000 fc49 	bl	8000a40 <LCD_API_Move_Cursor>
   LCD_API_Print_String( &LCD_Handler, ( uint8_t* ) "LCD DRIVER", 10U );
 80001ae:	4914      	ldr	r1, [pc, #80]	; (8000200 <main+0xa8>)
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	220a      	movs	r2, #10
 80001b4:	0018      	movs	r0, r3
 80001b6:	f000 fc8b 	bl	8000ad0 <LCD_API_Print_String>

   /* move cursor to second row, sixth column */
   LCD_API_Move_Cursor( &LCD_Handler, 1U, 5U );
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	2205      	movs	r2, #5
 80001be:	2101      	movs	r1, #1
 80001c0:	0018      	movs	r0, r3
 80001c2:	f000 fc3d 	bl	8000a40 <LCD_API_Move_Cursor>
   LCD_API_Print_String( &LCD_Handler, ( uint8_t* ) "TEST", 4U );
 80001c6:	490f      	ldr	r1, [pc, #60]	; (8000204 <main+0xac>)
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2204      	movs	r2, #4
 80001cc:	0018      	movs	r0, r3
 80001ce:	f000 fc7f 	bl	8000ad0 <LCD_API_Print_String>

   while( 1 )
   {  
      /* shift text on the LCD left and right every 800 ms */
      LCD_API_Shift_Screen_Left( &LCD_Handler, 2U, 800U );
 80001d2:	23c8      	movs	r3, #200	; 0xc8
 80001d4:	009a      	lsls	r2, r3, #2
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	2102      	movs	r1, #2
 80001da:	0018      	movs	r0, r3
 80001dc:	f000 fca0 	bl	8000b20 <LCD_API_Shift_Screen_Left>
      LCD_API_Shift_Screen_Right( &LCD_Handler, 6U, 800U );
 80001e0:	23c8      	movs	r3, #200	; 0xc8
 80001e2:	009a      	lsls	r2, r3, #2
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2106      	movs	r1, #6
 80001e8:	0018      	movs	r0, r3
 80001ea:	f000 fcc6 	bl	8000b7a <LCD_API_Shift_Screen_Right>
      LCD_API_Shift_Screen_Left( &LCD_Handler, 4U, 800U );
 80001ee:	23c8      	movs	r3, #200	; 0xc8
 80001f0:	009a      	lsls	r2, r3, #2
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2104      	movs	r1, #4
 80001f6:	0018      	movs	r0, r3
 80001f8:	f000 fc92 	bl	8000b20 <LCD_API_Shift_Screen_Left>
      LCD_API_Shift_Screen_Left( &LCD_Handler, 2U, 800U );
 80001fc:	46c0      	nop			; (mov r8, r8)
 80001fe:	e7e8      	b.n	80001d2 <main+0x7a>
 8000200:	08000c34 	.word	0x08000c34
 8000204:	08000c40 	.word	0x08000c40

08000208 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
   */

  /* The following code sets the system clock frequency to 48 MHz */

  /* turn on HSI (8MHz) */
  RCC->CR |= RCC_CR_HSION;
 800020c:	4b48      	ldr	r3, [pc, #288]	; (8000330 <SystemInit+0x128>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b47      	ldr	r3, [pc, #284]	; (8000330 <SystemInit+0x128>)
 8000212:	2101      	movs	r1, #1
 8000214:	430a      	orrs	r2, r1
 8000216:	601a      	str	r2, [r3, #0]

  /* wait for HSI to be ready */
  while ( ( RCC->CR & RCC_CR_HSIRDY ) == 0U )
 8000218:	46c0      	nop			; (mov r8, r8)
 800021a:	4b45      	ldr	r3, [pc, #276]	; (8000330 <SystemInit+0x128>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2202      	movs	r2, #2
 8000220:	4013      	ands	r3, r2
 8000222:	d0fa      	beq.n	800021a <SystemInit+0x12>
  {
    /* do nothing */
  }

  /* select HSI/2 (= 4MHz) as source for PLL */
  RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 8000224:	4b42      	ldr	r3, [pc, #264]	; (8000330 <SystemInit+0x128>)
 8000226:	685a      	ldr	r2, [r3, #4]
 8000228:	4b41      	ldr	r3, [pc, #260]	; (8000330 <SystemInit+0x128>)
 800022a:	4942      	ldr	r1, [pc, #264]	; (8000334 <SystemInit+0x12c>)
 800022c:	400a      	ands	r2, r1
 800022e:	605a      	str	r2, [r3, #4]

  /* PLL PREDIV, clock not divided (= 4MHz) */
  RCC->CFGR2 &= ~RCC_CFGR2_PREDIV_3;
 8000230:	4b3f      	ldr	r3, [pc, #252]	; (8000330 <SystemInit+0x128>)
 8000232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000234:	4b3e      	ldr	r3, [pc, #248]	; (8000330 <SystemInit+0x128>)
 8000236:	2108      	movs	r1, #8
 8000238:	438a      	bics	r2, r1
 800023a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR2 &= ~RCC_CFGR2_PREDIV_2;
 800023c:	4b3c      	ldr	r3, [pc, #240]	; (8000330 <SystemInit+0x128>)
 800023e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000240:	4b3b      	ldr	r3, [pc, #236]	; (8000330 <SystemInit+0x128>)
 8000242:	2104      	movs	r1, #4
 8000244:	438a      	bics	r2, r1
 8000246:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR2 &= ~RCC_CFGR2_PREDIV_1;
 8000248:	4b39      	ldr	r3, [pc, #228]	; (8000330 <SystemInit+0x128>)
 800024a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800024c:	4b38      	ldr	r3, [pc, #224]	; (8000330 <SystemInit+0x128>)
 800024e:	2102      	movs	r1, #2
 8000250:	438a      	bics	r2, r1
 8000252:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR2 &= ~RCC_CFGR2_PREDIV_0;
 8000254:	4b36      	ldr	r3, [pc, #216]	; (8000330 <SystemInit+0x128>)
 8000256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000258:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemInit+0x128>)
 800025a:	2101      	movs	r1, #1
 800025c:	438a      	bics	r2, r1
 800025e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* PLLMUL set to x12 (4x12 = 48MHz) */
  RCC->CFGR |=  RCC_CFGR_PLLMUL_3;
 8000260:	4b33      	ldr	r3, [pc, #204]	; (8000330 <SystemInit+0x128>)
 8000262:	685a      	ldr	r2, [r3, #4]
 8000264:	4b32      	ldr	r3, [pc, #200]	; (8000330 <SystemInit+0x128>)
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	0389      	lsls	r1, r1, #14
 800026a:	430a      	orrs	r2, r1
 800026c:	605a      	str	r2, [r3, #4]
  RCC->CFGR &= ~RCC_CFGR_PLLMUL_2;
 800026e:	4b30      	ldr	r3, [pc, #192]	; (8000330 <SystemInit+0x128>)
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	4b2f      	ldr	r3, [pc, #188]	; (8000330 <SystemInit+0x128>)
 8000274:	4930      	ldr	r1, [pc, #192]	; (8000338 <SystemInit+0x130>)
 8000276:	400a      	ands	r2, r1
 8000278:	605a      	str	r2, [r3, #4]
  RCC->CFGR |=  RCC_CFGR_PLLMUL_1;
 800027a:	4b2d      	ldr	r3, [pc, #180]	; (8000330 <SystemInit+0x128>)
 800027c:	685a      	ldr	r2, [r3, #4]
 800027e:	4b2c      	ldr	r3, [pc, #176]	; (8000330 <SystemInit+0x128>)
 8000280:	2180      	movs	r1, #128	; 0x80
 8000282:	0309      	lsls	r1, r1, #12
 8000284:	430a      	orrs	r2, r1
 8000286:	605a      	str	r2, [r3, #4]
  RCC->CFGR &= ~RCC_CFGR_PLLMUL_0;
 8000288:	4b29      	ldr	r3, [pc, #164]	; (8000330 <SystemInit+0x128>)
 800028a:	685a      	ldr	r2, [r3, #4]
 800028c:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemInit+0x128>)
 800028e:	492b      	ldr	r1, [pc, #172]	; (800033c <SystemInit+0x134>)
 8000290:	400a      	ands	r2, r1
 8000292:	605a      	str	r2, [r3, #4]

  /* turn on PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000294:	4b26      	ldr	r3, [pc, #152]	; (8000330 <SystemInit+0x128>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemInit+0x128>)
 800029a:	2180      	movs	r1, #128	; 0x80
 800029c:	0449      	lsls	r1, r1, #17
 800029e:	430a      	orrs	r2, r1
 80002a0:	601a      	str	r2, [r3, #0]

  /* wait for PLL to be ready */
  while ( ( RCC->CR & RCC_CR_PLLRDY ) == 0 )
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	4b22      	ldr	r3, [pc, #136]	; (8000330 <SystemInit+0x128>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	049b      	lsls	r3, r3, #18
 80002ac:	4013      	ands	r3, r2
 80002ae:	d0f9      	beq.n	80002a4 <SystemInit+0x9c>
  {
    /* do nothing */
  }

  /* select PLL as system clock */
  RCC->CFGR |=  RCC_CFGR_SW_1;
 80002b0:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <SystemInit+0x128>)
 80002b2:	685a      	ldr	r2, [r3, #4]
 80002b4:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <SystemInit+0x128>)
 80002b6:	2102      	movs	r1, #2
 80002b8:	430a      	orrs	r2, r1
 80002ba:	605a      	str	r2, [r3, #4]
  RCC->CFGR &= ~RCC_CFGR_SW_0;
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <SystemInit+0x128>)
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <SystemInit+0x128>)
 80002c2:	2101      	movs	r1, #1
 80002c4:	438a      	bics	r2, r1
 80002c6:	605a      	str	r2, [r3, #4]

  /* wait for PLL to be selected as system clock */
  while ( ( RCC->CFGR & RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL )
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	4b19      	ldr	r3, [pc, #100]	; (8000330 <SystemInit+0x128>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	220c      	movs	r2, #12
 80002d0:	4013      	ands	r3, r2
 80002d2:	2b08      	cmp	r3, #8
 80002d4:	d1f9      	bne.n	80002ca <SystemInit+0xc2>
  {
    /* do nothing */
  }

  /* HCLK prescaler, system clock not divided (48MHz) */
  RCC->CFGR &= ~RCC_CFGR_HPRE_3;
 80002d6:	4b16      	ldr	r3, [pc, #88]	; (8000330 <SystemInit+0x128>)
 80002d8:	685a      	ldr	r2, [r3, #4]
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <SystemInit+0x128>)
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	438a      	bics	r2, r1
 80002e0:	605a      	str	r2, [r3, #4]
  RCC->CFGR &= ~RCC_CFGR_HPRE_2;
 80002e2:	4b13      	ldr	r3, [pc, #76]	; (8000330 <SystemInit+0x128>)
 80002e4:	685a      	ldr	r2, [r3, #4]
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <SystemInit+0x128>)
 80002e8:	2140      	movs	r1, #64	; 0x40
 80002ea:	438a      	bics	r2, r1
 80002ec:	605a      	str	r2, [r3, #4]
  RCC->CFGR &= ~RCC_CFGR_HPRE_1;
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <SystemInit+0x128>)
 80002f0:	685a      	ldr	r2, [r3, #4]
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <SystemInit+0x128>)
 80002f4:	2120      	movs	r1, #32
 80002f6:	438a      	bics	r2, r1
 80002f8:	605a      	str	r2, [r3, #4]
  RCC->CFGR &= ~RCC_CFGR_HPRE_0;
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <SystemInit+0x128>)
 80002fc:	685a      	ldr	r2, [r3, #4]
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <SystemInit+0x128>)
 8000300:	2110      	movs	r1, #16
 8000302:	438a      	bics	r2, r1
 8000304:	605a      	str	r2, [r3, #4]

  /* PCLK prescaler, HCLK not divided (48MHz)
     NOTE: this will be the frequency used to feed the different TIMx */
  RCC->CFGR &= ~RCC_CFGR_PPRE_2;
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <SystemInit+0x128>)
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <SystemInit+0x128>)
 800030c:	490c      	ldr	r1, [pc, #48]	; (8000340 <SystemInit+0x138>)
 800030e:	400a      	ands	r2, r1
 8000310:	605a      	str	r2, [r3, #4]
  RCC->CFGR &= ~RCC_CFGR_PPRE_1;
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <SystemInit+0x128>)
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <SystemInit+0x128>)
 8000318:	490a      	ldr	r1, [pc, #40]	; (8000344 <SystemInit+0x13c>)
 800031a:	400a      	ands	r2, r1
 800031c:	605a      	str	r2, [r3, #4]
  RCC->CFGR &= ~RCC_CFGR_PPRE_0;
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <SystemInit+0x128>)
 8000320:	685a      	ldr	r2, [r3, #4]
 8000322:	4b03      	ldr	r3, [pc, #12]	; (8000330 <SystemInit+0x128>)
 8000324:	4908      	ldr	r1, [pc, #32]	; (8000348 <SystemInit+0x140>)
 8000326:	400a      	ands	r2, r1
 8000328:	605a      	str	r2, [r3, #4]

  /* NOTE: after this point the value of the variable SystemCoreClock
           will be read as 96000000 instead of 48000000. This is due to ST
           did not take into account that HSI/2 can be the source of PLL
           (they use HSI for the computation of SystemCoreClock) */
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	fffe7fff 	.word	0xfffe7fff
 8000338:	ffefffff 	.word	0xffefffff
 800033c:	fffbffff 	.word	0xfffbffff
 8000340:	fffffbff 	.word	0xfffffbff
 8000344:	fffffdff 	.word	0xfffffdff
 8000348:	fffffeff 	.word	0xfffffeff

0800034c <Reset_Handler>:
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopForever+0x2>)
 800034e:	4685      	mov	sp, r0
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x6>)
 8000352:	490e      	ldr	r1, [pc, #56]	; (800038c <LoopForever+0xa>)
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <LoopForever+0xe>)
 8000356:	2300      	movs	r3, #0
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:
 800035a:	58d4      	ldr	r4, [r2, r3]
 800035c:	50c4      	str	r4, [r0, r3]
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:
 8000360:	18c4      	adds	r4, r0, r3
 8000362:	428c      	cmp	r4, r1
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <LoopForever+0x12>)
 8000368:	4c0b      	ldr	r4, [pc, #44]	; (8000398 <LoopForever+0x16>)
 800036a:	2300      	movs	r3, #0
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:
 800036e:	6013      	str	r3, [r2, #0]
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:
 8000372:	42a2      	cmp	r2, r4
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>
 8000376:	f7ff ff47 	bl	8000208 <SystemInit>
 800037a:	f000 fc2b 	bl	8000bd4 <__libc_init_array>
 800037e:	f7ff feeb 	bl	8000158 <main>

08000382 <LoopForever>:
 8000382:	e7fe      	b.n	8000382 <LoopForever>
 8000384:	20004000 	.word	0x20004000
 8000388:	20000000 	.word	0x20000000
 800038c:	20000000 	.word	0x20000000
 8000390:	08000c50 	.word	0x08000c50
 8000394:	20000000 	.word	0x20000000
 8000398:	20000020 	.word	0x20000020

0800039c <ADC1_IRQHandler>:
 800039c:	e7fe      	b.n	800039c <ADC1_IRQHandler>
	...

080003a0 <TIM3_Init>:
#include "timer.h"

void TIM3_Init( void )
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    /* enable TIM3 clock */
    TIM3_CLK_ENBL();
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <TIM3_Init+0x40>)
 80003a6:	69da      	ldr	r2, [r3, #28]
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <TIM3_Init+0x40>)
 80003aa:	2102      	movs	r1, #2
 80003ac:	430a      	orrs	r2, r1
 80003ae:	61da      	str	r2, [r3, #28]

    /* TIM3 as upcounter */
    TIM3->CR1 &= ~TIM_CR1_DIR;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <TIM3_Init+0x44>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <TIM3_Init+0x44>)
 80003b6:	2110      	movs	r1, #16
 80003b8:	438a      	bics	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]

    /* TIM3 UEV (update event) generation enabled */
    TIM3->CR1 &= ~TIM_CR1_UDIS;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <TIM3_Init+0x44>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <TIM3_Init+0x44>)
 80003c2:	2102      	movs	r1, #2
 80003c4:	438a      	bics	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]

    /* TIM3 auto-reload preload enabled */
    TIM3->CR1 |= TIM_CR1_ARPE;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <TIM3_Init+0x44>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <TIM3_Init+0x44>)
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	430a      	orrs	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
        
    /* TIM3 prescaler.
       CK_CNT = ( PSC + 1 ) / fck_psc
       = ( 0 + 1 ) / 48MHz
       = 20.834ns */
    TIM3->PSC = 0x0000U;
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <TIM3_Init+0x44>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40000400 	.word	0x40000400

080003e8 <TIM3_Delay_us>:

void TIM3_Delay_us( uint32_t useconds )
{   
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

    /* TIM3 auto-reload register.
       In order to generate a timebase = 1us:
       AUTORELOAD = (1us / TIM3_period) - 1
       with TIM3_period = 20.834ns */
    TIM3->ARR = 0x002FU;
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <TIM3_Delay_us+0x60>)
 80003f2:	222f      	movs	r2, #47	; 0x2f
 80003f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* clear TIM3 counter */
    TIM3->CNT = 0x0000U;
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <TIM3_Delay_us+0x60>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* enable TIM3 */
    TIM3->CR1 |= TIM_CR1_CEN;
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <TIM3_Delay_us+0x60>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <TIM3_Delay_us+0x60>)
 8000402:	2101      	movs	r1, #1
 8000404:	430a      	orrs	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
        
    /* wait entered microseconds */
    for ( i = 0; i < useconds; i++ )
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	e00e      	b.n	800042c <TIM3_Delay_us+0x44>
    {
        /* wait for update flag (1us) */
        while ( ( TIM3->SR & TIM_SR_UIF ) == 0U )
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <TIM3_Delay_us+0x60>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	2201      	movs	r2, #1
 8000416:	4013      	ands	r3, r2
 8000418:	d0fa      	beq.n	8000410 <TIM3_Delay_us+0x28>
        {
            /* do nothing */
        }

        /* clear update flag */
        TIM3->SR &= ~TIM_SR_UIF;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <TIM3_Delay_us+0x60>)
 800041c:	691a      	ldr	r2, [r3, #16]
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <TIM3_Delay_us+0x60>)
 8000420:	2101      	movs	r1, #1
 8000422:	438a      	bics	r2, r1
 8000424:	611a      	str	r2, [r3, #16]
    for ( i = 0; i < useconds; i++ )
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	3301      	adds	r3, #1
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fa      	ldr	r2, [r7, #12]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	d3ec      	bcc.n	800040e <TIM3_Delay_us+0x26>
    }

    /* disable TIM3 */
    TIM3->CR1 &= ~TIM_CR1_CEN;
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <TIM3_Delay_us+0x60>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <TIM3_Delay_us+0x60>)
 800043a:	2101      	movs	r1, #1
 800043c:	438a      	bics	r2, r1
 800043e:	601a      	str	r2, [r3, #0]
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b004      	add	sp, #16
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40000400 	.word	0x40000400

0800044c <TIM3_Delay_ms>:

void TIM3_Delay_ms( uint32_t mseconds )
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]

    /* TIM3 auto-reload register.
       In order to generate a timebase = 1ms:
       AUTORELOAD = (1ms / TIM3_period) - 1
       with TIM3_period = 20.834ns */
    TIM3->ARR = 0x0BB7FU;
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <TIM3_Delay_ms+0x60>)
 8000456:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <TIM3_Delay_ms+0x64>)
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* clear TIM3 counter */
    TIM3->CNT = 0x0000U;
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <TIM3_Delay_ms+0x60>)
 800045c:	2200      	movs	r2, #0
 800045e:	625a      	str	r2, [r3, #36]	; 0x24

    /* enable TIM3 */
    TIM3->CR1 |= TIM_CR1_CEN;
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <TIM3_Delay_ms+0x60>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <TIM3_Delay_ms+0x60>)
 8000466:	2101      	movs	r1, #1
 8000468:	430a      	orrs	r2, r1
 800046a:	601a      	str	r2, [r3, #0]
        
    /* wait entered miliseconds */
    for ( i = 0; i < mseconds; i++ )
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	e00e      	b.n	8000490 <TIM3_Delay_ms+0x44>
    {
        /* wait for update flag (1ms) */
        while ( ( TIM3->SR & TIM_SR_UIF ) == 0U )
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <TIM3_Delay_ms+0x60>)
 8000476:	691b      	ldr	r3, [r3, #16]
 8000478:	2201      	movs	r2, #1
 800047a:	4013      	ands	r3, r2
 800047c:	d0fa      	beq.n	8000474 <TIM3_Delay_ms+0x28>
        {
            /* do nothing */
        }

        /* clear update flag */
        TIM3->SR &= ~TIM_SR_UIF;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <TIM3_Delay_ms+0x60>)
 8000480:	691a      	ldr	r2, [r3, #16]
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <TIM3_Delay_ms+0x60>)
 8000484:	2101      	movs	r1, #1
 8000486:	438a      	bics	r2, r1
 8000488:	611a      	str	r2, [r3, #16]
    for ( i = 0; i < mseconds; i++ )
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	3301      	adds	r3, #1
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	d3ec      	bcc.n	8000472 <TIM3_Delay_ms+0x26>
    }

    /* disable TIM3 */
    TIM3->CR1 &= ~TIM_CR1_CEN;
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <TIM3_Delay_ms+0x60>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <TIM3_Delay_ms+0x60>)
 800049e:	2101      	movs	r1, #1
 80004a0:	438a      	bics	r2, r1
 80004a2:	601a      	str	r2, [r3, #0]
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b004      	add	sp, #16
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40000400 	.word	0x40000400
 80004b0:	0000bb7f 	.word	0x0000bb7f

080004b4 <I2C1_Init>:
#include "i2c.h"

void I2C1_Init( void )
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
    /* enable GPIOB clock access */
    GPIOB_CLK_ENBL();
 80004b8:	4b61      	ldr	r3, [pc, #388]	; (8000640 <I2C1_Init+0x18c>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	4b60      	ldr	r3, [pc, #384]	; (8000640 <I2C1_Init+0x18c>)
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	02c9      	lsls	r1, r1, #11
 80004c2:	430a      	orrs	r2, r1
 80004c4:	615a      	str	r2, [r3, #20]

    /* GPIOB8 (I2C1_SCL) in alternate function mode */
    GPIOB->MODER |=  GPIO_MODER_MODER8_1;
 80004c6:	4b5f      	ldr	r3, [pc, #380]	; (8000644 <I2C1_Init+0x190>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b5e      	ldr	r3, [pc, #376]	; (8000644 <I2C1_Init+0x190>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0289      	lsls	r1, r1, #10
 80004d0:	430a      	orrs	r2, r1
 80004d2:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODER8_0;
 80004d4:	4b5b      	ldr	r3, [pc, #364]	; (8000644 <I2C1_Init+0x190>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b5a      	ldr	r3, [pc, #360]	; (8000644 <I2C1_Init+0x190>)
 80004da:	495b      	ldr	r1, [pc, #364]	; (8000648 <I2C1_Init+0x194>)
 80004dc:	400a      	ands	r2, r1
 80004de:	601a      	str	r2, [r3, #0]

    /* GPIOB8 (I2C1_SCL) as open-drain output */
    GPIOB->OTYPER |= GPIO_OTYPER_OT_8;
 80004e0:	4b58      	ldr	r3, [pc, #352]	; (8000644 <I2C1_Init+0x190>)
 80004e2:	685a      	ldr	r2, [r3, #4]
 80004e4:	4b57      	ldr	r3, [pc, #348]	; (8000644 <I2C1_Init+0x190>)
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	0049      	lsls	r1, r1, #1
 80004ea:	430a      	orrs	r2, r1
 80004ec:	605a      	str	r2, [r3, #4]

    /* GPIOB8 (I2C1_SCL) with pull-up resistor */
    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR8_1;
 80004ee:	4b55      	ldr	r3, [pc, #340]	; (8000644 <I2C1_Init+0x190>)
 80004f0:	68da      	ldr	r2, [r3, #12]
 80004f2:	4b54      	ldr	r3, [pc, #336]	; (8000644 <I2C1_Init+0x190>)
 80004f4:	4955      	ldr	r1, [pc, #340]	; (800064c <I2C1_Init+0x198>)
 80004f6:	400a      	ands	r2, r1
 80004f8:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  GPIO_PUPDR_PUPDR8_0;
 80004fa:	4b52      	ldr	r3, [pc, #328]	; (8000644 <I2C1_Init+0x190>)
 80004fc:	68da      	ldr	r2, [r3, #12]
 80004fe:	4b51      	ldr	r3, [pc, #324]	; (8000644 <I2C1_Init+0x190>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0249      	lsls	r1, r1, #9
 8000504:	430a      	orrs	r2, r1
 8000506:	60da      	str	r2, [r3, #12]

    /* GPIOB8 in AF1 (I2C1_SCL) */
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL8_3;
 8000508:	4b4e      	ldr	r3, [pc, #312]	; (8000644 <I2C1_Init+0x190>)
 800050a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800050c:	4b4d      	ldr	r3, [pc, #308]	; (8000644 <I2C1_Init+0x190>)
 800050e:	2108      	movs	r1, #8
 8000510:	438a      	bics	r2, r1
 8000512:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL8_2;
 8000514:	4b4b      	ldr	r3, [pc, #300]	; (8000644 <I2C1_Init+0x190>)
 8000516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000518:	4b4a      	ldr	r3, [pc, #296]	; (8000644 <I2C1_Init+0x190>)
 800051a:	2104      	movs	r1, #4
 800051c:	438a      	bics	r2, r1
 800051e:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL8_1;
 8000520:	4b48      	ldr	r3, [pc, #288]	; (8000644 <I2C1_Init+0x190>)
 8000522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000524:	4b47      	ldr	r3, [pc, #284]	; (8000644 <I2C1_Init+0x190>)
 8000526:	2102      	movs	r1, #2
 8000528:	438a      	bics	r2, r1
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] |=  GPIO_AFRL_AFSEL8_0;
 800052c:	4b45      	ldr	r3, [pc, #276]	; (8000644 <I2C1_Init+0x190>)
 800052e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000530:	4b44      	ldr	r3, [pc, #272]	; (8000644 <I2C1_Init+0x190>)
 8000532:	2101      	movs	r1, #1
 8000534:	430a      	orrs	r2, r1
 8000536:	625a      	str	r2, [r3, #36]	; 0x24

    /* GPIOB9 (I2C1_SDA) in alternate function mode */
    GPIOB->MODER |=  GPIO_MODER_MODER9_1;
 8000538:	4b42      	ldr	r3, [pc, #264]	; (8000644 <I2C1_Init+0x190>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b41      	ldr	r3, [pc, #260]	; (8000644 <I2C1_Init+0x190>)
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0309      	lsls	r1, r1, #12
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODER9_0;
 8000546:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <I2C1_Init+0x190>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b3e      	ldr	r3, [pc, #248]	; (8000644 <I2C1_Init+0x190>)
 800054c:	4940      	ldr	r1, [pc, #256]	; (8000650 <I2C1_Init+0x19c>)
 800054e:	400a      	ands	r2, r1
 8000550:	601a      	str	r2, [r3, #0]

    /* GPIOB9 (I2C1_SDA) as open-drain output */
    GPIOB->OTYPER |= GPIO_OTYPER_OT_9;
 8000552:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <I2C1_Init+0x190>)
 8000554:	685a      	ldr	r2, [r3, #4]
 8000556:	4b3b      	ldr	r3, [pc, #236]	; (8000644 <I2C1_Init+0x190>)
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0089      	lsls	r1, r1, #2
 800055c:	430a      	orrs	r2, r1
 800055e:	605a      	str	r2, [r3, #4]

    /* GPIOB9 (I2C1_SDA) with pull-up resistor */
    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR9_1;
 8000560:	4b38      	ldr	r3, [pc, #224]	; (8000644 <I2C1_Init+0x190>)
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	4b37      	ldr	r3, [pc, #220]	; (8000644 <I2C1_Init+0x190>)
 8000566:	493b      	ldr	r1, [pc, #236]	; (8000654 <I2C1_Init+0x1a0>)
 8000568:	400a      	ands	r2, r1
 800056a:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  GPIO_PUPDR_PUPDR9_0;
 800056c:	4b35      	ldr	r3, [pc, #212]	; (8000644 <I2C1_Init+0x190>)
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	4b34      	ldr	r3, [pc, #208]	; (8000644 <I2C1_Init+0x190>)
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	02c9      	lsls	r1, r1, #11
 8000576:	430a      	orrs	r2, r1
 8000578:	60da      	str	r2, [r3, #12]

    /* GPIOB9 in AF1 (I2C1_SDA) */
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL9_3;
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <I2C1_Init+0x190>)
 800057c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800057e:	4b31      	ldr	r3, [pc, #196]	; (8000644 <I2C1_Init+0x190>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	438a      	bics	r2, r1
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL9_2;
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <I2C1_Init+0x190>)
 8000588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800058a:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <I2C1_Init+0x190>)
 800058c:	2140      	movs	r1, #64	; 0x40
 800058e:	438a      	bics	r2, r1
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL9_1;
 8000592:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <I2C1_Init+0x190>)
 8000594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000596:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <I2C1_Init+0x190>)
 8000598:	2120      	movs	r1, #32
 800059a:	438a      	bics	r2, r1
 800059c:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] |=  GPIO_AFRL_AFSEL9_0;
 800059e:	4b29      	ldr	r3, [pc, #164]	; (8000644 <I2C1_Init+0x190>)
 80005a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <I2C1_Init+0x190>)
 80005a4:	2110      	movs	r1, #16
 80005a6:	430a      	orrs	r2, r1
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* enable I2C1 clock access */
    I2C1_CLK_ENBL();
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <I2C1_Init+0x18c>)
 80005ac:	69da      	ldr	r2, [r3, #28]
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <I2C1_Init+0x18c>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0389      	lsls	r1, r1, #14
 80005b4:	430a      	orrs	r2, r1
 80005b6:	61da      	str	r2, [r3, #28]

    /* analog filter enabled */
    I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <I2C1_Init+0x1a4>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <I2C1_Init+0x1a4>)
 80005be:	4927      	ldr	r1, [pc, #156]	; (800065c <I2C1_Init+0x1a8>)
 80005c0:	400a      	ands	r2, r1
 80005c2:	601a      	str	r2, [r3, #0]

    /* select HSI (= 8 MHz) as I2C1 clock source*/
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <I2C1_Init+0x18c>)
 80005c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <I2C1_Init+0x18c>)
 80005ca:	2110      	movs	r1, #16
 80005cc:	438a      	bics	r2, r1
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* digital filter disabled */
    I2C1->CR1 &= ~I2C_CR1_DNF_3;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <I2C1_Init+0x1a4>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <I2C1_Init+0x1a4>)
 80005d6:	4922      	ldr	r1, [pc, #136]	; (8000660 <I2C1_Init+0x1ac>)
 80005d8:	400a      	ands	r2, r1
 80005da:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_DNF_2;
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <I2C1_Init+0x1a4>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <I2C1_Init+0x1a4>)
 80005e2:	4920      	ldr	r1, [pc, #128]	; (8000664 <I2C1_Init+0x1b0>)
 80005e4:	400a      	ands	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_DNF_1;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <I2C1_Init+0x1a4>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <I2C1_Init+0x1a4>)
 80005ee:	491e      	ldr	r1, [pc, #120]	; (8000668 <I2C1_Init+0x1b4>)
 80005f0:	400a      	ands	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_DNF_0;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <I2C1_Init+0x1a4>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <I2C1_Init+0x1a4>)
 80005fa:	491c      	ldr	r1, [pc, #112]	; (800066c <I2C1_Init+0x1b8>)
 80005fc:	400a      	ands	r2, r1
 80005fe:	601a      	str	r2, [r3, #0]

    /* transfer will be complete after NBYTES data transfer */
    I2C1->CR2 &= ~I2C_CR2_RELOAD;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <I2C1_Init+0x1a4>)
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <I2C1_Init+0x1a4>)
 8000606:	491a      	ldr	r1, [pc, #104]	; (8000670 <I2C1_Init+0x1bc>)
 8000608:	400a      	ands	r2, r1
 800060a:	605a      	str	r2, [r3, #4]

    /* I2C1 in automatic end mode.
       Master automatically sends a STOP condition once the number
       of bytes in NBYTES has been transferred */
    I2C1->CR2 |= I2C_CR2_AUTOEND;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <I2C1_Init+0x1a4>)
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <I2C1_Init+0x1a4>)
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	0489      	lsls	r1, r1, #18
 8000616:	430a      	orrs	r2, r1
 8000618:	605a      	str	r2, [r3, #4]

    /* I2C1 in 7 bit addressing mode */
    I2C1->CR2 &= ~I2C_CR2_ADD10;
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <I2C1_Init+0x1a4>)
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <I2C1_Init+0x1a4>)
 8000620:	490f      	ldr	r1, [pc, #60]	; (8000660 <I2C1_Init+0x1ac>)
 8000622:	400a      	ands	r2, r1
 8000624:	605a      	str	r2, [r3, #4]
       SDADEL = 0  (0x00)
       SCLH   = 29 (0x1D)
       SCLL   = 43 (0x2B)
        
       NOTE: I2C1 in standard mode (100KHz) */
    I2C1->TIMINGR = 0x00201D2BU;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <I2C1_Init+0x1a4>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <I2C1_Init+0x1c0>)
 800062a:	611a      	str	r2, [r3, #16]

    /* enable I2C1 */
    I2C1->CR1 |= I2C_CR1_PE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <I2C1_Init+0x1a4>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <I2C1_Init+0x1a4>)
 8000632:	2101      	movs	r1, #1
 8000634:	430a      	orrs	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400
 8000648:	fffeffff 	.word	0xfffeffff
 800064c:	fffdffff 	.word	0xfffdffff
 8000650:	fffbffff 	.word	0xfffbffff
 8000654:	fff7ffff 	.word	0xfff7ffff
 8000658:	40005400 	.word	0x40005400
 800065c:	ffffefff 	.word	0xffffefff
 8000660:	fffff7ff 	.word	0xfffff7ff
 8000664:	fffffbff 	.word	0xfffffbff
 8000668:	fffffdff 	.word	0xfffffdff
 800066c:	fffffeff 	.word	0xfffffeff
 8000670:	feffffff 	.word	0xfeffffff
 8000674:	00201d2b 	.word	0x00201d2b

08000678 <I2C1_Write>:

void I2C1_Write( uint8_t slaveAddr, uint8_t *data, uint8_t size )
{   
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6039      	str	r1, [r7, #0]
 8000680:	0011      	movs	r1, r2
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	1c02      	adds	r2, r0, #0
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	1dbb      	adds	r3, r7, #6
 800068a:	1c0a      	adds	r2, r1, #0
 800068c:	701a      	strb	r2, [r3, #0]
    uint8_t byteCtr;
        
    /* set slave address */
    I2C1->CR2 |= ( slaveAddr & SLAVE_ADDR_7b_Msk ) << I2C_CR2_SADD_7_1_Pos;
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <I2C1_Write+0xc0>)
 8000690:	6859      	ldr	r1, [r3, #4]
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	22ff      	movs	r2, #255	; 0xff
 800069a:	401a      	ands	r2, r3
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <I2C1_Write+0xc0>)
 800069e:	430a      	orrs	r2, r1
 80006a0:	605a      	str	r2, [r3, #4]

    /* set number of bytes to be sent */
    I2C1->CR2 |= size << I2C_CR2_NBYTES_Pos;
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <I2C1_Write+0xc0>)
 80006a4:	6859      	ldr	r1, [r3, #4]
 80006a6:	1dbb      	adds	r3, r7, #6
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	041a      	lsls	r2, r3, #16
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <I2C1_Write+0xc0>)
 80006ae:	430a      	orrs	r2, r1
 80006b0:	605a      	str	r2, [r3, #4]

    /* set read/write bit (0 = write operation) */
    I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <I2C1_Write+0xc0>)
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <I2C1_Write+0xc0>)
 80006b8:	4920      	ldr	r1, [pc, #128]	; (800073c <I2C1_Write+0xc4>)
 80006ba:	400a      	ands	r2, r1
 80006bc:	605a      	str	r2, [r3, #4]
        
    /* set start bit */
    I2C1->CR2 |= I2C_CR2_START;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <I2C1_Write+0xc0>)
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <I2C1_Write+0xc0>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0189      	lsls	r1, r1, #6
 80006c8:	430a      	orrs	r2, r1
 80006ca:	605a      	str	r2, [r3, #4]
       master automatically sends start bit + slave address + write bit */

    /* if slave address is correct, then the slave will send an ACK bit */
        
    /* wait for transmit data register (TXD) to be empty */
    while ( ( ( I2C1->ISR & I2C_ISR_TXE ) != I2C_ISR_TXE ) )
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <I2C1_Write+0xc0>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d1f9      	bne.n	80006ce <I2C1_Write+0x56>
    {
        /* do nothing */
    }

    /* send each byte from the data array over I2C1 */
    for ( byteCtr = 0; byteCtr < size; byteCtr++, data++ )
 80006da:	230f      	movs	r3, #15
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e013      	b.n	800070c <I2C1_Write+0x94>
    {   
        /* transmit current data byte */
        I2C1->TXDR = ( uint32_t ) ( *data );
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <I2C1_Write+0xc0>)
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28

        /* wait for transmit data register (TXD) to be sent */
        while ( ( ( I2C1->ISR & I2C_ISR_TXE ) != I2C_ISR_TXE ) )
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <I2C1_Write+0xc0>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4013      	ands	r3, r2
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d1f9      	bne.n	80006ee <I2C1_Write+0x76>
    for ( byteCtr = 0; byteCtr < size; byteCtr++, data++ )
 80006fa:	210f      	movs	r1, #15
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	187b      	adds	r3, r7, r1
 8000702:	3201      	adds	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	230f      	movs	r3, #15
 800070e:	18fa      	adds	r2, r7, r3
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	7812      	ldrb	r2, [r2, #0]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	d3e4      	bcc.n	80006e4 <I2C1_Write+0x6c>

    /* once transmission is complete ...
       master automatically sends a stop bit (due to autoend mode enabled) */
        
    /* wait for I2C1 bus to be free (stop bit sent) */
    while ( ( I2C1->ISR & I2C_ISR_BUSY ) == I2C_ISR_BUSY )
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <I2C1_Write+0xc0>)
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	401a      	ands	r2, r3
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	429a      	cmp	r2, r3
 800072c:	d0f6      	beq.n	800071c <I2C1_Write+0xa4>
    {
        /* do nothing */
    }
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b004      	add	sp, #16
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40005400 	.word	0x40005400
 800073c:	fffffbff 	.word	0xfffffbff

08000740 <LCD_Init>:

static uint8_t byte;
static uint8_t DDRAMADDR = 0U;

void LCD_Init( LCD_HandleTypeDef *hlcd )
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    uint8_t i2cByte;

    /* initialize TIM3 */
    TIM3_Init();
 8000748:	f7ff fe2a 	bl	80003a0 <TIM3_Init>

    /* inititalize I2C1 */
    I2C1_Init();
 800074c:	f7ff feb2 	bl	80004b4 <I2C1_Init>

    /* wait 40 ms */
    TIM3_Delay_ms( 40U );
 8000750:	2028      	movs	r0, #40	; 0x28
 8000752:	f7ff fe7b 	bl	800044c <TIM3_Delay_ms>

    /* function set (this is sent in 8 bit mode)
       DB7 = 0, DB6 = 0, DB5 = 1, DB4 = 1 = ST7066U in 8 bit mode
       backlight = backlight ON = 1, E = 0, RW = 0, RS = 0
       (not used) DB3 = N = x, DB2 = F = x, DB1 = x, DB0 = x */
    i2cByte = 0x38U;
 8000756:	210f      	movs	r1, #15
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2238      	movs	r2, #56	; 0x38
 800075c:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &i2cByte, 1U );
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	000c      	movs	r4, r1
 8000764:	1879      	adds	r1, r7, r1
 8000766:	2201      	movs	r2, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff ff85 	bl	8000678 <I2C1_Write>
    LCD_Start_Data_Write( hlcd, i2cByte );
 800076e:	193b      	adds	r3, r7, r4
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	0011      	movs	r1, r2
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f820 	bl	80007bc <LCD_Start_Data_Write>

    /* wait 37us */
    TIM3_Delay_us( 37U ),
 800077c:	2025      	movs	r0, #37	; 0x25
 800077e:	f7ff fe33 	bl	80003e8 <TIM3_Delay_us>

    /* 1st try, set ST7066U to (8/4) bit datalength, (1/2) display line
       and (5x8/5x11) dots font mode */
    LCD_Send_Instruction( hlcd, FUNCTION_SET_REG );
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2120      	movs	r1, #32
 8000786:	0018      	movs	r0, r3
 8000788:	f000 f840 	bl	800080c <LCD_Send_Instruction>

    /* 2nd try, set ST7066U to (8/4) bit datalength, (1/2) display line
       and (5x8/5x11) dots font mode */
    LCD_Send_Instruction( hlcd, FUNCTION_SET_REG );
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2120      	movs	r1, #32
 8000790:	0018      	movs	r0, r3
 8000792:	f000 f83b 	bl	800080c <LCD_Send_Instruction>
        
    /* turn (on/off) display, (enable/disable) cursor, 
       and (enable/disable) blink */
    LCD_Send_Instruction( hlcd, DISPLAY_ON_OFF_REG );
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2108      	movs	r1, #8
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f836 	bl	800080c <LCD_Send_Instruction>

    /* clear display */
    LCD_Send_Instruction( hlcd, CLEAR_DISPLAY_REG );
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2101      	movs	r1, #1
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 f831 	bl	800080c <LCD_Send_Instruction>

    /* set (left/right) cursor direction and (shift/no shift) display */
    LCD_Send_Instruction( hlcd, ENTRY_MODE_SET_REG );
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2104      	movs	r1, #4
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f82c 	bl	800080c <LCD_Send_Instruction>
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b005      	add	sp, #20
 80007ba:	bd90      	pop	{r4, r7, pc}

080007bc <LCD_Start_Data_Write>:

void LCD_Start_Data_Write( LCD_HandleTypeDef *hlcd, uint8_t prevData )
{   
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	000a      	movs	r2, r1
 80007c6:	1cfb      	adds	r3, r7, #3
 80007c8:	701a      	strb	r2, [r3, #0]
    /* enable E signal without touching previous data.
       This tells the ST7066U driver to accept current data on its pins */
    prevData |= E_ENABLED;
 80007ca:	1cfb      	adds	r3, r7, #3
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2204      	movs	r2, #4
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	1cfb      	adds	r3, r7, #3
 80007d6:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &prevData, 1U );
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	1cf9      	adds	r1, r7, #3
 80007de:	2201      	movs	r2, #1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ff49 	bl	8000678 <I2C1_Write>

    /* disable E signal.
       Prepare driver for future commands or data */
    prevData &= ~E_ENABLED;
 80007e6:	1cfb      	adds	r3, r7, #3
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2204      	movs	r2, #4
 80007ec:	4393      	bics	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	1cfb      	adds	r3, r7, #3
 80007f2:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &prevData, 1U );
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	1cf9      	adds	r1, r7, #3
 80007fa:	2201      	movs	r2, #1
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff ff3b 	bl	8000678 <I2C1_Write>
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <LCD_Send_Instruction>:

void LCD_Send_Instruction( LCD_HandleTypeDef *hlcd, uint8_t instruction )
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	000a      	movs	r2, r1
 8000816:	1cfb      	adds	r3, r7, #3
 8000818:	701a      	strb	r2, [r3, #0]
    /* instruction's MOST SIGNIFICANT nibble + light + write instruction */
    byte = ( instruction & 0xF0U ) | hlcd->backlight | RW_WRITE | RS_INSTRUCTION;
 800081a:	1cfb      	adds	r3, r7, #3
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	220f      	movs	r2, #15
 8000820:	4393      	bics	r3, r2
 8000822:	b2da      	uxtb	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	785b      	ldrb	r3, [r3, #1]
 8000828:	4313      	orrs	r3, r2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <LCD_Send_Instruction+0x198>)
 800082e:	701a      	strb	r2, [r3, #0]

    switch ( instruction )
 8000830:	1cfb      	adds	r3, r7, #3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b20      	cmp	r3, #32
 8000836:	d002      	beq.n	800083e <LCD_Send_Instruction+0x32>
 8000838:	2b80      	cmp	r3, #128	; 0x80
 800083a:	d009      	beq.n	8000850 <LCD_Send_Instruction+0x44>
            byte |= ( DDRAMADDR & 0x70U );
            break;

        default:
            /* do nothing */
            break;
 800083c:	e014      	b.n	8000868 <LCD_Send_Instruction+0x5c>
            byte |= hlcd->datalenght;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7a9a      	ldrb	r2, [r3, #10]
 8000842:	4b58      	ldr	r3, [pc, #352]	; (80009a4 <LCD_Send_Instruction+0x198>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4313      	orrs	r3, r2
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b56      	ldr	r3, [pc, #344]	; (80009a4 <LCD_Send_Instruction+0x198>)
 800084c:	701a      	strb	r2, [r3, #0]
            break;
 800084e:	e00b      	b.n	8000868 <LCD_Send_Instruction+0x5c>
            byte |= ( DDRAMADDR & 0x70U );
 8000850:	4b55      	ldr	r3, [pc, #340]	; (80009a8 <LCD_Send_Instruction+0x19c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2270      	movs	r2, #112	; 0x70
 8000856:	4013      	ands	r3, r2
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <LCD_Send_Instruction+0x198>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4313      	orrs	r3, r2
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b50      	ldr	r3, [pc, #320]	; (80009a4 <LCD_Send_Instruction+0x198>)
 8000864:	701a      	strb	r2, [r3, #0]
            break;
 8000866:	46c0      	nop			; (mov r8, r8)
    }

    /* send MOST SIGNIFICANT nibble + extra parameters over I2C1 */
    I2C1_Write( hlcd->lcdaddress, &byte, 1U );
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	494d      	ldr	r1, [pc, #308]	; (80009a4 <LCD_Send_Instruction+0x198>)
 800086e:	2201      	movs	r2, #1
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ff01 	bl	8000678 <I2C1_Write>
    LCD_Start_Data_Write( hlcd, byte );
 8000876:	4b4b      	ldr	r3, [pc, #300]	; (80009a4 <LCD_Send_Instruction+0x198>)
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff ff9c 	bl	80007bc <LCD_Start_Data_Write>

    /* instruction's LEAST SIGNIFICANT nibble + light + write instruction */
    byte = ( instruction << 4 ) | hlcd->backlight | RW_WRITE | RS_INSTRUCTION;
 8000884:	1cfb      	adds	r3, r7, #3
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	b25a      	sxtb	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	785b      	ldrb	r3, [r3, #1]
 8000890:	b25b      	sxtb	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b25b      	sxtb	r3, r3
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <LCD_Send_Instruction+0x198>)
 800089a:	701a      	strb	r2, [r3, #0]
        
    switch ( instruction )
 800089c:	1cfb      	adds	r3, r7, #3
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b80      	cmp	r3, #128	; 0x80
 80008a2:	d04f      	beq.n	8000944 <LCD_Send_Instruction+0x138>
 80008a4:	dc59      	bgt.n	800095a <LCD_Send_Instruction+0x14e>
 80008a6:	2b20      	cmp	r3, #32
 80008a8:	d03b      	beq.n	8000922 <LCD_Send_Instruction+0x116>
 80008aa:	dc56      	bgt.n	800095a <LCD_Send_Instruction+0x14e>
 80008ac:	2b10      	cmp	r3, #16
 80008ae:	d02b      	beq.n	8000908 <LCD_Send_Instruction+0xfc>
 80008b0:	dc53      	bgt.n	800095a <LCD_Send_Instruction+0x14e>
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d002      	beq.n	80008bc <LCD_Send_Instruction+0xb0>
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d011      	beq.n	80008de <LCD_Send_Instruction+0xd2>
            byte |= ( DDRAMADDR & 0x0FU ) << 4;
            break;

        default:
            /* do nothing */
            break;
 80008ba:	e04e      	b.n	800095a <LCD_Send_Instruction+0x14e>
            byte |= ( hlcd->incrementddram | hlcd->shiftdisplay ) << 4;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	78da      	ldrb	r2, [r3, #3]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <LCD_Send_Instruction+0x198>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <LCD_Send_Instruction+0x198>)
 80008da:	701a      	strb	r2, [r3, #0]
            break;
 80008dc:	e03e      	b.n	800095c <LCD_Send_Instruction+0x150>
            byte |= ( hlcd->display | hlcd->cursor | hlcd->blink ) << 4;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	799a      	ldrb	r2, [r3, #6]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	795b      	ldrb	r3, [r3, #5]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	b25a      	sxtb	r2, r3
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <LCD_Send_Instruction+0x198>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <LCD_Send_Instruction+0x198>)
 8000904:	701a      	strb	r2, [r3, #0]
            break;
 8000906:	e029      	b.n	800095c <LCD_Send_Instruction+0x150>
            byte |= hlcd->shiftcursor << 4;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	79db      	ldrb	r3, [r3, #7]
 800090c:	011b      	lsls	r3, r3, #4
 800090e:	b25a      	sxtb	r2, r3
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <LCD_Send_Instruction+0x198>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b25b      	sxtb	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b25b      	sxtb	r3, r3
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <LCD_Send_Instruction+0x198>)
 800091e:	701a      	strb	r2, [r3, #0]
            break;
 8000920:	e01c      	b.n	800095c <LCD_Send_Instruction+0x150>
            byte |= ( hlcd->displayline | hlcd->font ) << 4;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7a5a      	ldrb	r2, [r3, #9]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7a1b      	ldrb	r3, [r3, #8]
 800092a:	4313      	orrs	r3, r2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	b25a      	sxtb	r2, r3
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <LCD_Send_Instruction+0x198>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b25b      	sxtb	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b25b      	sxtb	r3, r3
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <LCD_Send_Instruction+0x198>)
 8000940:	701a      	strb	r2, [r3, #0]
            break;
 8000942:	e00b      	b.n	800095c <LCD_Send_Instruction+0x150>
            byte |= ( DDRAMADDR & 0x0FU ) << 4;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <LCD_Send_Instruction+0x19c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <LCD_Send_Instruction+0x198>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4313      	orrs	r3, r2
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <LCD_Send_Instruction+0x198>)
 8000956:	701a      	strb	r2, [r3, #0]
            break;
 8000958:	e000      	b.n	800095c <LCD_Send_Instruction+0x150>
            break;
 800095a:	46c0      	nop			; (mov r8, r8)
    }

    /* send LEAST SIGNIFICANT nibble + extra parameters over I2C1 */
    I2C1_Write( hlcd->lcdaddress, &byte, 1U );
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4910      	ldr	r1, [pc, #64]	; (80009a4 <LCD_Send_Instruction+0x198>)
 8000962:	2201      	movs	r2, #1
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff fe87 	bl	8000678 <I2C1_Write>
    LCD_Start_Data_Write( hlcd, byte );
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <LCD_Send_Instruction+0x198>)
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff ff22 	bl	80007bc <LCD_Start_Data_Write>

    if ( ( instruction == CLEAR_DISPLAY_REG ) || ( instruction == RETURN_HOME_REG ) )
 8000978:	1cfb      	adds	r3, r7, #3
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d003      	beq.n	8000988 <LCD_Send_Instruction+0x17c>
 8000980:	1cfb      	adds	r3, r7, #3
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d105      	bne.n	8000994 <LCD_Send_Instruction+0x188>
    {   
        /* wait 1.52 ms */
        TIM3_Delay_us( 1520U );
 8000988:	23be      	movs	r3, #190	; 0xbe
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fd2b 	bl	80003e8 <TIM3_Delay_us>
 8000992:	e003      	b.n	800099c <LCD_Send_Instruction+0x190>
    }
    else
    {
        /* wait 37 us */
        TIM3_Delay_us( 37U );
 8000994:	2025      	movs	r0, #37	; 0x25
 8000996:	f7ff fd27 	bl	80003e8 <TIM3_Delay_us>
    }
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000001c 	.word	0x2000001c
 80009a8:	2000001d 	.word	0x2000001d

080009ac <LCD_Write_To_DDRAM>:

void LCD_Write_To_DDRAM( LCD_HandleTypeDef *hlcd, uint8_t data )
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	000a      	movs	r2, r1
 80009b6:	1cfb      	adds	r3, r7, #3
 80009b8:	701a      	strb	r2, [r3, #0]
    /* data's MSB nible + extra parameters */
    byte = ( data & 0xF0U ) | hlcd->backlight | RW_WRITE | RS_DATA;
 80009ba:	1cfb      	adds	r3, r7, #3
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	220f      	movs	r2, #15
 80009c0:	4393      	bics	r3, r2
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2201      	movs	r2, #1
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <LCD_Write_To_DDRAM+0x90>)
 80009d4:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &byte, 1 );
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4918      	ldr	r1, [pc, #96]	; (8000a3c <LCD_Write_To_DDRAM+0x90>)
 80009dc:	2201      	movs	r2, #1
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fe4a 	bl	8000678 <I2C1_Write>
    LCD_Start_Data_Write( hlcd, byte );
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <LCD_Write_To_DDRAM+0x90>)
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff fee5 	bl	80007bc <LCD_Start_Data_Write>

    /* data's LSB nible + extra parameters */
    byte = ( data << 4 ) | hlcd->backlight | RW_WRITE | RS_DATA;
 80009f2:	1cfb      	adds	r3, r7, #3
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	b25a      	sxtb	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2201      	movs	r2, #1
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <LCD_Write_To_DDRAM+0x90>)
 8000a0e:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &byte, 1U );
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4909      	ldr	r1, [pc, #36]	; (8000a3c <LCD_Write_To_DDRAM+0x90>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff fe2d 	bl	8000678 <I2C1_Write>
    LCD_Start_Data_Write( hlcd, byte );
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <LCD_Write_To_DDRAM+0x90>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	0011      	movs	r1, r2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff fec8 	bl	80007bc <LCD_Start_Data_Write>

    /* wait 37 us */
    TIM3_Delay_us( 37U );
 8000a2c:	2025      	movs	r0, #37	; 0x25
 8000a2e:	f7ff fcdb 	bl	80003e8 <TIM3_Delay_us>
}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	2000001c 	.word	0x2000001c

08000a40 <LCD_API_Move_Cursor>:

void LCD_API_Move_Cursor( LCD_HandleTypeDef *hlcd, uint8_t row, uint8_t col )
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	0008      	movs	r0, r1
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	1cfb      	adds	r3, r7, #3
 8000a4e:	1c02      	adds	r2, r0, #0
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	1cbb      	adds	r3, r7, #2
 8000a54:	1c0a      	adds	r2, r1, #0
 8000a56:	701a      	strb	r2, [r3, #0]
    if ( row <= 1U && col <= 15U )
 8000a58:	1cfb      	adds	r3, r7, #3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d817      	bhi.n	8000a90 <LCD_API_Move_Cursor+0x50>
 8000a60:	1cbb      	adds	r3, r7, #2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d813      	bhi.n	8000a90 <LCD_API_Move_Cursor+0x50>
    {   
        if ( row == 1U )
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d102      	bne.n	8000a76 <LCD_API_Move_Cursor+0x36>
        {
            row = 0x40U;
 8000a70:	1cfb      	adds	r3, r7, #3
 8000a72:	2240      	movs	r2, #64	; 0x40
 8000a74:	701a      	strb	r2, [r3, #0]
        }

        DDRAMADDR = row + col;
 8000a76:	1cfa      	adds	r2, r7, #3
 8000a78:	1cbb      	adds	r3, r7, #2
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	18d3      	adds	r3, r2, r3
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <LCD_API_Move_Cursor+0x58>)
 8000a84:	701a      	strb	r2, [r3, #0]
        LCD_Send_Instruction( hlcd, SET_DDRAM_ADDRESS_REG );
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff febe 	bl	800080c <LCD_Send_Instruction>
    }
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000001d 	.word	0x2000001d

08000a9c <LCD_API_Print_Character>:

void LCD_API_Print_Character( LCD_HandleTypeDef *hlcd, uint8_t character )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	000a      	movs	r2, r1
 8000aa6:	1cfb      	adds	r3, r7, #3
 8000aa8:	701a      	strb	r2, [r3, #0]
    if ( character >= ' ' && character <= '}' )
 8000aaa:	1cfb      	adds	r3, r7, #3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b1f      	cmp	r3, #31
 8000ab0:	d90a      	bls.n	8000ac8 <LCD_API_Print_Character+0x2c>
 8000ab2:	1cfb      	adds	r3, r7, #3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b7d      	cmp	r3, #125	; 0x7d
 8000ab8:	d806      	bhi.n	8000ac8 <LCD_API_Print_Character+0x2c>
    {
        LCD_Write_To_DDRAM( hlcd, character );
 8000aba:	1cfb      	adds	r3, r7, #3
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff ff72 	bl	80009ac <LCD_Write_To_DDRAM>
    }
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <LCD_API_Print_String>:

void LCD_API_Print_String( LCD_HandleTypeDef *hlcd, uint8_t *string, uint8_t size )
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for ( i = 0U; i < size; i++ )
 8000ade:	2317      	movs	r3, #23
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e00f      	b.n	8000b08 <LCD_API_Print_String+0x38>
    {
        LCD_API_Print_Character( hlcd, string[ i ] );
 8000ae8:	2417      	movs	r4, #23
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	0011      	movs	r1, r2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff ffcf 	bl	8000a9c <LCD_API_Print_Character>
    for ( i = 0U; i < size; i++ )
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	3201      	adds	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	2317      	movs	r3, #23
 8000b0a:	18fa      	adds	r2, r7, r3
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	7812      	ldrb	r2, [r2, #0]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d3e8      	bcc.n	8000ae8 <LCD_API_Print_String+0x18>
    }
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b007      	add	sp, #28
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <LCD_API_Shift_Screen_Left>:

void LCD_API_Shift_Screen_Left( LCD_HandleTypeDef *hlcd, uint8_t positions, uint32_t delay_ms )
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	230b      	movs	r3, #11
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	1c0a      	adds	r2, r1, #0
 8000b30:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    hlcd->shiftcursor = SC_RL_SHIFT_DISPLAY_LEFT;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2208      	movs	r2, #8
 8000b36:	71da      	strb	r2, [r3, #7]

    for ( i = 0U; i < positions; i++ )
 8000b38:	2317      	movs	r3, #23
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	e00e      	b.n	8000b60 <LCD_API_Shift_Screen_Left+0x40>
    {
        LCD_Send_Instruction( hlcd, CURSOR_DISPLAY_SHIFT_REG );
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2110      	movs	r1, #16
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fe60 	bl	800080c <LCD_Send_Instruction>
        TIM3_Delay_ms( delay_ms );
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fc7c 	bl	800044c <TIM3_Delay_ms>
    for ( i = 0U; i < positions; i++ )
 8000b54:	2117      	movs	r1, #23
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	3201      	adds	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	2317      	movs	r3, #23
 8000b62:	18fa      	adds	r2, r7, r3
 8000b64:	230b      	movs	r3, #11
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	7812      	ldrb	r2, [r2, #0]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d3e8      	bcc.n	8000b42 <LCD_API_Shift_Screen_Left+0x22>
    }
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b006      	add	sp, #24
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <LCD_API_Shift_Screen_Right>:

void LCD_API_Shift_Screen_Right( LCD_HandleTypeDef *hlcd, uint8_t positions, uint32_t delay_ms )
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	230b      	movs	r3, #11
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	1c0a      	adds	r2, r1, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    hlcd->shiftcursor = SC_RL_SHIFT_DISPLAY_RIGHT;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	220c      	movs	r2, #12
 8000b90:	71da      	strb	r2, [r3, #7]

    for ( i = 0U; i < positions; i++ )
 8000b92:	2317      	movs	r3, #23
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e00e      	b.n	8000bba <LCD_API_Shift_Screen_Right+0x40>
    {
        LCD_Send_Instruction( hlcd, CURSOR_DISPLAY_SHIFT_REG );
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fe33 	bl	800080c <LCD_Send_Instruction>
        TIM3_Delay_ms( delay_ms );
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fc4f 	bl	800044c <TIM3_Delay_ms>
    for ( i = 0U; i < positions; i++ )
 8000bae:	2117      	movs	r1, #23
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	3201      	adds	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	2317      	movs	r3, #23
 8000bbc:	18fa      	adds	r2, r7, r3
 8000bbe:	230b      	movs	r3, #11
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d3e8      	bcc.n	8000b9c <LCD_API_Shift_Screen_Right+0x22>
    }
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b006      	add	sp, #24
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <__libc_init_array>:
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	4c0c      	ldr	r4, [pc, #48]	; (8000c0c <__libc_init_array+0x38>)
 8000bda:	4d0d      	ldr	r5, [pc, #52]	; (8000c10 <__libc_init_array+0x3c>)
 8000bdc:	1b64      	subs	r4, r4, r5
 8000bde:	10a4      	asrs	r4, r4, #2
 8000be0:	42a6      	cmp	r6, r4
 8000be2:	d109      	bne.n	8000bf8 <__libc_init_array+0x24>
 8000be4:	2600      	movs	r6, #0
 8000be6:	f000 f819 	bl	8000c1c <_init>
 8000bea:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <__libc_init_array+0x40>)
 8000bec:	4d0a      	ldr	r5, [pc, #40]	; (8000c18 <__libc_init_array+0x44>)
 8000bee:	1b64      	subs	r4, r4, r5
 8000bf0:	10a4      	asrs	r4, r4, #2
 8000bf2:	42a6      	cmp	r6, r4
 8000bf4:	d105      	bne.n	8000c02 <__libc_init_array+0x2e>
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	00b3      	lsls	r3, r6, #2
 8000bfa:	58eb      	ldr	r3, [r5, r3]
 8000bfc:	4798      	blx	r3
 8000bfe:	3601      	adds	r6, #1
 8000c00:	e7ee      	b.n	8000be0 <__libc_init_array+0xc>
 8000c02:	00b3      	lsls	r3, r6, #2
 8000c04:	58eb      	ldr	r3, [r5, r3]
 8000c06:	4798      	blx	r3
 8000c08:	3601      	adds	r6, #1
 8000c0a:	e7f2      	b.n	8000bf2 <__libc_init_array+0x1e>
 8000c0c:	08000c48 	.word	0x08000c48
 8000c10:	08000c48 	.word	0x08000c48
 8000c14:	08000c4c 	.word	0x08000c4c
 8000c18:	08000c48 	.word	0x08000c48

08000c1c <_init>:
 8000c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c22:	bc08      	pop	{r3}
 8000c24:	469e      	mov	lr, r3
 8000c26:	4770      	bx	lr

08000c28 <_fini>:
 8000c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2e:	bc08      	pop	{r3}
 8000c30:	469e      	mov	lr, r3
 8000c32:	4770      	bx	lr
