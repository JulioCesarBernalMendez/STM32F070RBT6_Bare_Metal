
final.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <deregister_tm_clones>:
 80000c0:	4804      	ldr	r0, [pc, #16]	; (80000d4 <deregister_tm_clones+0x14>)
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <deregister_tm_clones+0x18>)
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4283      	cmp	r3, r0
 80000c8:	d003      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000ca:	4b04      	ldr	r3, [pc, #16]	; (80000dc <deregister_tm_clones+0x1c>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d000      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000d0:	4798      	blx	r3
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000000 	.word	0x20000000
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000

080000e0 <register_tm_clones>:
 80000e0:	4806      	ldr	r0, [pc, #24]	; (80000fc <register_tm_clones+0x1c>)
 80000e2:	4907      	ldr	r1, [pc, #28]	; (8000100 <register_tm_clones+0x20>)
 80000e4:	1a09      	subs	r1, r1, r0
 80000e6:	108b      	asrs	r3, r1, #2
 80000e8:	0fc9      	lsrs	r1, r1, #31
 80000ea:	18c9      	adds	r1, r1, r3
 80000ec:	b510      	push	{r4, lr}
 80000ee:	1049      	asrs	r1, r1, #1
 80000f0:	d003      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f2:	4b04      	ldr	r3, [pc, #16]	; (8000104 <register_tm_clones+0x24>)
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d000      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f8:	4798      	blx	r3
 80000fa:	bd10      	pop	{r4, pc}
 80000fc:	20000000 	.word	0x20000000
 8000100:	20000000 	.word	0x20000000
 8000104:	00000000 	.word	0x00000000

08000108 <__do_global_dtors_aux>:
 8000108:	b510      	push	{r4, lr}
 800010a:	4c07      	ldr	r4, [pc, #28]	; (8000128 <__do_global_dtors_aux+0x20>)
 800010c:	7823      	ldrb	r3, [r4, #0]
 800010e:	2b00      	cmp	r3, #0
 8000110:	d109      	bne.n	8000126 <__do_global_dtors_aux+0x1e>
 8000112:	f7ff ffd5 	bl	80000c0 <deregister_tm_clones>
 8000116:	4b05      	ldr	r3, [pc, #20]	; (800012c <__do_global_dtors_aux+0x24>)
 8000118:	2b00      	cmp	r3, #0
 800011a:	d002      	beq.n	8000122 <__do_global_dtors_aux+0x1a>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x28>)
 800011e:	e000      	b.n	8000122 <__do_global_dtors_aux+0x1a>
 8000120:	bf00      	nop
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	08000330 	.word	0x08000330

08000134 <frame_dummy>:
 8000134:	4b05      	ldr	r3, [pc, #20]	; (800014c <frame_dummy+0x18>)
 8000136:	b510      	push	{r4, lr}
 8000138:	2b00      	cmp	r3, #0
 800013a:	d003      	beq.n	8000144 <frame_dummy+0x10>
 800013c:	4904      	ldr	r1, [pc, #16]	; (8000150 <frame_dummy+0x1c>)
 800013e:	4805      	ldr	r0, [pc, #20]	; (8000154 <frame_dummy+0x20>)
 8000140:	e000      	b.n	8000144 <frame_dummy+0x10>
 8000142:	bf00      	nop
 8000144:	f7ff ffcc 	bl	80000e0 <register_tm_clones>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	46c0      	nop			; (mov r8, r8)
 800014c:	00000000 	.word	0x00000000
 8000150:	20000004 	.word	0x20000004
 8000154:	08000330 	.word	0x08000330

08000158 <main>:
#include "main.h"

int main( void )
{   
 8000158:	b580      	push	{r7, lr}
 800015a:	b082      	sub	sp, #8
 800015c:	af00      	add	r7, sp, #0
    uint32_t ledTicks = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	607b      	str	r3, [r7, #4]

    /* enable GPIOA5 (BOARD LED) as
       digital output */
    GPIOA_Init();
 8000162:	f000 f853 	bl	800020c <GPIOA_Init>

    /* enable:
       - SysTick timer
       - SysTick count down to zero exception */
    SysTick_Init();
 8000166:	f000 f873 	bl	8000250 <SysTick_Init>

    /* initialize ledTicks counter */
    ledTicks = Get_SysTick();
 800016a:	f000 f891 	bl	8000290 <Get_SysTick>
 800016e:	0003      	movs	r3, r0
 8000170:	607b      	str	r3, [r7, #4]

    while( 1 )
    {   
        /* if 500 miliseconds have passed */
        if ( ( Get_SysTick() - ledTicks ) >= 500 )
 8000172:	f000 f88d 	bl	8000290 <Get_SysTick>
 8000176:	0002      	movs	r2, r0
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	1ad2      	subs	r2, r2, r3
 800017c:	23fa      	movs	r3, #250	; 0xfa
 800017e:	005b      	lsls	r3, r3, #1
 8000180:	429a      	cmp	r2, r3
 8000182:	d3f6      	bcc.n	8000172 <main+0x1a>
        {   
            /* toggle board led */
            Toggle_Led();
 8000184:	f000 f805 	bl	8000192 <Toggle_Led>

            /* update ledTicks counter */
            ledTicks = Get_SysTick();
 8000188:	f000 f882 	bl	8000290 <Get_SysTick>
 800018c:	0003      	movs	r3, r0
 800018e:	607b      	str	r3, [r7, #4]
        if ( ( Get_SysTick() - ledTicks ) >= 500 )
 8000190:	e7ef      	b.n	8000172 <main+0x1a>

08000192 <Toggle_Led>:

    return 0;
}

void Toggle_Led( void )
{   
 8000192:	b580      	push	{r7, lr}
 8000194:	af00      	add	r7, sp, #0
    GPIOA->ODR ^= LED_PIN;
 8000196:	2390      	movs	r3, #144	; 0x90
 8000198:	05db      	lsls	r3, r3, #23
 800019a:	695a      	ldr	r2, [r3, #20]
 800019c:	2390      	movs	r3, #144	; 0x90
 800019e:	05db      	lsls	r3, r3, #23
 80001a0:	2120      	movs	r1, #32
 80001a2:	404a      	eors	r2, r1
 80001a4:	615a      	str	r2, [r3, #20]
}
 80001a6:	46c0      	nop			; (mov r8, r8)
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80001b0:	46c0      	nop			; (mov r8, r8)
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
	...

080001b8 <Reset_Handler>:
 80001b8:	480d      	ldr	r0, [pc, #52]	; (80001f0 <LoopForever+0x2>)
 80001ba:	4685      	mov	sp, r0
 80001bc:	480d      	ldr	r0, [pc, #52]	; (80001f4 <LoopForever+0x6>)
 80001be:	490e      	ldr	r1, [pc, #56]	; (80001f8 <LoopForever+0xa>)
 80001c0:	4a0e      	ldr	r2, [pc, #56]	; (80001fc <LoopForever+0xe>)
 80001c2:	2300      	movs	r3, #0
 80001c4:	e002      	b.n	80001cc <LoopCopyDataInit>

080001c6 <CopyDataInit>:
 80001c6:	58d4      	ldr	r4, [r2, r3]
 80001c8:	50c4      	str	r4, [r0, r3]
 80001ca:	3304      	adds	r3, #4

080001cc <LoopCopyDataInit>:
 80001cc:	18c4      	adds	r4, r0, r3
 80001ce:	428c      	cmp	r4, r1
 80001d0:	d3f9      	bcc.n	80001c6 <CopyDataInit>
 80001d2:	4a0b      	ldr	r2, [pc, #44]	; (8000200 <LoopForever+0x12>)
 80001d4:	4c0b      	ldr	r4, [pc, #44]	; (8000204 <LoopForever+0x16>)
 80001d6:	2300      	movs	r3, #0
 80001d8:	e001      	b.n	80001de <LoopFillZerobss>

080001da <FillZerobss>:
 80001da:	6013      	str	r3, [r2, #0]
 80001dc:	3204      	adds	r2, #4

080001de <LoopFillZerobss>:
 80001de:	42a2      	cmp	r2, r4
 80001e0:	d3fb      	bcc.n	80001da <FillZerobss>
 80001e2:	f7ff ffe3 	bl	80001ac <SystemInit>
 80001e6:	f000 f87f 	bl	80002e8 <__libc_init_array>
 80001ea:	f7ff ffb5 	bl	8000158 <main>

080001ee <LoopForever>:
 80001ee:	e7fe      	b.n	80001ee <LoopForever>
 80001f0:	20004000 	.word	0x20004000
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000000 	.word	0x20000000
 80001fc:	08000350 	.word	0x08000350
 8000200:	20000000 	.word	0x20000000
 8000204:	20000020 	.word	0x20000020

08000208 <ADC1_IRQHandler>:
 8000208:	e7fe      	b.n	8000208 <ADC1_IRQHandler>
	...

0800020c <GPIOA_Init>:
#include "gpio.h"

void GPIOA_Init( void )
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
    /* enable access to GPIOA clock */
    GPIOA_CLK_ENBL();
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <GPIOA_Init+0x3c>)
 8000212:	695a      	ldr	r2, [r3, #20]
 8000214:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <GPIOA_Init+0x3c>)
 8000216:	2180      	movs	r1, #128	; 0x80
 8000218:	0289      	lsls	r1, r1, #10
 800021a:	430a      	orrs	r2, r1
 800021c:	615a      	str	r2, [r3, #20]

    /* GPIOA5 (BOARD LED) as output */
    GPIOA->MODER &= ~( 0x01U << 11 );
 800021e:	2390      	movs	r3, #144	; 0x90
 8000220:	05db      	lsls	r3, r3, #23
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <GPIOA_Init+0x40>)
 800022a:	400a      	ands	r2, r1
 800022c:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ( 0x01U << 10 );
 800022e:	2390      	movs	r3, #144	; 0x90
 8000230:	05db      	lsls	r3, r3, #23
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	2390      	movs	r3, #144	; 0x90
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	00c9      	lsls	r1, r1, #3
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	40021000 	.word	0x40021000
 800024c:	fffff7ff 	.word	0xfffff7ff

08000250 <SysTick_Init>:
#include "systick.h"

uint32_t tick = 0;

void SysTick_Init( void )
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    /* Processor clock (HCLK = 8MHz) as SysTick clocksource */
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <SysTick_Init+0x3c>)
 8000256:	2204      	movs	r2, #4
 8000258:	601a      	str	r2, [r3, #0]

    /* SysTick exception request disabled */
    SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <SysTick_Init+0x3c>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <SysTick_Init+0x3c>)
 8000260:	2102      	movs	r1, #2
 8000262:	438a      	bics	r2, r1
 8000264:	601a      	str	r2, [r3, #0]

    /* SysTick reload value set to 1ms.
       RELOAD = 1ms / ( 1 / 8MHz ) */
    SysTick->LOAD = 0x1F40U;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <SysTick_Init+0x3c>)
 8000268:	22fa      	movs	r2, #250	; 0xfa
 800026a:	0152      	lsls	r2, r2, #5
 800026c:	605a      	str	r2, [r3, #4]

    /* enable SysTick exception request */
    SysTick_Interrupt_Init();
 800026e:	f000 f819 	bl	80002a4 <SysTick_Interrupt_Init>

    /* SysTick current value set to 0 */
    SysTick->VAL = 0x0U;
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <SysTick_Init+0x3c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]

    /* Enable SysTick */
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <SysTick_Init+0x3c>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b03      	ldr	r3, [pc, #12]	; (800028c <SysTick_Init+0x3c>)
 800027e:	2101      	movs	r1, #1
 8000280:	430a      	orrs	r2, r1
 8000282:	601a      	str	r2, [r3, #0]
}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	e000e010 	.word	0xe000e010

08000290 <Get_SysTick>:

uint32_t Get_SysTick( void )
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
    return tick;
 8000294:	4b02      	ldr	r3, [pc, #8]	; (80002a0 <Get_SysTick+0x10>)
 8000296:	681b      	ldr	r3, [r3, #0]
}
 8000298:	0018      	movs	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <SysTick_Interrupt_Init>:
#include "exti.h"

void SysTick_Interrupt_Init( void )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
   /* enable SysTick exception request
      (counting down to zero asserts the exception request) */
   SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <SysTick_Interrupt_Init+0x18>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <SysTick_Interrupt_Init+0x18>)
 80002ae:	2102      	movs	r1, #2
 80002b0:	430a      	orrs	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	e000e010 	.word	0xe000e010

080002c0 <SysTick_Handler>:
#include "interrupts.h"

void SysTick_Handler( void )
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
    /* execute SysTick callback */
    SysTick_Callback();
 80002c4:	f000 f804 	bl	80002d0 <SysTick_Callback>
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <SysTick_Callback>:

void SysTick_Callback( void )
{   
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
    /* every time the SysTick exception occurs (1ms)
       the SysTick counter will be increased,
       this counter can be used by the user as a timebase
       to execute periodic tasks */
    tick++;
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <SysTick_Callback+0x14>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	1c5a      	adds	r2, r3, #1
 80002da:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <SysTick_Callback+0x14>)
 80002dc:	601a      	str	r2, [r3, #0]
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <__libc_init_array>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	2600      	movs	r6, #0
 80002ec:	4c0c      	ldr	r4, [pc, #48]	; (8000320 <__libc_init_array+0x38>)
 80002ee:	4d0d      	ldr	r5, [pc, #52]	; (8000324 <__libc_init_array+0x3c>)
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	42a6      	cmp	r6, r4
 80002f6:	d109      	bne.n	800030c <__libc_init_array+0x24>
 80002f8:	2600      	movs	r6, #0
 80002fa:	f000 f819 	bl	8000330 <_init>
 80002fe:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <__libc_init_array+0x40>)
 8000300:	4d0a      	ldr	r5, [pc, #40]	; (800032c <__libc_init_array+0x44>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	42a6      	cmp	r6, r4
 8000308:	d105      	bne.n	8000316 <__libc_init_array+0x2e>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	00b3      	lsls	r3, r6, #2
 800030e:	58eb      	ldr	r3, [r5, r3]
 8000310:	4798      	blx	r3
 8000312:	3601      	adds	r6, #1
 8000314:	e7ee      	b.n	80002f4 <__libc_init_array+0xc>
 8000316:	00b3      	lsls	r3, r6, #2
 8000318:	58eb      	ldr	r3, [r5, r3]
 800031a:	4798      	blx	r3
 800031c:	3601      	adds	r6, #1
 800031e:	e7f2      	b.n	8000306 <__libc_init_array+0x1e>
 8000320:	08000348 	.word	0x08000348
 8000324:	08000348 	.word	0x08000348
 8000328:	0800034c 	.word	0x0800034c
 800032c:	08000348 	.word	0x08000348

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

0800033c <_fini>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr
