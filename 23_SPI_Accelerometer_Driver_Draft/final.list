
final.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <__udivsi3>:
 80000c0:	2200      	movs	r2, #0
 80000c2:	0843      	lsrs	r3, r0, #1
 80000c4:	428b      	cmp	r3, r1
 80000c6:	d374      	bcc.n	80001b2 <__udivsi3+0xf2>
 80000c8:	0903      	lsrs	r3, r0, #4
 80000ca:	428b      	cmp	r3, r1
 80000cc:	d35f      	bcc.n	800018e <__udivsi3+0xce>
 80000ce:	0a03      	lsrs	r3, r0, #8
 80000d0:	428b      	cmp	r3, r1
 80000d2:	d344      	bcc.n	800015e <__udivsi3+0x9e>
 80000d4:	0b03      	lsrs	r3, r0, #12
 80000d6:	428b      	cmp	r3, r1
 80000d8:	d328      	bcc.n	800012c <__udivsi3+0x6c>
 80000da:	0c03      	lsrs	r3, r0, #16
 80000dc:	428b      	cmp	r3, r1
 80000de:	d30d      	bcc.n	80000fc <__udivsi3+0x3c>
 80000e0:	22ff      	movs	r2, #255	; 0xff
 80000e2:	0209      	lsls	r1, r1, #8
 80000e4:	ba12      	rev	r2, r2
 80000e6:	0c03      	lsrs	r3, r0, #16
 80000e8:	428b      	cmp	r3, r1
 80000ea:	d302      	bcc.n	80000f2 <__udivsi3+0x32>
 80000ec:	1212      	asrs	r2, r2, #8
 80000ee:	0209      	lsls	r1, r1, #8
 80000f0:	d065      	beq.n	80001be <__udivsi3+0xfe>
 80000f2:	0b03      	lsrs	r3, r0, #12
 80000f4:	428b      	cmp	r3, r1
 80000f6:	d319      	bcc.n	800012c <__udivsi3+0x6c>
 80000f8:	e000      	b.n	80000fc <__udivsi3+0x3c>
 80000fa:	0a09      	lsrs	r1, r1, #8
 80000fc:	0bc3      	lsrs	r3, r0, #15
 80000fe:	428b      	cmp	r3, r1
 8000100:	d301      	bcc.n	8000106 <__udivsi3+0x46>
 8000102:	03cb      	lsls	r3, r1, #15
 8000104:	1ac0      	subs	r0, r0, r3
 8000106:	4152      	adcs	r2, r2
 8000108:	0b83      	lsrs	r3, r0, #14
 800010a:	428b      	cmp	r3, r1
 800010c:	d301      	bcc.n	8000112 <__udivsi3+0x52>
 800010e:	038b      	lsls	r3, r1, #14
 8000110:	1ac0      	subs	r0, r0, r3
 8000112:	4152      	adcs	r2, r2
 8000114:	0b43      	lsrs	r3, r0, #13
 8000116:	428b      	cmp	r3, r1
 8000118:	d301      	bcc.n	800011e <__udivsi3+0x5e>
 800011a:	034b      	lsls	r3, r1, #13
 800011c:	1ac0      	subs	r0, r0, r3
 800011e:	4152      	adcs	r2, r2
 8000120:	0b03      	lsrs	r3, r0, #12
 8000122:	428b      	cmp	r3, r1
 8000124:	d301      	bcc.n	800012a <__udivsi3+0x6a>
 8000126:	030b      	lsls	r3, r1, #12
 8000128:	1ac0      	subs	r0, r0, r3
 800012a:	4152      	adcs	r2, r2
 800012c:	0ac3      	lsrs	r3, r0, #11
 800012e:	428b      	cmp	r3, r1
 8000130:	d301      	bcc.n	8000136 <__udivsi3+0x76>
 8000132:	02cb      	lsls	r3, r1, #11
 8000134:	1ac0      	subs	r0, r0, r3
 8000136:	4152      	adcs	r2, r2
 8000138:	0a83      	lsrs	r3, r0, #10
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x82>
 800013e:	028b      	lsls	r3, r1, #10
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0a43      	lsrs	r3, r0, #9
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x8e>
 800014a:	024b      	lsls	r3, r1, #9
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0a03      	lsrs	r3, r0, #8
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x9a>
 8000156:	020b      	lsls	r3, r1, #8
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	d2cd      	bcs.n	80000fa <__udivsi3+0x3a>
 800015e:	09c3      	lsrs	r3, r0, #7
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__udivsi3+0xa8>
 8000164:	01cb      	lsls	r3, r1, #7
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0983      	lsrs	r3, r0, #6
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__udivsi3+0xb4>
 8000170:	018b      	lsls	r3, r1, #6
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0943      	lsrs	r3, r0, #5
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__udivsi3+0xc0>
 800017c:	014b      	lsls	r3, r1, #5
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0903      	lsrs	r3, r0, #4
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__udivsi3+0xcc>
 8000188:	010b      	lsls	r3, r1, #4
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	08c3      	lsrs	r3, r0, #3
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__udivsi3+0xd8>
 8000194:	00cb      	lsls	r3, r1, #3
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0883      	lsrs	r3, r0, #2
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xe4>
 80001a0:	008b      	lsls	r3, r1, #2
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xf0>
 80001ac:	004b      	lsls	r3, r1, #1
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	1a41      	subs	r1, r0, r1
 80001b4:	d200      	bcs.n	80001b8 <__udivsi3+0xf8>
 80001b6:	4601      	mov	r1, r0
 80001b8:	4152      	adcs	r2, r2
 80001ba:	4610      	mov	r0, r2
 80001bc:	4770      	bx	lr
 80001be:	e7ff      	b.n	80001c0 <__udivsi3+0x100>
 80001c0:	b501      	push	{r0, lr}
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 f806 	bl	80001d4 <__aeabi_idiv0>
 80001c8:	bd02      	pop	{r1, pc}
 80001ca:	46c0      	nop			; (mov r8, r8)

080001cc <__aeabi_uidivmod>:
 80001cc:	2900      	cmp	r1, #0
 80001ce:	d0f7      	beq.n	80001c0 <__udivsi3+0x100>
 80001d0:	e776      	b.n	80000c0 <__udivsi3>
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_idiv0>:
 80001d4:	4770      	bx	lr
 80001d6:	46c0      	nop			; (mov r8, r8)

080001d8 <__aeabi_cfrcmple>:
 80001d8:	4684      	mov	ip, r0
 80001da:	0008      	movs	r0, r1
 80001dc:	4661      	mov	r1, ip
 80001de:	e7ff      	b.n	80001e0 <__aeabi_cfcmpeq>

080001e0 <__aeabi_cfcmpeq>:
 80001e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80001e2:	f001 fce3 	bl	8001bac <__lesf2>
 80001e6:	2800      	cmp	r0, #0
 80001e8:	d401      	bmi.n	80001ee <__aeabi_cfcmpeq+0xe>
 80001ea:	2100      	movs	r1, #0
 80001ec:	42c8      	cmn	r0, r1
 80001ee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080001f0 <__aeabi_fcmpeq>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	f001 fc63 	bl	8001abc <__eqsf2>
 80001f6:	4240      	negs	r0, r0
 80001f8:	3001      	adds	r0, #1
 80001fa:	bd10      	pop	{r4, pc}

080001fc <__aeabi_fcmplt>:
 80001fc:	b510      	push	{r4, lr}
 80001fe:	f001 fcd5 	bl	8001bac <__lesf2>
 8000202:	2800      	cmp	r0, #0
 8000204:	db01      	blt.n	800020a <__aeabi_fcmplt+0xe>
 8000206:	2000      	movs	r0, #0
 8000208:	bd10      	pop	{r4, pc}
 800020a:	2001      	movs	r0, #1
 800020c:	bd10      	pop	{r4, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_fcmple>:
 8000210:	b510      	push	{r4, lr}
 8000212:	f001 fccb 	bl	8001bac <__lesf2>
 8000216:	2800      	cmp	r0, #0
 8000218:	dd01      	ble.n	800021e <__aeabi_fcmple+0xe>
 800021a:	2000      	movs	r0, #0
 800021c:	bd10      	pop	{r4, pc}
 800021e:	2001      	movs	r0, #1
 8000220:	bd10      	pop	{r4, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_fcmpgt>:
 8000224:	b510      	push	{r4, lr}
 8000226:	f001 fc71 	bl	8001b0c <__gesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	dc01      	bgt.n	8000232 <__aeabi_fcmpgt+0xe>
 800022e:	2000      	movs	r0, #0
 8000230:	bd10      	pop	{r4, pc}
 8000232:	2001      	movs	r0, #1
 8000234:	bd10      	pop	{r4, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_fcmpge>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f001 fc67 	bl	8001b0c <__gesf2>
 800023e:	2800      	cmp	r0, #0
 8000240:	da01      	bge.n	8000246 <__aeabi_fcmpge+0xe>
 8000242:	2000      	movs	r0, #0
 8000244:	bd10      	pop	{r4, pc}
 8000246:	2001      	movs	r0, #1
 8000248:	bd10      	pop	{r4, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__clzsi2>:
 800024c:	211c      	movs	r1, #28
 800024e:	2301      	movs	r3, #1
 8000250:	041b      	lsls	r3, r3, #16
 8000252:	4298      	cmp	r0, r3
 8000254:	d301      	bcc.n	800025a <__clzsi2+0xe>
 8000256:	0c00      	lsrs	r0, r0, #16
 8000258:	3910      	subs	r1, #16
 800025a:	0a1b      	lsrs	r3, r3, #8
 800025c:	4298      	cmp	r0, r3
 800025e:	d301      	bcc.n	8000264 <__clzsi2+0x18>
 8000260:	0a00      	lsrs	r0, r0, #8
 8000262:	3908      	subs	r1, #8
 8000264:	091b      	lsrs	r3, r3, #4
 8000266:	4298      	cmp	r0, r3
 8000268:	d301      	bcc.n	800026e <__clzsi2+0x22>
 800026a:	0900      	lsrs	r0, r0, #4
 800026c:	3904      	subs	r1, #4
 800026e:	a202      	add	r2, pc, #8	; (adr r2, 8000278 <__clzsi2+0x2c>)
 8000270:	5c10      	ldrb	r0, [r2, r0]
 8000272:	1840      	adds	r0, r0, r1
 8000274:	4770      	bx	lr
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	02020304 	.word	0x02020304
 800027c:	01010101 	.word	0x01010101
	...

08000288 <__gnu_thumb1_case_shi>:
 8000288:	b403      	push	{r0, r1}
 800028a:	4671      	mov	r1, lr
 800028c:	0849      	lsrs	r1, r1, #1
 800028e:	0040      	lsls	r0, r0, #1
 8000290:	0049      	lsls	r1, r1, #1
 8000292:	5e09      	ldrsh	r1, [r1, r0]
 8000294:	0049      	lsls	r1, r1, #1
 8000296:	448e      	add	lr, r1
 8000298:	bc03      	pop	{r0, r1}
 800029a:	4770      	bx	lr

0800029c <strlen>:
 800029c:	2300      	movs	r3, #0
 800029e:	5cc2      	ldrb	r2, [r0, r3]
 80002a0:	3301      	adds	r3, #1
 80002a2:	2a00      	cmp	r2, #0
 80002a4:	d1fb      	bne.n	800029e <strlen+0x2>
 80002a6:	1e58      	subs	r0, r3, #1
 80002a8:	4770      	bx	lr
	...

080002ac <deregister_tm_clones>:
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <deregister_tm_clones+0x14>)
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <deregister_tm_clones+0x18>)
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4283      	cmp	r3, r0
 80002b4:	d003      	beq.n	80002be <deregister_tm_clones+0x12>
 80002b6:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <deregister_tm_clones+0x1c>)
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d000      	beq.n	80002be <deregister_tm_clones+0x12>
 80002bc:	4798      	blx	r3
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	20000068 	.word	0x20000068
 80002c4:	20000068 	.word	0x20000068
 80002c8:	00000000 	.word	0x00000000

080002cc <register_tm_clones>:
 80002cc:	4806      	ldr	r0, [pc, #24]	; (80002e8 <register_tm_clones+0x1c>)
 80002ce:	4907      	ldr	r1, [pc, #28]	; (80002ec <register_tm_clones+0x20>)
 80002d0:	1a09      	subs	r1, r1, r0
 80002d2:	108b      	asrs	r3, r1, #2
 80002d4:	0fc9      	lsrs	r1, r1, #31
 80002d6:	18c9      	adds	r1, r1, r3
 80002d8:	b510      	push	{r4, lr}
 80002da:	1049      	asrs	r1, r1, #1
 80002dc:	d003      	beq.n	80002e6 <register_tm_clones+0x1a>
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <register_tm_clones+0x24>)
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d000      	beq.n	80002e6 <register_tm_clones+0x1a>
 80002e4:	4798      	blx	r3
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000068 	.word	0x20000068
 80002ec:	20000068 	.word	0x20000068
 80002f0:	00000000 	.word	0x00000000

080002f4 <__do_global_dtors_aux>:
 80002f4:	b510      	push	{r4, lr}
 80002f6:	4c07      	ldr	r4, [pc, #28]	; (8000314 <__do_global_dtors_aux+0x20>)
 80002f8:	7823      	ldrb	r3, [r4, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d109      	bne.n	8000312 <__do_global_dtors_aux+0x1e>
 80002fe:	f7ff ffd5 	bl	80002ac <deregister_tm_clones>
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <__do_global_dtors_aux+0x24>)
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <__do_global_dtors_aux+0x1a>
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <__do_global_dtors_aux+0x28>)
 800030a:	e000      	b.n	800030e <__do_global_dtors_aux+0x1a>
 800030c:	bf00      	nop
 800030e:	2301      	movs	r3, #1
 8000310:	7023      	strb	r3, [r4, #0]
 8000312:	bd10      	pop	{r4, pc}
 8000314:	20000068 	.word	0x20000068
 8000318:	00000000 	.word	0x00000000
 800031c:	08004448 	.word	0x08004448

08000320 <frame_dummy>:
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <frame_dummy+0x18>)
 8000322:	b510      	push	{r4, lr}
 8000324:	2b00      	cmp	r3, #0
 8000326:	d003      	beq.n	8000330 <frame_dummy+0x10>
 8000328:	4904      	ldr	r1, [pc, #16]	; (800033c <frame_dummy+0x1c>)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <frame_dummy+0x20>)
 800032c:	e000      	b.n	8000330 <frame_dummy+0x10>
 800032e:	bf00      	nop
 8000330:	f7ff ffcc 	bl	80002cc <register_tm_clones>
 8000334:	bd10      	pop	{r4, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	00000000 	.word	0x00000000
 800033c:	2000006c 	.word	0x2000006c
 8000340:	08004448 	.word	0x08004448

08000344 <main>:
int16_t xscal, yscal, zscal;          /* scaled values according to selected g range */
int16_t xmax = 0, ymax = 0, zmax = 0; /* debug variables used to know if max range of accelerometer is correct */
int16_t xmin = 0, ymin = 0, zmin = 0; /* debug variables used to know if min range of accelerometer is correct */

int main( void )
{  
 8000344:	b5b0      	push	{r4, r5, r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
   uint8_t spi1_write[ 2 ]; /* SPI data to be written to the ADXL345 */
   uint8_t spi1_read;       /* SPI data read from ADXL345 */
   
   uint8_t read_axes[ 6 ];  /* Values read from X0, X1, Y0, Y1, Z0 and Z1 registers respectively */

   initialise_monitor_handles();
 800034a:	f003 fffd 	bl	8004348 <initialise_monitor_handles>

   /* initialize Systick */
   SysTick_Init();
 800034e:	f000 ffc9 	bl	80012e4 <SysTick_Init>

   /* initialize SPI1 peripheral */
   SPI1_Init();
 8000352:	f001 f8fb 	bl	800154c <SPI1_Init>

   /* read from DEVID (0x00), this should return the device ID 0xE5 */
   spi1_write[ 0 ] = 0x80U; /* 1 = read + 0 = no multiple bit + (0x00) 6 bits devid register */
 8000356:	2414      	movs	r4, #20
 8000358:	193b      	adds	r3, r7, r4
 800035a:	2280      	movs	r2, #128	; 0x80
 800035c:	701a      	strb	r2, [r3, #0]
   SPI1_CS_Enable();
 800035e:	f001 f99c 	bl	800169a <SPI1_CS_Enable>
   SPI1_Write( spi1_write, 1U );
 8000362:	193b      	adds	r3, r7, r4
 8000364:	2101      	movs	r1, #1
 8000366:	0018      	movs	r0, r3
 8000368:	f001 f9a4 	bl	80016b4 <SPI1_Write>
   SPI1_Read( &spi1_read, 1U );
 800036c:	2513      	movs	r5, #19
 800036e:	197b      	adds	r3, r7, r5
 8000370:	2101      	movs	r1, #1
 8000372:	0018      	movs	r0, r3
 8000374:	f001 f9ec 	bl	8001750 <SPI1_Read>
   SPI1_CS_Disable();
 8000378:	f001 f982 	bl	8001680 <SPI1_CS_Disable>

   /* write to DATA_FORMAT (0x31) */
   spi1_write[ 0 ] = 0x31U; /* 0 = write + 0 = no multiple bit + (0x31) 6 bits data_format register */
 800037c:	193b      	adds	r3, r7, r4
 800037e:	2231      	movs	r2, #49	; 0x31
 8000380:	701a      	strb	r2, [r3, #0]
   spi1_write[ 1 ] = 0x00U; /* data to write: NO SELF TEST, SPI 4-Wire, ints active high, right-justified, 2g range */
 8000382:	193b      	adds	r3, r7, r4
 8000384:	2200      	movs	r2, #0
 8000386:	705a      	strb	r2, [r3, #1]
   SPI1_CS_Enable();
 8000388:	f001 f987 	bl	800169a <SPI1_CS_Enable>
   SPI1_Write( spi1_write, 2U );
 800038c:	193b      	adds	r3, r7, r4
 800038e:	2102      	movs	r1, #2
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f98f 	bl	80016b4 <SPI1_Write>
   SPI1_CS_Disable();
 8000396:	f001 f973 	bl	8001680 <SPI1_CS_Disable>

   /* read from DATA_FORMAT (0x31) in order to verify if previous data was correctly written */
   spi1_write[ 0 ] = 0xB1U; /* 1 = read + 0 = no multiple bit + (0x31) 6 bits data_format register */
 800039a:	193b      	adds	r3, r7, r4
 800039c:	22b1      	movs	r2, #177	; 0xb1
 800039e:	701a      	strb	r2, [r3, #0]
   SPI1_CS_Enable();
 80003a0:	f001 f97b 	bl	800169a <SPI1_CS_Enable>
   SPI1_Write( spi1_write, 1U );
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	2101      	movs	r1, #1
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 f983 	bl	80016b4 <SPI1_Write>
   SPI1_Read( &spi1_read, 1U );
 80003ae:	197b      	adds	r3, r7, r5
 80003b0:	2101      	movs	r1, #1
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 f9cc 	bl	8001750 <SPI1_Read>
   SPI1_CS_Disable();
 80003b8:	f001 f962 	bl	8001680 <SPI1_CS_Disable>

   /* set ADXL345 to normal mode by setting measurement bit in POWER_CTL (0x2D) */
   spi1_write[ 0 ] = 0x2DU; /* 0 = write + 0 = no multiple bit + (0x2D) 6 bits power_ctl register */
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	222d      	movs	r2, #45	; 0x2d
 80003c0:	701a      	strb	r2, [r3, #0]
   spi1_write[ 1 ] = 0x08U; /* data to write: link = 0, no auto sleep-mode, measurement mode, sleep = 0 */
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	2208      	movs	r2, #8
 80003c6:	705a      	strb	r2, [r3, #1]
   SPI1_CS_Enable();
 80003c8:	f001 f967 	bl	800169a <SPI1_CS_Enable>
   SPI1_Write( spi1_write, 2U );
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	2102      	movs	r1, #2
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 f96f 	bl	80016b4 <SPI1_Write>
   SPI1_CS_Disable();
 80003d6:	f001 f953 	bl	8001680 <SPI1_CS_Disable>

   /* read from POWER_CTL (0x2D) in order to verify if previous data was correctly written */
   spi1_write[ 0 ] = 0xADU; /* 1 = read + 0 = no multiple bit + (0x2D) 6 bits power_ctl register */
 80003da:	193b      	adds	r3, r7, r4
 80003dc:	22ad      	movs	r2, #173	; 0xad
 80003de:	701a      	strb	r2, [r3, #0]
   SPI1_CS_Enable();
 80003e0:	f001 f95b 	bl	800169a <SPI1_CS_Enable>
   SPI1_Write( spi1_write, 1U );
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	2101      	movs	r1, #1
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 f963 	bl	80016b4 <SPI1_Write>
   SPI1_Read( &spi1_read, 1U );
 80003ee:	197b      	adds	r3, r7, r5
 80003f0:	2101      	movs	r1, #1
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 f9ac 	bl	8001750 <SPI1_Read>
   SPI1_CS_Disable();
 80003f8:	f001 f942 	bl	8001680 <SPI1_CS_Disable>
   /* ************************************ ADXL345 CALIBRATION ************************************************** */

   /* Read from DATAX0 (0x32), DATAX1 (0x33), DATAY0 (0x34), DATAY1 (0x35) in multiple-byte mode
      If a single-byte read operation is performed, the remaining bytes of data for the current FIFO 
      sample are lost. Therefore, all axes of interest should be read in a burst (or multiple-byte) read operation. */
   spi1_write[ 0 ] = 0xF2U; /* 1 = read + 1 = multiple bit + (0x32) 6 bits DATAX0 register */
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	22f2      	movs	r2, #242	; 0xf2
 8000400:	701a      	strb	r2, [r3, #0]
   SPI1_CS_Enable();
 8000402:	f001 f94a 	bl	800169a <SPI1_CS_Enable>
   SPI1_Write( spi1_write, 1U );
 8000406:	193b      	adds	r3, r7, r4
 8000408:	2101      	movs	r1, #1
 800040a:	0018      	movs	r0, r3
 800040c:	f001 f952 	bl	80016b4 <SPI1_Write>
   SPI1_Read( read_axes, 6U ); /* get measured values for X, Y and Z axes in 0g, 0g and +1g respectively */
 8000410:	240c      	movs	r4, #12
 8000412:	193b      	adds	r3, r7, r4
 8000414:	2106      	movs	r1, #6
 8000416:	0018      	movs	r0, r3
 8000418:	f001 f99a 	bl	8001750 <SPI1_Read>
   SPI1_CS_Disable();
 800041c:	f001 f930 	bl	8001680 <SPI1_CS_Disable>

   /* copy read data (X0g, Y0g and Z+1g) into variables */
   x0g = ( read_axes[ 1 ] << 8 ) + read_axes[ 0 ]; /* data read from X registers */
 8000420:	0021      	movs	r1, r4
 8000422:	187b      	adds	r3, r7, r1
 8000424:	785b      	ldrb	r3, [r3, #1]
 8000426:	021b      	lsls	r3, r3, #8
 8000428:	b29b      	uxth	r3, r3
 800042a:	187a      	adds	r2, r7, r1
 800042c:	7812      	ldrb	r2, [r2, #0]
 800042e:	189b      	adds	r3, r3, r2
 8000430:	b29b      	uxth	r3, r3
 8000432:	b21a      	sxth	r2, r3
 8000434:	4bbe      	ldr	r3, [pc, #760]	; (8000730 <main+0x3ec>)
 8000436:	801a      	strh	r2, [r3, #0]
   y0g = ( read_axes[ 3 ] << 8 ) + read_axes[ 2 ]; /* data read from Y registers */
 8000438:	187b      	adds	r3, r7, r1
 800043a:	78db      	ldrb	r3, [r3, #3]
 800043c:	021b      	lsls	r3, r3, #8
 800043e:	b29b      	uxth	r3, r3
 8000440:	187a      	adds	r2, r7, r1
 8000442:	7892      	ldrb	r2, [r2, #2]
 8000444:	189b      	adds	r3, r3, r2
 8000446:	b29b      	uxth	r3, r3
 8000448:	b21a      	sxth	r2, r3
 800044a:	4bba      	ldr	r3, [pc, #744]	; (8000734 <main+0x3f0>)
 800044c:	801a      	strh	r2, [r3, #0]
   z0g = ( ( read_axes[ 5 ] << 8 ) + read_axes[ 4 ] ) - 256; /* data read from Z registers minus ideal value when 1g applied in 2g range mode.
 800044e:	187b      	adds	r3, r7, r1
 8000450:	795b      	ldrb	r3, [r3, #5]
 8000452:	021b      	lsls	r3, r3, #8
 8000454:	b29b      	uxth	r3, r3
 8000456:	187a      	adds	r2, r7, r1
 8000458:	7912      	ldrb	r2, [r2, #4]
 800045a:	189b      	adds	r3, r3, r2
 800045c:	b29b      	uxth	r3, r3
 800045e:	3b01      	subs	r3, #1
 8000460:	3bff      	subs	r3, #255	; 0xff
 8000462:	b29b      	uxth	r3, r3
 8000464:	b21a      	sxth	r2, r3
 8000466:	4bb4      	ldr	r3, [pc, #720]	; (8000738 <main+0x3f4>)
 8000468:	801a      	strh	r2, [r3, #0]

   /* ****************************************** LCD ************************************************* */
   LCD_HandleTypeDef LCD_Handler;

   /* initialize LCD module */
   LCD_Handler.lcdaddress     = LCD_ADDRESS;
 800046a:	003b      	movs	r3, r7
 800046c:	2227      	movs	r2, #39	; 0x27
 800046e:	701a      	strb	r2, [r3, #0]
   LCD_Handler.backlight      = BACKLIGHT_ENABLED;
 8000470:	003b      	movs	r3, r7
 8000472:	2208      	movs	r2, #8
 8000474:	705a      	strb	r2, [r3, #1]
   LCD_Handler.datalenght     = INTERFACE_DATA_4_BIT;
 8000476:	003b      	movs	r3, r7
 8000478:	2200      	movs	r2, #0
 800047a:	729a      	strb	r2, [r3, #10]
   LCD_Handler.displayline    = DISPLAY_2_LINES;
 800047c:	003b      	movs	r3, r7
 800047e:	2208      	movs	r2, #8
 8000480:	725a      	strb	r2, [r3, #9]
   LCD_Handler.font           = DISPLAY_FONT_TYPE_5x8;
 8000482:	003b      	movs	r3, r7
 8000484:	2200      	movs	r2, #0
 8000486:	721a      	strb	r2, [r3, #8]
   LCD_Handler.display        = DISPLAY_ON;
 8000488:	003b      	movs	r3, r7
 800048a:	2204      	movs	r2, #4
 800048c:	719a      	strb	r2, [r3, #6]
   LCD_Handler.cursor         = CURSOR_OFF;
 800048e:	003b      	movs	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	715a      	strb	r2, [r3, #5]
   LCD_Handler.blink          = CURSOR_BLINK_OFF;
 8000494:	003b      	movs	r3, r7
 8000496:	2200      	movs	r2, #0
 8000498:	711a      	strb	r2, [r3, #4]
   LCD_Handler.incrementddram = ID_DDRAM_ADDRESS_RIGHT;
 800049a:	003b      	movs	r3, r7
 800049c:	2202      	movs	r2, #2
 800049e:	70da      	strb	r2, [r3, #3]
   LCD_Handler.shiftdisplay   = SHIFT_DISPLAY_OFF;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2200      	movs	r2, #0
 80004a4:	709a      	strb	r2, [r3, #2]

   /* initialize LCD module */
   LCD_Init( &LCD_Handler ); /******** NOTE: TIM3 delay function not working properly (longer) due to uC is not set at 48MHz.
 80004a6:	003b      	movs	r3, r7
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fd2b 	bl	8000f04 <LCD_Init>
   while( 1 )
   {  
      /* Read from DATAX0 (0x32), DATAX1 (0x33), DATAY0 (0x34), DATAY1 (0x35) in multiple-byte mode
         If a single-byte read operation is performed, the remaining bytes of data for the current FIFO 
         sample are lost. Therefore, all axes of interest should be read in a burst (or multiple-byte) read operation. */
      spi1_write[ 0 ] = 0xF2U; /* 1 = read + 1 = multiple bit + (0x32) 6 bits DATAX0 register */
 80004ae:	2414      	movs	r4, #20
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	22f2      	movs	r2, #242	; 0xf2
 80004b4:	701a      	strb	r2, [r3, #0]
      SPI1_CS_Enable();
 80004b6:	f001 f8f0 	bl	800169a <SPI1_CS_Enable>
      SPI1_Write( spi1_write, 1U );
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	2101      	movs	r1, #1
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 f8f8 	bl	80016b4 <SPI1_Write>
      SPI1_Read( read_axes, 6U );
 80004c4:	240c      	movs	r4, #12
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2106      	movs	r1, #6
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 f940 	bl	8001750 <SPI1_Read>
      SPI1_CS_Disable();
 80004d0:	f001 f8d6 	bl	8001680 <SPI1_CS_Disable>
            
      /* copy current data read into variables (if calibration is done by software ...
         these readings have error due to offset not being applied yet. If offset registers are used then this data should be correct) */
      xmeas = ( read_axes[ 1 ] << 8 ) + read_axes[ 0 ];
 80004d4:	0021      	movs	r1, r4
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	785b      	ldrb	r3, [r3, #1]
 80004da:	021b      	lsls	r3, r3, #8
 80004dc:	b29b      	uxth	r3, r3
 80004de:	187a      	adds	r2, r7, r1
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	189b      	adds	r3, r3, r2
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	b21a      	sxth	r2, r3
 80004e8:	4b94      	ldr	r3, [pc, #592]	; (800073c <main+0x3f8>)
 80004ea:	801a      	strh	r2, [r3, #0]
      ymeas = ( read_axes[ 3 ] << 8 ) + read_axes[ 2 ];
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	78db      	ldrb	r3, [r3, #3]
 80004f0:	021b      	lsls	r3, r3, #8
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	187a      	adds	r2, r7, r1
 80004f6:	7892      	ldrb	r2, [r2, #2]
 80004f8:	189b      	adds	r3, r3, r2
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	b21a      	sxth	r2, r3
 80004fe:	4b90      	ldr	r3, [pc, #576]	; (8000740 <main+0x3fc>)
 8000500:	801a      	strh	r2, [r3, #0]
      zmeas = ( read_axes[ 5 ] << 8 ) + read_axes[ 4 ];
 8000502:	187b      	adds	r3, r7, r1
 8000504:	795b      	ldrb	r3, [r3, #5]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	b29b      	uxth	r3, r3
 800050a:	187a      	adds	r2, r7, r1
 800050c:	7912      	ldrb	r2, [r2, #4]
 800050e:	189b      	adds	r3, r3, r2
 8000510:	b29b      	uxth	r3, r3
 8000512:	b21a      	sxth	r2, r3
 8000514:	4b8b      	ldr	r3, [pc, #556]	; (8000744 <main+0x400>)
 8000516:	801a      	strh	r2, [r3, #0]
            
      #ifdef CALIB_BY_SOFTWARE
      /* apply offset by software to previous data read (this lecture should be correct after offset being applied) */
      xactual = xmeas - x0g;
 8000518:	4b88      	ldr	r3, [pc, #544]	; (800073c <main+0x3f8>)
 800051a:	2200      	movs	r2, #0
 800051c:	5e9b      	ldrsh	r3, [r3, r2]
 800051e:	b29a      	uxth	r2, r3
 8000520:	4b83      	ldr	r3, [pc, #524]	; (8000730 <main+0x3ec>)
 8000522:	2100      	movs	r1, #0
 8000524:	5e5b      	ldrsh	r3, [r3, r1]
 8000526:	b29b      	uxth	r3, r3
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	b29b      	uxth	r3, r3
 800052c:	b21a      	sxth	r2, r3
 800052e:	4b86      	ldr	r3, [pc, #536]	; (8000748 <main+0x404>)
 8000530:	801a      	strh	r2, [r3, #0]
      yactual = ymeas - y0g;
 8000532:	4b83      	ldr	r3, [pc, #524]	; (8000740 <main+0x3fc>)
 8000534:	2200      	movs	r2, #0
 8000536:	5e9b      	ldrsh	r3, [r3, r2]
 8000538:	b29a      	uxth	r2, r3
 800053a:	4b7e      	ldr	r3, [pc, #504]	; (8000734 <main+0x3f0>)
 800053c:	2100      	movs	r1, #0
 800053e:	5e5b      	ldrsh	r3, [r3, r1]
 8000540:	b29b      	uxth	r3, r3
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	b29b      	uxth	r3, r3
 8000546:	b21a      	sxth	r2, r3
 8000548:	4b80      	ldr	r3, [pc, #512]	; (800074c <main+0x408>)
 800054a:	801a      	strh	r2, [r3, #0]
      zactual = zmeas - z0g;
 800054c:	4b7d      	ldr	r3, [pc, #500]	; (8000744 <main+0x400>)
 800054e:	2200      	movs	r2, #0
 8000550:	5e9b      	ldrsh	r3, [r3, r2]
 8000552:	b29a      	uxth	r2, r3
 8000554:	4b78      	ldr	r3, [pc, #480]	; (8000738 <main+0x3f4>)
 8000556:	2100      	movs	r1, #0
 8000558:	5e5b      	ldrsh	r3, [r3, r1]
 800055a:	b29b      	uxth	r3, r3
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	b29b      	uxth	r3, r3
 8000560:	b21a      	sxth	r2, r3
 8000562:	4b7b      	ldr	r3, [pc, #492]	; (8000750 <main+0x40c>)
 8000564:	801a      	strh	r2, [r3, #0]
      /* scale data for 2g range (see range bits in DATA_FORMAT), this gives us the data in mg */
      //xscal = xactual * 0.0039; /* 0.0039 is the typ. scale factor for the 2g range */
      //yscal = yactual * 0.0039; /* 0.0039 is the typ. scale factor for the 2g range */
      //zscal = zactual * 0.0039; /* 0.0039 is the typ. scale factor for the 2g range */
      /* using ints instead of floats for now, due to printf does not print floating point values (ST linker script alignment issue?) */
      xscal = xactual * 39;
 8000566:	4b78      	ldr	r3, [pc, #480]	; (8000748 <main+0x404>)
 8000568:	2200      	movs	r2, #0
 800056a:	5e9b      	ldrsh	r3, [r3, r2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	1c1a      	adds	r2, r3, #0
 8000570:	0092      	lsls	r2, r2, #2
 8000572:	18d2      	adds	r2, r2, r3
 8000574:	00d2      	lsls	r2, r2, #3
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	b29b      	uxth	r3, r3
 800057a:	b21a      	sxth	r2, r3
 800057c:	4b75      	ldr	r3, [pc, #468]	; (8000754 <main+0x410>)
 800057e:	801a      	strh	r2, [r3, #0]
      yscal = yactual * 39;
 8000580:	4b72      	ldr	r3, [pc, #456]	; (800074c <main+0x408>)
 8000582:	2200      	movs	r2, #0
 8000584:	5e9b      	ldrsh	r3, [r3, r2]
 8000586:	b29b      	uxth	r3, r3
 8000588:	1c1a      	adds	r2, r3, #0
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	18d2      	adds	r2, r2, r3
 800058e:	00d2      	lsls	r2, r2, #3
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	b29b      	uxth	r3, r3
 8000594:	b21a      	sxth	r2, r3
 8000596:	4b70      	ldr	r3, [pc, #448]	; (8000758 <main+0x414>)
 8000598:	801a      	strh	r2, [r3, #0]
      zscal = zactual * 39;
 800059a:	4b6d      	ldr	r3, [pc, #436]	; (8000750 <main+0x40c>)
 800059c:	2200      	movs	r2, #0
 800059e:	5e9b      	ldrsh	r3, [r3, r2]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	1c1a      	adds	r2, r3, #0
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	18d2      	adds	r2, r2, r3
 80005a8:	00d2      	lsls	r2, r2, #3
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	4b6a      	ldr	r3, [pc, #424]	; (800075c <main+0x418>)
 80005b2:	801a      	strh	r2, [r3, #0]
      yscal = ymeas * 39;
      zscal = zmeas * 39;
      #endif

      /* store min and max values for each axis (this helps to verify if the range of the data is OK) */
      if ( xscal > xmax )
 80005b4:	4b67      	ldr	r3, [pc, #412]	; (8000754 <main+0x410>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	5e9a      	ldrsh	r2, [r3, r2]
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <main+0x41c>)
 80005bc:	2100      	movs	r1, #0
 80005be:	5e5b      	ldrsh	r3, [r3, r1]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dd04      	ble.n	80005ce <main+0x28a>
      {
         xmax = xscal;
 80005c4:	4b63      	ldr	r3, [pc, #396]	; (8000754 <main+0x410>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	5e9a      	ldrsh	r2, [r3, r2]
 80005ca:	4b65      	ldr	r3, [pc, #404]	; (8000760 <main+0x41c>)
 80005cc:	801a      	strh	r2, [r3, #0]
      }

      if ( xscal < xmin )
 80005ce:	4b61      	ldr	r3, [pc, #388]	; (8000754 <main+0x410>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	5e9a      	ldrsh	r2, [r3, r2]
 80005d4:	4b63      	ldr	r3, [pc, #396]	; (8000764 <main+0x420>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	5e5b      	ldrsh	r3, [r3, r1]
 80005da:	429a      	cmp	r2, r3
 80005dc:	da04      	bge.n	80005e8 <main+0x2a4>
      {
         xmin = xscal;
 80005de:	4b5d      	ldr	r3, [pc, #372]	; (8000754 <main+0x410>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	5e9a      	ldrsh	r2, [r3, r2]
 80005e4:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <main+0x420>)
 80005e6:	801a      	strh	r2, [r3, #0]
      }

      if ( yscal > ymax )
 80005e8:	4b5b      	ldr	r3, [pc, #364]	; (8000758 <main+0x414>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	5e9a      	ldrsh	r2, [r3, r2]
 80005ee:	4b5e      	ldr	r3, [pc, #376]	; (8000768 <main+0x424>)
 80005f0:	2100      	movs	r1, #0
 80005f2:	5e5b      	ldrsh	r3, [r3, r1]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dd04      	ble.n	8000602 <main+0x2be>
      {
         ymax = yscal;
 80005f8:	4b57      	ldr	r3, [pc, #348]	; (8000758 <main+0x414>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	5e9a      	ldrsh	r2, [r3, r2]
 80005fe:	4b5a      	ldr	r3, [pc, #360]	; (8000768 <main+0x424>)
 8000600:	801a      	strh	r2, [r3, #0]
      }

      if ( yscal < ymin )
 8000602:	4b55      	ldr	r3, [pc, #340]	; (8000758 <main+0x414>)
 8000604:	2200      	movs	r2, #0
 8000606:	5e9a      	ldrsh	r2, [r3, r2]
 8000608:	4b58      	ldr	r3, [pc, #352]	; (800076c <main+0x428>)
 800060a:	2100      	movs	r1, #0
 800060c:	5e5b      	ldrsh	r3, [r3, r1]
 800060e:	429a      	cmp	r2, r3
 8000610:	da04      	bge.n	800061c <main+0x2d8>
      {
         ymin = yscal;
 8000612:	4b51      	ldr	r3, [pc, #324]	; (8000758 <main+0x414>)
 8000614:	2200      	movs	r2, #0
 8000616:	5e9a      	ldrsh	r2, [r3, r2]
 8000618:	4b54      	ldr	r3, [pc, #336]	; (800076c <main+0x428>)
 800061a:	801a      	strh	r2, [r3, #0]
      }

      if ( zscal > zmax )
 800061c:	4b4f      	ldr	r3, [pc, #316]	; (800075c <main+0x418>)
 800061e:	2200      	movs	r2, #0
 8000620:	5e9a      	ldrsh	r2, [r3, r2]
 8000622:	4b53      	ldr	r3, [pc, #332]	; (8000770 <main+0x42c>)
 8000624:	2100      	movs	r1, #0
 8000626:	5e5b      	ldrsh	r3, [r3, r1]
 8000628:	429a      	cmp	r2, r3
 800062a:	dd04      	ble.n	8000636 <main+0x2f2>
      {
         zmax = zscal;
 800062c:	4b4b      	ldr	r3, [pc, #300]	; (800075c <main+0x418>)
 800062e:	2200      	movs	r2, #0
 8000630:	5e9a      	ldrsh	r2, [r3, r2]
 8000632:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <main+0x42c>)
 8000634:	801a      	strh	r2, [r3, #0]
      }

      if ( zscal < zmin )
 8000636:	4b49      	ldr	r3, [pc, #292]	; (800075c <main+0x418>)
 8000638:	2200      	movs	r2, #0
 800063a:	5e9a      	ldrsh	r2, [r3, r2]
 800063c:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <main+0x430>)
 800063e:	2100      	movs	r1, #0
 8000640:	5e5b      	ldrsh	r3, [r3, r1]
 8000642:	429a      	cmp	r2, r3
 8000644:	da04      	bge.n	8000650 <main+0x30c>
      {
         zmin = zscal;
 8000646:	4b45      	ldr	r3, [pc, #276]	; (800075c <main+0x418>)
 8000648:	2200      	movs	r2, #0
 800064a:	5e9a      	ldrsh	r2, [r3, r2]
 800064c:	4b49      	ldr	r3, [pc, #292]	; (8000774 <main+0x430>)
 800064e:	801a      	strh	r2, [r3, #0]

      /* NOTE: under normal conditions (i.e. acceleration applied does not exceed the 1g gravity force) 
         the max and minimum values for X, Y and Z are within +/- 1g */

      /* debug purposes */
      printf( "Xact = %d\n", xscal );
 8000650:	4b40      	ldr	r3, [pc, #256]	; (8000754 <main+0x410>)
 8000652:	2200      	movs	r2, #0
 8000654:	5e9b      	ldrsh	r3, [r3, r2]
 8000656:	001a      	movs	r2, r3
 8000658:	4b47      	ldr	r3, [pc, #284]	; (8000778 <main+0x434>)
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f002 fd8f 	bl	8003180 <iprintf>
      printf( "Yact = %d\n", yscal );
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <main+0x414>)
 8000664:	2200      	movs	r2, #0
 8000666:	5e9b      	ldrsh	r3, [r3, r2]
 8000668:	001a      	movs	r2, r3
 800066a:	4b44      	ldr	r3, [pc, #272]	; (800077c <main+0x438>)
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f002 fd86 	bl	8003180 <iprintf>
      printf( "Zact = %d\n\n", zscal );
 8000674:	4b39      	ldr	r3, [pc, #228]	; (800075c <main+0x418>)
 8000676:	2200      	movs	r2, #0
 8000678:	5e9b      	ldrsh	r3, [r3, r2]
 800067a:	001a      	movs	r2, r3
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <main+0x43c>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f002 fd7d 	bl	8003180 <iprintf>
           type in relation to printf and semihosting)
         - Actually the data for the 2g range has to be scaled by a factor of 0.0039 mg (that's why float was used at first)
         - Then, lcd_print_all_axes_info receives the floating values for each axis
         - Because int data type is used (for semihosting purposes) instead of floating (real data interpretation), the correct float
           data is obtained by dividing and multiplying accordingly as originally intended */
      lcd_print_all_axes_info( &LCD_Handler, ( xscal / 39.0 ) * 0.0039, ( yscal / 39.0 ) * 0.0039, ( zscal / 39.0 ) * 0.0039 );
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <main+0x410>)
 8000688:	2200      	movs	r2, #0
 800068a:	5e9b      	ldrsh	r3, [r3, r2]
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fbf7 	bl	8002e80 <__aeabi_i2d>
 8000692:	2200      	movs	r2, #0
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <main+0x440>)
 8000696:	f001 fe13 	bl	80022c0 <__aeabi_ddiv>
 800069a:	0002      	movs	r2, r0
 800069c:	000b      	movs	r3, r1
 800069e:	0010      	movs	r0, r2
 80006a0:	0019      	movs	r1, r3
 80006a2:	4a39      	ldr	r2, [pc, #228]	; (8000788 <main+0x444>)
 80006a4:	4b39      	ldr	r3, [pc, #228]	; (800078c <main+0x448>)
 80006a6:	f002 f927 	bl	80028f8 <__aeabi_dmul>
 80006aa:	0002      	movs	r2, r0
 80006ac:	000b      	movs	r3, r1
 80006ae:	0010      	movs	r0, r2
 80006b0:	0019      	movs	r1, r3
 80006b2:	f002 fc15 	bl	8002ee0 <__aeabi_d2f>
 80006b6:	1c04      	adds	r4, r0, #0
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <main+0x414>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	5e9b      	ldrsh	r3, [r3, r2]
 80006be:	0018      	movs	r0, r3
 80006c0:	f002 fbde 	bl	8002e80 <__aeabi_i2d>
 80006c4:	2200      	movs	r2, #0
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <main+0x440>)
 80006c8:	f001 fdfa 	bl	80022c0 <__aeabi_ddiv>
 80006cc:	0002      	movs	r2, r0
 80006ce:	000b      	movs	r3, r1
 80006d0:	0010      	movs	r0, r2
 80006d2:	0019      	movs	r1, r3
 80006d4:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <main+0x444>)
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <main+0x448>)
 80006d8:	f002 f90e 	bl	80028f8 <__aeabi_dmul>
 80006dc:	0002      	movs	r2, r0
 80006de:	000b      	movs	r3, r1
 80006e0:	0010      	movs	r0, r2
 80006e2:	0019      	movs	r1, r3
 80006e4:	f002 fbfc 	bl	8002ee0 <__aeabi_d2f>
 80006e8:	1c05      	adds	r5, r0, #0
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <main+0x418>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	5e9b      	ldrsh	r3, [r3, r2]
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 fbc5 	bl	8002e80 <__aeabi_i2d>
 80006f6:	2200      	movs	r2, #0
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <main+0x440>)
 80006fa:	f001 fde1 	bl	80022c0 <__aeabi_ddiv>
 80006fe:	0002      	movs	r2, r0
 8000700:	000b      	movs	r3, r1
 8000702:	0010      	movs	r0, r2
 8000704:	0019      	movs	r1, r3
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <main+0x444>)
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <main+0x448>)
 800070a:	f002 f8f5 	bl	80028f8 <__aeabi_dmul>
 800070e:	0002      	movs	r2, r0
 8000710:	000b      	movs	r3, r1
 8000712:	0010      	movs	r0, r2
 8000714:	0019      	movs	r1, r3
 8000716:	f002 fbe3 	bl	8002ee0 <__aeabi_d2f>
 800071a:	1c03      	adds	r3, r0, #0
 800071c:	0038      	movs	r0, r7
 800071e:	1c2a      	adds	r2, r5, #0
 8000720:	1c21      	adds	r1, r4, #0
 8000722:	f000 f9b1 	bl	8000a88 <lcd_print_all_axes_info>

      /* wait 100 ms */
      Systick_Delay_Ms( 100 );
 8000726:	2064      	movs	r0, #100	; 0x64
 8000728:	f000 fdf6 	bl	8001318 <Systick_Delay_Ms>
      spi1_write[ 0 ] = 0xF2U; /* 1 = read + 1 = multiple bit + (0x32) 6 bits DATAX0 register */
 800072c:	e6bf      	b.n	80004ae <main+0x16a>
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	20000084 	.word	0x20000084
 8000734:	20000086 	.word	0x20000086
 8000738:	20000088 	.word	0x20000088
 800073c:	2000008a 	.word	0x2000008a
 8000740:	2000008c 	.word	0x2000008c
 8000744:	2000008e 	.word	0x2000008e
 8000748:	20000090 	.word	0x20000090
 800074c:	20000092 	.word	0x20000092
 8000750:	20000094 	.word	0x20000094
 8000754:	20000096 	.word	0x20000096
 8000758:	20000098 	.word	0x20000098
 800075c:	2000009a 	.word	0x2000009a
 8000760:	2000009c 	.word	0x2000009c
 8000764:	200000a2 	.word	0x200000a2
 8000768:	2000009e 	.word	0x2000009e
 800076c:	200000a4 	.word	0x200000a4
 8000770:	200000a0 	.word	0x200000a0
 8000774:	200000a6 	.word	0x200000a6
 8000778:	08004460 	.word	0x08004460
 800077c:	0800446c 	.word	0x0800446c
 8000780:	08004478 	.word	0x08004478
 8000784:	40438000 	.word	0x40438000
 8000788:	8e8a71de 	.word	0x8e8a71de
 800078c:	3f6ff2e4 	.word	0x3f6ff2e4

08000790 <uint16_t_to_string>:

   return 0U;
}

uint8_t *uint16_t_to_string( uint16_t value, uint8_t *dest_str )
{
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	0002      	movs	r2, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	1dbb      	adds	r3, r7, #6
 800079c:	801a      	strh	r2, [r3, #0]
   uint8_t item = 0U;
 800079e:	210f      	movs	r1, #15
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
    
   /* store the '0' character when decimal value is 0 */
   if ( value == 0U )
 80007a6:	1dbb      	adds	r3, r7, #6
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d12a      	bne.n	8000804 <uint16_t_to_string+0x74>
   {
      dest_str[ item ] = '0';
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	701a      	strb	r2, [r3, #0]
        
      item++;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	3201      	adds	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
   }
    
   /* split the digits of the integer and store each into the string.
      NOTE: string is stored backwards */
   while ( value > 0U )
 80007c4:	e01e      	b.n	8000804 <uint16_t_to_string+0x74>
   {
      dest_str[ item ] = ( value % 10 ) + '0';
 80007c6:	1dbb      	adds	r3, r7, #6
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	210a      	movs	r1, #10
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff fcfd 	bl	80001cc <__aeabi_uidivmod>
 80007d2:	000b      	movs	r3, r1
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	250f      	movs	r5, #15
 80007da:	197b      	adds	r3, r7, r5
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	18cb      	adds	r3, r1, r3
 80007e2:	3230      	adds	r2, #48	; 0x30
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	701a      	strb	r2, [r3, #0]
      value /= 10U;
 80007e8:	1dbc      	adds	r4, r7, #6
 80007ea:	1dbb      	adds	r3, r7, #6
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	210a      	movs	r1, #10
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff fc65 	bl	80000c0 <__udivsi3>
 80007f6:	0003      	movs	r3, r0
 80007f8:	8023      	strh	r3, [r4, #0]
        
      item++;
 80007fa:	197b      	adds	r3, r7, r5
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	197b      	adds	r3, r7, r5
 8000800:	3201      	adds	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
   while ( value > 0U )
 8000804:	1dbb      	adds	r3, r7, #6
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1dc      	bne.n	80007c6 <uint16_t_to_string+0x36>
   }

   /* add termination null character '\0' */
   dest_str[ item ] = '\0';
 800080c:	230f      	movs	r3, #15
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	18d3      	adds	r3, r2, r3
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
    
   ( void ) reverse_string( dest_str );
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	0018      	movs	r0, r3
 800081e:	f000 f805 	bl	800082c <reverse_string>
    
   return dest_str;
 8000822:	683b      	ldr	r3, [r7, #0]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b004      	add	sp, #16
 800082a:	bdb0      	pop	{r4, r5, r7, pc}

0800082c <reverse_string>:

uint8_t *reverse_string( uint8_t *src_string )
{
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
   uint8_t start = 0U;
 8000834:	210f      	movs	r1, #15
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
   uint8_t end;
   uint8_t temp;
    
   /* find the end of the string */
   for ( end = start; src_string[ end ] != '\0'; end++ )
 800083c:	230e      	movs	r3, #14
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	187a      	adds	r2, r7, r1
 8000842:	7812      	ldrb	r2, [r2, #0]
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	e005      	b.n	8000854 <reverse_string+0x28>
 8000848:	210e      	movs	r1, #14
 800084a:	187b      	adds	r3, r7, r1
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	187b      	adds	r3, r7, r1
 8000850:	3201      	adds	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	210e      	movs	r1, #14
 8000856:	187b      	adds	r3, r7, r1
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	18d3      	adds	r3, r2, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f1      	bne.n	8000848 <reverse_string+0x1c>
   {
      /* do nothing */ 
   }
    
   end--;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	781a      	ldrb	r2, [r3, #0]
 8000868:	187b      	adds	r3, r7, r1
 800086a:	3a01      	subs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
    
   /* switch start and end elements successively */
   while ( start < end )
 800086e:	e025      	b.n	80008bc <reverse_string+0x90>
   {
      temp = src_string[ start ];
 8000870:	200f      	movs	r0, #15
 8000872:	183b      	adds	r3, r7, r0
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	18d2      	adds	r2, r2, r3
 800087a:	250d      	movs	r5, #13
 800087c:	197b      	adds	r3, r7, r5
 800087e:	7812      	ldrb	r2, [r2, #0]
 8000880:	701a      	strb	r2, [r3, #0]
        
      src_string[ start ] = src_string[ end ];
 8000882:	240e      	movs	r4, #14
 8000884:	193b      	adds	r3, r7, r4
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	18d2      	adds	r2, r2, r3
 800088c:	183b      	adds	r3, r7, r0
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	18cb      	adds	r3, r1, r3
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	701a      	strb	r2, [r3, #0]
      src_string[ end ] = temp;
 8000898:	0021      	movs	r1, r4
 800089a:	187b      	adds	r3, r7, r1
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	18d3      	adds	r3, r2, r3
 80008a2:	197a      	adds	r2, r7, r5
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	701a      	strb	r2, [r3, #0]
        
      start++;
 80008a8:	183b      	adds	r3, r7, r0
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	183b      	adds	r3, r7, r0
 80008ae:	3201      	adds	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
      end--;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	3a01      	subs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
   while ( start < end )
 80008bc:	230f      	movs	r3, #15
 80008be:	18fa      	adds	r2, r7, r3
 80008c0:	230e      	movs	r3, #14
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d3d1      	bcc.n	8000870 <reverse_string+0x44>
   }
    
   return src_string;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080008d8 <lcd_print_one_axis_info>:

void lcd_print_one_axis_info( LCD_HandleTypeDef *hlcd, float axis )
{
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
   uint8_t str[ 4 ];
   int8_t integer;
   int16_t fractional;
   uint8_t extradigs = 3U;
 80008e2:	230e      	movs	r3, #14
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	2203      	movs	r2, #3
 80008e8:	701a      	strb	r2, [r3, #0]

   /* get the integer part of the x axis data */
   integer = ( int8_t ) axis;
 80008ea:	250f      	movs	r5, #15
 80008ec:	197c      	adds	r4, r7, r5
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f001 fc7a 	bl	80021e8 <__aeabi_f2iz>
 80008f4:	0003      	movs	r3, r0
 80008f6:	7023      	strb	r3, [r4, #0]

   /* if x axis value is negative */
   if ( axis < 0 )
 80008f8:	2100      	movs	r1, #0
 80008fa:	6838      	ldr	r0, [r7, #0]
 80008fc:	f7ff fc7e 	bl	80001fc <__aeabi_fcmplt>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d00c      	beq.n	800091e <lcd_print_one_axis_info+0x46>
   {
      /* convert the integer part of the x axis data to its unsiged form 
         by reverting 2's and 1's complement */
      integer = ~( integer - 1 );
 8000904:	0029      	movs	r1, r5
 8000906:	187b      	adds	r3, r7, r1
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	425b      	negs	r3, r3
 800090c:	b2da      	uxtb	r2, r3
 800090e:	187b      	adds	r3, r7, r1
 8000910:	701a      	strb	r2, [r3, #0]

      /* print negative sign */
      LCD_API_Print_Character( hlcd, '-' );
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	212d      	movs	r1, #45	; 0x2d
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fca2 	bl	8001260 <LCD_API_Print_Character>
 800091c:	e004      	b.n	8000928 <lcd_print_one_axis_info+0x50>
   }
   /* if x axis value is negative */
   else
   {
      /* print positive sign */
      LCD_API_Print_Character( hlcd, '+' );
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	212b      	movs	r1, #43	; 0x2b
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fc9c 	bl	8001260 <LCD_API_Print_Character>
   }

   /* convert the integer part of the x axis into a string */
   ( void ) uint16_t_to_string( integer, str );
 8000928:	240f      	movs	r4, #15
 800092a:	193b      	adds	r3, r7, r4
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b25b      	sxtb	r3, r3
 8000930:	b29b      	uxth	r3, r3
 8000932:	2208      	movs	r2, #8
 8000934:	18ba      	adds	r2, r7, r2
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ff29 	bl	8000790 <uint16_t_to_string>

   /* if integer part has only 1 digit */
   if ( ( integer / 10 ) < 1 )
 800093e:	193b      	adds	r3, r7, r4
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b25b      	sxtb	r3, r3
 8000944:	2b09      	cmp	r3, #9
 8000946:	dc04      	bgt.n	8000952 <lcd_print_one_axis_info+0x7a>
   {
      /* append a '0' character to the left */
      LCD_API_Print_Character( hlcd, '0' );
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2130      	movs	r1, #48	; 0x30
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fc87 	bl	8001260 <LCD_API_Print_Character>
   }

   /* print the integer part of the x axis */
   LCD_API_Print_String( hlcd, str, 2 );
 8000952:	2308      	movs	r3, #8
 8000954:	18f9      	adds	r1, r7, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2202      	movs	r2, #2
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fc9a 	bl	8001294 <LCD_API_Print_String>

   /* print decimal point character */
   LCD_API_Print_Character( hlcd, '.' );
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	212e      	movs	r1, #46	; 0x2e
 8000964:	0018      	movs	r0, r3
 8000966:	f000 fc7b 	bl	8001260 <LCD_API_Print_Character>

   /* get the fractional part of the x axis data by subtracting the integer portion */
   axis = ( axis >= 0 ) ? ( axis - integer ) : ( axis + integer );
 800096a:	2100      	movs	r1, #0
 800096c:	6838      	ldr	r0, [r7, #0]
 800096e:	f7ff fc63 	bl	8000238 <__aeabi_fcmpge>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d00d      	beq.n	8000992 <lcd_print_one_axis_info+0xba>
 8000976:	230f      	movs	r3, #15
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b25b      	sxtb	r3, r3
 800097e:	0018      	movs	r0, r3
 8000980:	f001 fc52 	bl	8002228 <__aeabi_i2f>
 8000984:	1c03      	adds	r3, r0, #0
 8000986:	1c19      	adds	r1, r3, #0
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f001 fa9b 	bl	8001ec4 <__aeabi_fsub>
 800098e:	1c03      	adds	r3, r0, #0
 8000990:	e00c      	b.n	80009ac <lcd_print_one_axis_info+0xd4>
 8000992:	230f      	movs	r3, #15
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	0018      	movs	r0, r3
 800099c:	f001 fc44 	bl	8002228 <__aeabi_i2f>
 80009a0:	1c03      	adds	r3, r0, #0
 80009a2:	6839      	ldr	r1, [r7, #0]
 80009a4:	1c18      	adds	r0, r3, #0
 80009a6:	f000 ff07 	bl	80017b8 <__aeabi_fadd>
 80009aa:	1c03      	adds	r3, r0, #0
 80009ac:	603b      	str	r3, [r7, #0]

   /* convert the fractional part of the x axis data to unsigned integer format,
      4 digits to the right of the decimal point are obtained when multiplying by 10000 */
   fractional = ( axis >= 0 ) ? ( axis * 10000 ) : ( axis * -10000 );
 80009ae:	2100      	movs	r1, #0
 80009b0:	6838      	ldr	r0, [r7, #0]
 80009b2:	f7ff fc41 	bl	8000238 <__aeabi_fcmpge>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d00a      	beq.n	80009d0 <lcd_print_one_axis_info+0xf8>
 80009ba:	492f      	ldr	r1, [pc, #188]	; (8000a78 <lcd_print_one_axis_info+0x1a0>)
 80009bc:	6838      	ldr	r0, [r7, #0]
 80009be:	f001 f943 	bl	8001c48 <__aeabi_fmul>
 80009c2:	1c03      	adds	r3, r0, #0
 80009c4:	1c18      	adds	r0, r3, #0
 80009c6:	f001 fc0f 	bl	80021e8 <__aeabi_f2iz>
 80009ca:	0003      	movs	r3, r0
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	e009      	b.n	80009e4 <lcd_print_one_axis_info+0x10c>
 80009d0:	492a      	ldr	r1, [pc, #168]	; (8000a7c <lcd_print_one_axis_info+0x1a4>)
 80009d2:	6838      	ldr	r0, [r7, #0]
 80009d4:	f001 f938 	bl	8001c48 <__aeabi_fmul>
 80009d8:	1c03      	adds	r3, r0, #0
 80009da:	1c18      	adds	r0, r3, #0
 80009dc:	f001 fc04 	bl	80021e8 <__aeabi_f2iz>
 80009e0:	0003      	movs	r3, r0
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	210c      	movs	r1, #12
 80009e6:	187a      	adds	r2, r7, r1
 80009e8:	8013      	strh	r3, [r2, #0]

   /* obtain the number of digits in the fractional portion, this indicates the number
      of zeros that must be introduced to the right of the decimal point */
   if ( ( fractional / 10 ) < 1 )
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	5e9b      	ldrsh	r3, [r3, r2]
 80009f0:	2b09      	cmp	r3, #9
 80009f2:	dc0a      	bgt.n	8000a0a <lcd_print_one_axis_info+0x132>
   {
      LCD_API_Print_String( hlcd, ( uint8_t* ) "000", 3 );
 80009f4:	4922      	ldr	r1, [pc, #136]	; (8000a80 <lcd_print_one_axis_info+0x1a8>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2203      	movs	r2, #3
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fc4a 	bl	8001294 <LCD_API_Print_String>

      extradigs = 0U;
 8000a00:	230e      	movs	r3, #14
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	e021      	b.n	8000a4e <lcd_print_one_axis_info+0x176>
   }
   else if ( ( fractional / 100 ) < 1 )
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	2200      	movs	r2, #0
 8000a10:	5e9b      	ldrsh	r3, [r3, r2]
 8000a12:	2b63      	cmp	r3, #99	; 0x63
 8000a14:	dc0a      	bgt.n	8000a2c <lcd_print_one_axis_info+0x154>
   {
      LCD_API_Print_String( hlcd, ( uint8_t* ) "00", 2 );
 8000a16:	491b      	ldr	r1, [pc, #108]	; (8000a84 <lcd_print_one_axis_info+0x1ac>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fc39 	bl	8001294 <LCD_API_Print_String>

      /* indicate number of extra digits to print to the right of the decimal point,
         this does not include the 2 previous zeros appended, i.e: 3 digs in total */
      extradigs = 1U;
 8000a22:	230e      	movs	r3, #14
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e010      	b.n	8000a4e <lcd_print_one_axis_info+0x176>
   }
   else if ( ( fractional / 1000 ) < 1 )
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2200      	movs	r2, #0
 8000a32:	5e9a      	ldrsh	r2, [r3, r2]
 8000a34:	23fa      	movs	r3, #250	; 0xfa
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	da08      	bge.n	8000a4e <lcd_print_one_axis_info+0x176>
   {
      LCD_API_Print_Character( hlcd, '0' );
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2130      	movs	r1, #48	; 0x30
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fc0d 	bl	8001260 <LCD_API_Print_Character>
      
      /* indicate number of extra digits to print to the right of the decimal point,
         this does not include the previous zero appended, i.e: 3 digs in total */
      extradigs = 2U;
 8000a46:	230e      	movs	r3, #14
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	701a      	strb	r2, [r3, #0]
   }

   /* convert the fractional part to a string */
   ( void ) uint16_t_to_string( fractional, str );
 8000a4e:	230c      	movs	r3, #12
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	2408      	movs	r4, #8
 8000a56:	193a      	adds	r2, r7, r4
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff fe98 	bl	8000790 <uint16_t_to_string>

   /* print the fractional part */
   LCD_API_Print_String( hlcd, str, extradigs );
 8000a60:	230e      	movs	r3, #14
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	1939      	adds	r1, r7, r4
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fc12 	bl	8001294 <LCD_API_Print_String>
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b004      	add	sp, #16
 8000a76:	bdb0      	pop	{r4, r5, r7, pc}
 8000a78:	461c4000 	.word	0x461c4000
 8000a7c:	c61c4000 	.word	0xc61c4000
 8000a80:	08004484 	.word	0x08004484
 8000a84:	08004488 	.word	0x08004488

08000a88 <lcd_print_all_axes_info>:

void lcd_print_all_axes_info( LCD_HandleTypeDef *hlcd, float x, float y, float z )
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
   /* move cursor to first row and first column on the LCD */
   LCD_API_Move_Cursor( hlcd, 0U, 0U );
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fbb1 	bl	8001204 <LCD_API_Move_Cursor>

   /* print x axis data */
   lcd_print_one_axis_info( hlcd, x );
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	1c11      	adds	r1, r2, #0
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ff15 	bl	80008d8 <lcd_print_one_axis_info>

   /* print 'X' character to indicate previous data belongs to the x axis  */
   LCD_API_Print_Character( hlcd, 'X' );
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2158      	movs	r1, #88	; 0x58
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fbd4 	bl	8001260 <LCD_API_Print_Character>

   /* move cursor to first row and ninth column on the LCD */
   LCD_API_Move_Cursor( hlcd, 0U, 8U );
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2208      	movs	r2, #8
 8000abc:	2100      	movs	r1, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 fba0 	bl	8001204 <LCD_API_Move_Cursor>

   /* print y axis data */
   lcd_print_one_axis_info( hlcd, y );
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1c11      	adds	r1, r2, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff ff04 	bl	80008d8 <lcd_print_one_axis_info>

   /* print 'Y' character to indicate previous data belongs to the x axis  */
   LCD_API_Print_Character( hlcd, 'Y' );
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2159      	movs	r1, #89	; 0x59
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fbc3 	bl	8001260 <LCD_API_Print_Character>

   /* move cursor to second row and fifth column on the LCD */
   LCD_API_Move_Cursor( hlcd, 1U, 4U );
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2204      	movs	r2, #4
 8000ade:	2101      	movs	r1, #1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fb8f 	bl	8001204 <LCD_API_Move_Cursor>

   /* print z axis data */
   lcd_print_one_axis_info( hlcd, z );
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	1c11      	adds	r1, r2, #0
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fef3 	bl	80008d8 <lcd_print_one_axis_info>

   /* print 'Z' character to indicate previous data belongs to the x axis  */
   LCD_API_Print_Character( hlcd, 'Z' );
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	215a      	movs	r1, #90	; 0x5a
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fbb2 	bl	8001260 <LCD_API_Print_Character>
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b004      	add	sp, #16
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* NOTE: after this point the value of the variable SystemCoreClock
           will be read as 96000000 instead of 48000000. This is due to ST
           did not take into account that HSI/2 can be the source of PLL
           (they use HSI for the computation of SystemCoreClock) */
  #endif
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <Reset_Handler>:
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopForever+0x2>)
 8000b12:	4685      	mov	sp, r0
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LoopForever+0x6>)
 8000b16:	490e      	ldr	r1, [pc, #56]	; (8000b50 <LoopForever+0xa>)
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <LoopForever+0xe>)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:
 8000b1e:	58d4      	ldr	r4, [r2, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:
 8000b24:	18c4      	adds	r4, r0, r3
 8000b26:	428c      	cmp	r4, r1
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <LoopForever+0x12>)
 8000b2c:	4c0b      	ldr	r4, [pc, #44]	; (8000b5c <LoopForever+0x16>)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:
 8000b36:	42a2      	cmp	r2, r4
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>
 8000b3a:	f7ff ffe3 	bl	8000b04 <SystemInit>
 8000b3e:	f002 fbd1 	bl	80032e4 <__libc_init_array>
 8000b42:	f7ff fbff 	bl	8000344 <main>

08000b46 <LoopForever>:
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
 8000b48:	20004000 	.word	0x20004000
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000068 	.word	0x20000068
 8000b54:	08004524 	.word	0x08004524
 8000b58:	20000068 	.word	0x20000068
 8000b5c:	200002a8 	.word	0x200002a8

08000b60 <ADC1_IRQHandler>:
 8000b60:	e7fe      	b.n	8000b60 <ADC1_IRQHandler>
	...

08000b64 <TIM3_Init>:
#include "timer.h"

void TIM3_Init( void )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    /* enable TIM3 clock */
    TIM3_CLK_ENBL();
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <TIM3_Init+0x40>)
 8000b6a:	69da      	ldr	r2, [r3, #28]
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <TIM3_Init+0x40>)
 8000b6e:	2102      	movs	r1, #2
 8000b70:	430a      	orrs	r2, r1
 8000b72:	61da      	str	r2, [r3, #28]

    /* TIM3 as upcounter */
    TIM3->CR1 &= ~TIM_CR1_DIR;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <TIM3_Init+0x44>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <TIM3_Init+0x44>)
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]

    /* TIM3 UEV (update event) generation enabled */
    TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <TIM3_Init+0x44>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <TIM3_Init+0x44>)
 8000b86:	2102      	movs	r1, #2
 8000b88:	438a      	bics	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]

    /* TIM3 auto-reload preload enabled */
    TIM3->CR1 |= TIM_CR1_ARPE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <TIM3_Init+0x44>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <TIM3_Init+0x44>)
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
        
    /* TIM3 prescaler.
       CK_CNT = ( PSC + 1 ) / fck_psc
       = ( 0 + 1 ) / 48MHz
       = 20.834ns */
    TIM3->PSC = 0x0000U;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <TIM3_Init+0x44>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40000400 	.word	0x40000400

08000bac <TIM3_Delay_us>:

void TIM3_Delay_us( uint32_t useconds )
{   
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

    /* TIM3 auto-reload register.
       In order to generate a timebase = 1us:
       AUTORELOAD = (1us / TIM3_period) - 1
       with TIM3_period = 20.834ns */
    TIM3->ARR = 0x002FU;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <TIM3_Delay_us+0x60>)
 8000bb6:	222f      	movs	r2, #47	; 0x2f
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* clear TIM3 counter */
    TIM3->CNT = 0x0000U;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <TIM3_Delay_us+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* enable TIM3 */
    TIM3->CR1 |= TIM_CR1_CEN;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <TIM3_Delay_us+0x60>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <TIM3_Delay_us+0x60>)
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]
        
    /* wait entered microseconds */
    for ( i = 0; i < useconds; i++ )
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e00e      	b.n	8000bf0 <TIM3_Delay_us+0x44>
    {
        /* wait for update flag (1us) */
        while ( ( TIM3->SR & TIM_SR_UIF ) == 0U )
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <TIM3_Delay_us+0x60>)
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4013      	ands	r3, r2
 8000bdc:	d0fa      	beq.n	8000bd4 <TIM3_Delay_us+0x28>
        {
            /* do nothing */
        }

        /* clear update flag */
        TIM3->SR &= ~TIM_SR_UIF;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <TIM3_Delay_us+0x60>)
 8000be0:	691a      	ldr	r2, [r3, #16]
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <TIM3_Delay_us+0x60>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	438a      	bics	r2, r1
 8000be8:	611a      	str	r2, [r3, #16]
    for ( i = 0; i < useconds; i++ )
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3ec      	bcc.n	8000bd2 <TIM3_Delay_us+0x26>
    }

    /* disable TIM3 */
    TIM3->CR1 &= ~TIM_CR1_CEN;
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <TIM3_Delay_us+0x60>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <TIM3_Delay_us+0x60>)
 8000bfe:	2101      	movs	r1, #1
 8000c00:	438a      	bics	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b004      	add	sp, #16
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40000400 	.word	0x40000400

08000c10 <TIM3_Delay_ms>:

void TIM3_Delay_ms( uint32_t mseconds )
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

    /* TIM3 auto-reload register.
       In order to generate a timebase = 1ms:
       AUTORELOAD = (1ms / TIM3_period) - 1
       with TIM3_period = 20.834ns */
    TIM3->ARR = 0x0BB7FU;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <TIM3_Delay_ms+0x60>)
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <TIM3_Delay_ms+0x64>)
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* clear TIM3 counter */
    TIM3->CNT = 0x0000U;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <TIM3_Delay_ms+0x60>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24

    /* enable TIM3 */
    TIM3->CR1 |= TIM_CR1_CEN;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <TIM3_Delay_ms+0x60>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <TIM3_Delay_ms+0x60>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
        
    /* wait entered miliseconds */
    for ( i = 0; i < mseconds; i++ )
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e00e      	b.n	8000c54 <TIM3_Delay_ms+0x44>
    {
        /* wait for update flag (1ms) */
        while ( ( TIM3->SR & TIM_SR_UIF ) == 0U )
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <TIM3_Delay_ms+0x60>)
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d0fa      	beq.n	8000c38 <TIM3_Delay_ms+0x28>
        {
            /* do nothing */
        }

        /* clear update flag */
        TIM3->SR &= ~TIM_SR_UIF;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <TIM3_Delay_ms+0x60>)
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <TIM3_Delay_ms+0x60>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	438a      	bics	r2, r1
 8000c4c:	611a      	str	r2, [r3, #16]
    for ( i = 0; i < mseconds; i++ )
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d3ec      	bcc.n	8000c36 <TIM3_Delay_ms+0x26>
    }

    /* disable TIM3 */
    TIM3->CR1 &= ~TIM_CR1_CEN;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <TIM3_Delay_ms+0x60>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <TIM3_Delay_ms+0x60>)
 8000c62:	2101      	movs	r1, #1
 8000c64:	438a      	bics	r2, r1
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b004      	add	sp, #16
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40000400 	.word	0x40000400
 8000c74:	0000bb7f 	.word	0x0000bb7f

08000c78 <I2C1_Init>:
#include "i2c.h"

void I2C1_Init( void )
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    /* enable GPIOB clock access */
    GPIOB_CLK_ENBL();
 8000c7c:	4b61      	ldr	r3, [pc, #388]	; (8000e04 <I2C1_Init+0x18c>)
 8000c7e:	695a      	ldr	r2, [r3, #20]
 8000c80:	4b60      	ldr	r3, [pc, #384]	; (8000e04 <I2C1_Init+0x18c>)
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	02c9      	lsls	r1, r1, #11
 8000c86:	430a      	orrs	r2, r1
 8000c88:	615a      	str	r2, [r3, #20]

    /* GPIOB8 (I2C1_SCL) in alternate function mode */
    GPIOB->MODER |=  GPIO_MODER_MODER8_1;
 8000c8a:	4b5f      	ldr	r3, [pc, #380]	; (8000e08 <I2C1_Init+0x190>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b5e      	ldr	r3, [pc, #376]	; (8000e08 <I2C1_Init+0x190>)
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	0289      	lsls	r1, r1, #10
 8000c94:	430a      	orrs	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODER8_0;
 8000c98:	4b5b      	ldr	r3, [pc, #364]	; (8000e08 <I2C1_Init+0x190>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b5a      	ldr	r3, [pc, #360]	; (8000e08 <I2C1_Init+0x190>)
 8000c9e:	495b      	ldr	r1, [pc, #364]	; (8000e0c <I2C1_Init+0x194>)
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]

    /* GPIOB8 (I2C1_SCL) as open-drain output */
    GPIOB->OTYPER |= GPIO_OTYPER_OT_8;
 8000ca4:	4b58      	ldr	r3, [pc, #352]	; (8000e08 <I2C1_Init+0x190>)
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4b57      	ldr	r3, [pc, #348]	; (8000e08 <I2C1_Init+0x190>)
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	0049      	lsls	r1, r1, #1
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	605a      	str	r2, [r3, #4]

    /* GPIOB8 (I2C1_SCL) with pull-up resistor */
    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR8_1;
 8000cb2:	4b55      	ldr	r3, [pc, #340]	; (8000e08 <I2C1_Init+0x190>)
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <I2C1_Init+0x190>)
 8000cb8:	4955      	ldr	r1, [pc, #340]	; (8000e10 <I2C1_Init+0x198>)
 8000cba:	400a      	ands	r2, r1
 8000cbc:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  GPIO_PUPDR_PUPDR8_0;
 8000cbe:	4b52      	ldr	r3, [pc, #328]	; (8000e08 <I2C1_Init+0x190>)
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	4b51      	ldr	r3, [pc, #324]	; (8000e08 <I2C1_Init+0x190>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0249      	lsls	r1, r1, #9
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	60da      	str	r2, [r3, #12]

    /* GPIOB8 in AF1 (I2C1_SCL) */
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL8_3;
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <I2C1_Init+0x190>)
 8000cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <I2C1_Init+0x190>)
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	438a      	bics	r2, r1
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL8_2;
 8000cd8:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <I2C1_Init+0x190>)
 8000cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <I2C1_Init+0x190>)
 8000cde:	2104      	movs	r1, #4
 8000ce0:	438a      	bics	r2, r1
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL8_1;
 8000ce4:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <I2C1_Init+0x190>)
 8000ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce8:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <I2C1_Init+0x190>)
 8000cea:	2102      	movs	r1, #2
 8000cec:	438a      	bics	r2, r1
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] |=  GPIO_AFRL_AFSEL8_0;
 8000cf0:	4b45      	ldr	r3, [pc, #276]	; (8000e08 <I2C1_Init+0x190>)
 8000cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cf4:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <I2C1_Init+0x190>)
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* GPIOB9 (I2C1_SDA) in alternate function mode */
    GPIOB->MODER |=  GPIO_MODER_MODER9_1;
 8000cfc:	4b42      	ldr	r3, [pc, #264]	; (8000e08 <I2C1_Init+0x190>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <I2C1_Init+0x190>)
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	0309      	lsls	r1, r1, #12
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODER9_0;
 8000d0a:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <I2C1_Init+0x190>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <I2C1_Init+0x190>)
 8000d10:	4940      	ldr	r1, [pc, #256]	; (8000e14 <I2C1_Init+0x19c>)
 8000d12:	400a      	ands	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]

    /* GPIOB9 (I2C1_SDA) as open-drain output */
    GPIOB->OTYPER |= GPIO_OTYPER_OT_9;
 8000d16:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <I2C1_Init+0x190>)
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <I2C1_Init+0x190>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0089      	lsls	r1, r1, #2
 8000d20:	430a      	orrs	r2, r1
 8000d22:	605a      	str	r2, [r3, #4]

    /* GPIOB9 (I2C1_SDA) with pull-up resistor */
    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR9_1;
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <I2C1_Init+0x190>)
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <I2C1_Init+0x190>)
 8000d2a:	493b      	ldr	r1, [pc, #236]	; (8000e18 <I2C1_Init+0x1a0>)
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  GPIO_PUPDR_PUPDR9_0;
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <I2C1_Init+0x190>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <I2C1_Init+0x190>)
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	02c9      	lsls	r1, r1, #11
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	60da      	str	r2, [r3, #12]

    /* GPIOB9 in AF1 (I2C1_SDA) */
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL9_3;
 8000d3e:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <I2C1_Init+0x190>)
 8000d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d42:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <I2C1_Init+0x190>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	438a      	bics	r2, r1
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL9_2;
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <I2C1_Init+0x190>)
 8000d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <I2C1_Init+0x190>)
 8000d50:	2140      	movs	r1, #64	; 0x40
 8000d52:	438a      	bics	r2, r1
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] &= ~GPIO_AFRL_AFSEL9_1;
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <I2C1_Init+0x190>)
 8000d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <I2C1_Init+0x190>)
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	438a      	bics	r2, r1
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->AFR[ 1 ] |=  GPIO_AFRL_AFSEL9_0;
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <I2C1_Init+0x190>)
 8000d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <I2C1_Init+0x190>)
 8000d68:	2110      	movs	r1, #16
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* enable I2C1 clock access */
    I2C1_CLK_ENBL();
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <I2C1_Init+0x18c>)
 8000d70:	69da      	ldr	r2, [r3, #28]
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <I2C1_Init+0x18c>)
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	0389      	lsls	r1, r1, #14
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	61da      	str	r2, [r3, #28]

    /* analog filter enabled */
    I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <I2C1_Init+0x1a4>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <I2C1_Init+0x1a4>)
 8000d82:	4927      	ldr	r1, [pc, #156]	; (8000e20 <I2C1_Init+0x1a8>)
 8000d84:	400a      	ands	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]

    /* select HSI (= 8 MHz) as I2C1 clock source*/
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <I2C1_Init+0x18c>)
 8000d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <I2C1_Init+0x18c>)
 8000d8e:	2110      	movs	r1, #16
 8000d90:	438a      	bics	r2, r1
 8000d92:	631a      	str	r2, [r3, #48]	; 0x30

    /* digital filter disabled */
    I2C1->CR1 &= ~I2C_CR1_DNF_3;
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <I2C1_Init+0x1a4>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <I2C1_Init+0x1a4>)
 8000d9a:	4922      	ldr	r1, [pc, #136]	; (8000e24 <I2C1_Init+0x1ac>)
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_DNF_2;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <I2C1_Init+0x1a4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <I2C1_Init+0x1a4>)
 8000da6:	4920      	ldr	r1, [pc, #128]	; (8000e28 <I2C1_Init+0x1b0>)
 8000da8:	400a      	ands	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_DNF_1;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <I2C1_Init+0x1a4>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <I2C1_Init+0x1a4>)
 8000db2:	491e      	ldr	r1, [pc, #120]	; (8000e2c <I2C1_Init+0x1b4>)
 8000db4:	400a      	ands	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_DNF_0;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <I2C1_Init+0x1a4>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <I2C1_Init+0x1a4>)
 8000dbe:	491c      	ldr	r1, [pc, #112]	; (8000e30 <I2C1_Init+0x1b8>)
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]

    /* transfer will be complete after NBYTES data transfer */
    I2C1->CR2 &= ~I2C_CR2_RELOAD;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <I2C1_Init+0x1a4>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <I2C1_Init+0x1a4>)
 8000dca:	491a      	ldr	r1, [pc, #104]	; (8000e34 <I2C1_Init+0x1bc>)
 8000dcc:	400a      	ands	r2, r1
 8000dce:	605a      	str	r2, [r3, #4]

    /* I2C1 in automatic end mode.
       Master automatically sends a STOP condition once the number
       of bytes in NBYTES has been transferred */
    I2C1->CR2 |= I2C_CR2_AUTOEND;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <I2C1_Init+0x1a4>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <I2C1_Init+0x1a4>)
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	0489      	lsls	r1, r1, #18
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	605a      	str	r2, [r3, #4]

    /* I2C1 in 7 bit addressing mode */
    I2C1->CR2 &= ~I2C_CR2_ADD10;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <I2C1_Init+0x1a4>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <I2C1_Init+0x1a4>)
 8000de4:	490f      	ldr	r1, [pc, #60]	; (8000e24 <I2C1_Init+0x1ac>)
 8000de6:	400a      	ands	r2, r1
 8000de8:	605a      	str	r2, [r3, #4]
       SDADEL = 0  (0x00)
       SCLH   = 29 (0x1D)
       SCLL   = 43 (0x2B)
        
       NOTE: I2C1 in standard mode (100KHz) */
    I2C1->TIMINGR = 0x00201D2BU;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <I2C1_Init+0x1a4>)
 8000dec:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <I2C1_Init+0x1c0>)
 8000dee:	611a      	str	r2, [r3, #16]

    /* enable I2C1 */
    I2C1->CR1 |= I2C_CR1_PE;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <I2C1_Init+0x1a4>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <I2C1_Init+0x1a4>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	fffeffff 	.word	0xfffeffff
 8000e10:	fffdffff 	.word	0xfffdffff
 8000e14:	fffbffff 	.word	0xfffbffff
 8000e18:	fff7ffff 	.word	0xfff7ffff
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	ffffefff 	.word	0xffffefff
 8000e24:	fffff7ff 	.word	0xfffff7ff
 8000e28:	fffffbff 	.word	0xfffffbff
 8000e2c:	fffffdff 	.word	0xfffffdff
 8000e30:	fffffeff 	.word	0xfffffeff
 8000e34:	feffffff 	.word	0xfeffffff
 8000e38:	00201d2b 	.word	0x00201d2b

08000e3c <I2C1_Write>:

void I2C1_Write( uint8_t slaveAddr, uint8_t *data, uint8_t size )
{   
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6039      	str	r1, [r7, #0]
 8000e44:	0011      	movs	r1, r2
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	1c02      	adds	r2, r0, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	1dbb      	adds	r3, r7, #6
 8000e4e:	1c0a      	adds	r2, r1, #0
 8000e50:	701a      	strb	r2, [r3, #0]
    uint8_t byteCtr;
        
    /* set slave address */
    I2C1->CR2 |= ( slaveAddr & SLAVE_ADDR_7b_Msk ) << I2C_CR2_SADD_7_1_Pos;
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <I2C1_Write+0xc0>)
 8000e54:	6859      	ldr	r1, [r3, #4]
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	22ff      	movs	r2, #255	; 0xff
 8000e5e:	401a      	ands	r2, r3
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <I2C1_Write+0xc0>)
 8000e62:	430a      	orrs	r2, r1
 8000e64:	605a      	str	r2, [r3, #4]

    /* set number of bytes to be sent */
    I2C1->CR2 |= size << I2C_CR2_NBYTES_Pos;
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <I2C1_Write+0xc0>)
 8000e68:	6859      	ldr	r1, [r3, #4]
 8000e6a:	1dbb      	adds	r3, r7, #6
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	041a      	lsls	r2, r3, #16
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <I2C1_Write+0xc0>)
 8000e72:	430a      	orrs	r2, r1
 8000e74:	605a      	str	r2, [r3, #4]

    /* set read/write bit (0 = write operation) */
    I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <I2C1_Write+0xc0>)
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <I2C1_Write+0xc0>)
 8000e7c:	4920      	ldr	r1, [pc, #128]	; (8000f00 <I2C1_Write+0xc4>)
 8000e7e:	400a      	ands	r2, r1
 8000e80:	605a      	str	r2, [r3, #4]
        
    /* set start bit */
    I2C1->CR2 |= I2C_CR2_START;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <I2C1_Write+0xc0>)
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <I2C1_Write+0xc0>)
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	0189      	lsls	r1, r1, #6
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	605a      	str	r2, [r3, #4]
       master automatically sends start bit + slave address + write bit */

    /* if slave address is correct, then the slave will send an ACK bit */
        
    /* wait for transmit data register (TXD) to be empty */
    while ( ( ( I2C1->ISR & I2C_ISR_TXE ) != I2C_ISR_TXE ) )
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <I2C1_Write+0xc0>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	2201      	movs	r2, #1
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d1f9      	bne.n	8000e92 <I2C1_Write+0x56>
    {
        /* do nothing */
    }

    /* send each byte from the data array over I2C1 */
    for ( byteCtr = 0; byteCtr < size; byteCtr++, data++ )
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e013      	b.n	8000ed0 <I2C1_Write+0x94>
    {   
        /* transmit current data byte */
        I2C1->TXDR = ( uint32_t ) ( *data );
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <I2C1_Write+0xc0>)
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28

        /* wait for transmit data register (TXD) to be sent */
        while ( ( ( I2C1->ISR & I2C_ISR_TXE ) != I2C_ISR_TXE ) )
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <I2C1_Write+0xc0>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d1f9      	bne.n	8000eb2 <I2C1_Write+0x76>
    for ( byteCtr = 0; byteCtr < size; byteCtr++, data++ )
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	3201      	adds	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	18fa      	adds	r2, r7, r3
 8000ed4:	1dbb      	adds	r3, r7, #6
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3e4      	bcc.n	8000ea8 <I2C1_Write+0x6c>

    /* once transmission is complete ...
       master automatically sends a stop bit (due to autoend mode enabled) */
        
    /* wait for I2C1 bus to be free (stop bit sent) */
    while ( ( I2C1->ISR & I2C_ISR_BUSY ) == I2C_ISR_BUSY )
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <I2C1_Write+0xc0>)
 8000ee2:	699a      	ldr	r2, [r3, #24]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	401a      	ands	r2, r3
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d0f6      	beq.n	8000ee0 <I2C1_Write+0xa4>
    {
        /* do nothing */
    }
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b004      	add	sp, #16
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40005400 	.word	0x40005400
 8000f00:	fffffbff 	.word	0xfffffbff

08000f04 <LCD_Init>:

static uint8_t byte;
static uint8_t DDRAMADDR = 0U;

void LCD_Init( LCD_HandleTypeDef *hlcd )
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    uint8_t i2cByte;

    /* initialize TIM3 */
    TIM3_Init();
 8000f0c:	f7ff fe2a 	bl	8000b64 <TIM3_Init>

    /* inititalize I2C1 */
    I2C1_Init();
 8000f10:	f7ff feb2 	bl	8000c78 <I2C1_Init>

    /* wait 40 ms */
    TIM3_Delay_ms( 40U );
 8000f14:	2028      	movs	r0, #40	; 0x28
 8000f16:	f7ff fe7b 	bl	8000c10 <TIM3_Delay_ms>

    /* function set (this is sent in 8 bit mode)
       DB7 = 0, DB6 = 0, DB5 = 1, DB4 = 1 = ST7066U in 8 bit mode
       backlight = backlight ON = 1, E = 0, RW = 0, RS = 0
       (not used) DB3 = N = x, DB2 = F = x, DB1 = x, DB0 = x */
    i2cByte = 0x38U;
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2238      	movs	r2, #56	; 0x38
 8000f20:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &i2cByte, 1U );
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	000c      	movs	r4, r1
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ff85 	bl	8000e3c <I2C1_Write>
    LCD_Start_Data_Write( hlcd, i2cByte );
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	0011      	movs	r1, r2
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 f820 	bl	8000f80 <LCD_Start_Data_Write>

    /* wait 37us */
    TIM3_Delay_us( 37U ),
 8000f40:	2025      	movs	r0, #37	; 0x25
 8000f42:	f7ff fe33 	bl	8000bac <TIM3_Delay_us>

    /* 1st try, set ST7066U to (8/4) bit datalength, (1/2) display line
       and (5x8/5x11) dots font mode */
    LCD_Send_Instruction( hlcd, FUNCTION_SET_REG );
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2120      	movs	r1, #32
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f840 	bl	8000fd0 <LCD_Send_Instruction>

    /* 2nd try, set ST7066U to (8/4) bit datalength, (1/2) display line
       and (5x8/5x11) dots font mode */
    LCD_Send_Instruction( hlcd, FUNCTION_SET_REG );
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2120      	movs	r1, #32
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 f83b 	bl	8000fd0 <LCD_Send_Instruction>
        
    /* turn (on/off) display, (enable/disable) cursor, 
       and (enable/disable) blink */
    LCD_Send_Instruction( hlcd, DISPLAY_ON_OFF_REG );
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f836 	bl	8000fd0 <LCD_Send_Instruction>

    /* clear display */
    LCD_Send_Instruction( hlcd, CLEAR_DISPLAY_REG );
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2101      	movs	r1, #1
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 f831 	bl	8000fd0 <LCD_Send_Instruction>

    /* set (left/right) cursor direction and (shift/no shift) display */
    LCD_Send_Instruction( hlcd, ENTRY_MODE_SET_REG );
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2104      	movs	r1, #4
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 f82c 	bl	8000fd0 <LCD_Send_Instruction>
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b005      	add	sp, #20
 8000f7e:	bd90      	pop	{r4, r7, pc}

08000f80 <LCD_Start_Data_Write>:

void LCD_Start_Data_Write( LCD_HandleTypeDef *hlcd, uint8_t prevData )
{   
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	000a      	movs	r2, r1
 8000f8a:	1cfb      	adds	r3, r7, #3
 8000f8c:	701a      	strb	r2, [r3, #0]
    /* enable E signal without touching previous data.
       This tells the ST7066U driver to accept current data on its pins */
    prevData |= E_ENABLED;
 8000f8e:	1cfb      	adds	r3, r7, #3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2204      	movs	r2, #4
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	1cfb      	adds	r3, r7, #3
 8000f9a:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &prevData, 1U );
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	1cf9      	adds	r1, r7, #3
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ff49 	bl	8000e3c <I2C1_Write>

    /* disable E signal.
       Prepare driver for future commands or data */
    prevData &= ~E_ENABLED;
 8000faa:	1cfb      	adds	r3, r7, #3
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	4393      	bics	r3, r2
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	1cfb      	adds	r3, r7, #3
 8000fb6:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &prevData, 1U );
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	1cf9      	adds	r1, r7, #3
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff ff3b 	bl	8000e3c <I2C1_Write>
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <LCD_Send_Instruction>:

void LCD_Send_Instruction( LCD_HandleTypeDef *hlcd, uint8_t instruction )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	000a      	movs	r2, r1
 8000fda:	1cfb      	adds	r3, r7, #3
 8000fdc:	701a      	strb	r2, [r3, #0]
    /* instruction's MOST SIGNIFICANT nibble + light + write instruction */
    byte = ( instruction & 0xF0U ) | hlcd->backlight | RW_WRITE | RS_INSTRUCTION;
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	4393      	bics	r3, r2
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	785b      	ldrb	r3, [r3, #1]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b5d      	ldr	r3, [pc, #372]	; (8001168 <LCD_Send_Instruction+0x198>)
 8000ff2:	701a      	strb	r2, [r3, #0]

    switch ( instruction )
 8000ff4:	1cfb      	adds	r3, r7, #3
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	d002      	beq.n	8001002 <LCD_Send_Instruction+0x32>
 8000ffc:	2b80      	cmp	r3, #128	; 0x80
 8000ffe:	d009      	beq.n	8001014 <LCD_Send_Instruction+0x44>
            byte |= ( DDRAMADDR & 0x70U );
            break;

        default:
            /* do nothing */
            break;
 8001000:	e014      	b.n	800102c <LCD_Send_Instruction+0x5c>
            byte |= hlcd->datalenght;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7a9a      	ldrb	r2, [r3, #10]
 8001006:	4b58      	ldr	r3, [pc, #352]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4313      	orrs	r3, r2
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b56      	ldr	r3, [pc, #344]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001010:	701a      	strb	r2, [r3, #0]
            break;
 8001012:	e00b      	b.n	800102c <LCD_Send_Instruction+0x5c>
            byte |= ( DDRAMADDR & 0x70U );
 8001014:	4b55      	ldr	r3, [pc, #340]	; (800116c <LCD_Send_Instruction+0x19c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2270      	movs	r2, #112	; 0x70
 800101a:	4013      	ands	r3, r2
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b52      	ldr	r3, [pc, #328]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4313      	orrs	r3, r2
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001028:	701a      	strb	r2, [r3, #0]
            break;
 800102a:	46c0      	nop			; (mov r8, r8)
    }

    /* send MOST SIGNIFICANT nibble + extra parameters over I2C1 */
    I2C1_Write( hlcd->lcdaddress, &byte, 1U );
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	494d      	ldr	r1, [pc, #308]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001032:	2201      	movs	r2, #1
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ff01 	bl	8000e3c <I2C1_Write>
    LCD_Start_Data_Write( hlcd, byte );
 800103a:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <LCD_Send_Instruction+0x198>)
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff ff9c 	bl	8000f80 <LCD_Start_Data_Write>

    /* instruction's LEAST SIGNIFICANT nibble + light + write instruction */
    byte = ( instruction << 4 ) | hlcd->backlight | RW_WRITE | RS_INSTRUCTION;
 8001048:	1cfb      	adds	r3, r7, #3
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	b25a      	sxtb	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	b25b      	sxtb	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b25b      	sxtb	r3, r3
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b42      	ldr	r3, [pc, #264]	; (8001168 <LCD_Send_Instruction+0x198>)
 800105e:	701a      	strb	r2, [r3, #0]
        
    switch ( instruction )
 8001060:	1cfb      	adds	r3, r7, #3
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b80      	cmp	r3, #128	; 0x80
 8001066:	d04f      	beq.n	8001108 <LCD_Send_Instruction+0x138>
 8001068:	dc59      	bgt.n	800111e <LCD_Send_Instruction+0x14e>
 800106a:	2b20      	cmp	r3, #32
 800106c:	d03b      	beq.n	80010e6 <LCD_Send_Instruction+0x116>
 800106e:	dc56      	bgt.n	800111e <LCD_Send_Instruction+0x14e>
 8001070:	2b10      	cmp	r3, #16
 8001072:	d02b      	beq.n	80010cc <LCD_Send_Instruction+0xfc>
 8001074:	dc53      	bgt.n	800111e <LCD_Send_Instruction+0x14e>
 8001076:	2b04      	cmp	r3, #4
 8001078:	d002      	beq.n	8001080 <LCD_Send_Instruction+0xb0>
 800107a:	2b08      	cmp	r3, #8
 800107c:	d011      	beq.n	80010a2 <LCD_Send_Instruction+0xd2>
            byte |= ( DDRAMADDR & 0x0FU ) << 4;
            break;

        default:
            /* do nothing */
            break;
 800107e:	e04e      	b.n	800111e <LCD_Send_Instruction+0x14e>
            byte |= ( hlcd->incrementddram | hlcd->shiftdisplay ) << 4;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	78da      	ldrb	r2, [r3, #3]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	789b      	ldrb	r3, [r3, #2]
 8001088:	4313      	orrs	r3, r2
 800108a:	b2db      	uxtb	r3, r3
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	b25a      	sxtb	r2, r3
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b25b      	sxtb	r3, r3
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <LCD_Send_Instruction+0x198>)
 800109e:	701a      	strb	r2, [r3, #0]
            break;
 80010a0:	e03e      	b.n	8001120 <LCD_Send_Instruction+0x150>
            byte |= ( hlcd->display | hlcd->cursor | hlcd->blink ) << 4;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	799a      	ldrb	r2, [r3, #6]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	795b      	ldrb	r3, [r3, #5]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	791b      	ldrb	r3, [r3, #4]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	b25a      	sxtb	r2, r3
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <LCD_Send_Instruction+0x198>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <LCD_Send_Instruction+0x198>)
 80010c8:	701a      	strb	r2, [r3, #0]
            break;
 80010ca:	e029      	b.n	8001120 <LCD_Send_Instruction+0x150>
            byte |= hlcd->shiftcursor << 4;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	79db      	ldrb	r3, [r3, #7]
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <LCD_Send_Instruction+0x198>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <LCD_Send_Instruction+0x198>)
 80010e2:	701a      	strb	r2, [r3, #0]
            break;
 80010e4:	e01c      	b.n	8001120 <LCD_Send_Instruction+0x150>
            byte |= ( hlcd->displayline | hlcd->font ) << 4;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7a5a      	ldrb	r2, [r3, #9]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7a1b      	ldrb	r3, [r3, #8]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	b25a      	sxtb	r2, r3
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <LCD_Send_Instruction+0x198>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001104:	701a      	strb	r2, [r3, #0]
            break;
 8001106:	e00b      	b.n	8001120 <LCD_Send_Instruction+0x150>
            byte |= ( DDRAMADDR & 0x0FU ) << 4;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <LCD_Send_Instruction+0x19c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4313      	orrs	r3, r2
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <LCD_Send_Instruction+0x198>)
 800111a:	701a      	strb	r2, [r3, #0]
            break;
 800111c:	e000      	b.n	8001120 <LCD_Send_Instruction+0x150>
            break;
 800111e:	46c0      	nop			; (mov r8, r8)
    }

    /* send LEAST SIGNIFICANT nibble + extra parameters over I2C1 */
    I2C1_Write( hlcd->lcdaddress, &byte, 1U );
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4910      	ldr	r1, [pc, #64]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001126:	2201      	movs	r2, #1
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fe87 	bl	8000e3c <I2C1_Write>
    LCD_Start_Data_Write( hlcd, byte );
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <LCD_Send_Instruction+0x198>)
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff ff22 	bl	8000f80 <LCD_Start_Data_Write>

    if ( ( instruction == CLEAR_DISPLAY_REG ) || ( instruction == RETURN_HOME_REG ) )
 800113c:	1cfb      	adds	r3, r7, #3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d003      	beq.n	800114c <LCD_Send_Instruction+0x17c>
 8001144:	1cfb      	adds	r3, r7, #3
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d105      	bne.n	8001158 <LCD_Send_Instruction+0x188>
    {   
        /* wait 1.52 ms */
        TIM3_Delay_us( 1520U );
 800114c:	23be      	movs	r3, #190	; 0xbe
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fd2b 	bl	8000bac <TIM3_Delay_us>
 8001156:	e003      	b.n	8001160 <LCD_Send_Instruction+0x190>
    }
    else
    {
        /* wait 37 us */
        TIM3_Delay_us( 37U );
 8001158:	2025      	movs	r0, #37	; 0x25
 800115a:	f7ff fd27 	bl	8000bac <TIM3_Delay_us>
    }
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000a8 	.word	0x200000a8
 800116c:	200000a9 	.word	0x200000a9

08001170 <LCD_Write_To_DDRAM>:

void LCD_Write_To_DDRAM( LCD_HandleTypeDef *hlcd, uint8_t data )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	000a      	movs	r2, r1
 800117a:	1cfb      	adds	r3, r7, #3
 800117c:	701a      	strb	r2, [r3, #0]
    /* data's MSB nible + extra parameters */
    byte = ( data & 0xF0U ) | hlcd->backlight | RW_WRITE | RS_DATA;
 800117e:	1cfb      	adds	r3, r7, #3
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	220f      	movs	r2, #15
 8001184:	4393      	bics	r3, r2
 8001186:	b2da      	uxtb	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	4313      	orrs	r3, r2
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2201      	movs	r2, #1
 8001192:	4313      	orrs	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <LCD_Write_To_DDRAM+0x90>)
 8001198:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &byte, 1 );
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4918      	ldr	r1, [pc, #96]	; (8001200 <LCD_Write_To_DDRAM+0x90>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff fe4a 	bl	8000e3c <I2C1_Write>
    LCD_Start_Data_Write( hlcd, byte );
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <LCD_Write_To_DDRAM+0x90>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fee5 	bl	8000f80 <LCD_Start_Data_Write>

    /* data's LSB nible + extra parameters */
    byte = ( data << 4 ) | hlcd->backlight | RW_WRITE | RS_DATA;
 80011b6:	1cfb      	adds	r3, r7, #3
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	b25a      	sxtb	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <LCD_Write_To_DDRAM+0x90>)
 80011d2:	701a      	strb	r2, [r3, #0]
    I2C1_Write( hlcd->lcdaddress, &byte, 1U );
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4909      	ldr	r1, [pc, #36]	; (8001200 <LCD_Write_To_DDRAM+0x90>)
 80011da:	2201      	movs	r2, #1
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fe2d 	bl	8000e3c <I2C1_Write>
    LCD_Start_Data_Write( hlcd, byte );
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <LCD_Write_To_DDRAM+0x90>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	0011      	movs	r1, r2
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff fec8 	bl	8000f80 <LCD_Start_Data_Write>

    /* wait 37 us */
    TIM3_Delay_us( 37U );
 80011f0:	2025      	movs	r0, #37	; 0x25
 80011f2:	f7ff fcdb 	bl	8000bac <TIM3_Delay_us>
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	200000a8 	.word	0x200000a8

08001204 <LCD_API_Move_Cursor>:

void LCD_API_Move_Cursor( LCD_HandleTypeDef *hlcd, uint8_t row, uint8_t col )
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	0008      	movs	r0, r1
 800120e:	0011      	movs	r1, r2
 8001210:	1cfb      	adds	r3, r7, #3
 8001212:	1c02      	adds	r2, r0, #0
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	1cbb      	adds	r3, r7, #2
 8001218:	1c0a      	adds	r2, r1, #0
 800121a:	701a      	strb	r2, [r3, #0]
    if ( row <= 1U && col <= 15U )
 800121c:	1cfb      	adds	r3, r7, #3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d817      	bhi.n	8001254 <LCD_API_Move_Cursor+0x50>
 8001224:	1cbb      	adds	r3, r7, #2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d813      	bhi.n	8001254 <LCD_API_Move_Cursor+0x50>
    {   
        if ( row == 1U )
 800122c:	1cfb      	adds	r3, r7, #3
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d102      	bne.n	800123a <LCD_API_Move_Cursor+0x36>
        {
            row = 0x40U;
 8001234:	1cfb      	adds	r3, r7, #3
 8001236:	2240      	movs	r2, #64	; 0x40
 8001238:	701a      	strb	r2, [r3, #0]
        }

        DDRAMADDR = row + col;
 800123a:	1cfa      	adds	r2, r7, #3
 800123c:	1cbb      	adds	r3, r7, #2
 800123e:	7812      	ldrb	r2, [r2, #0]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <LCD_API_Move_Cursor+0x58>)
 8001248:	701a      	strb	r2, [r3, #0]
        LCD_Send_Instruction( hlcd, SET_DDRAM_ADDRESS_REG );
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	0018      	movs	r0, r3
 8001250:	f7ff febe 	bl	8000fd0 <LCD_Send_Instruction>
    }
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b002      	add	sp, #8
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000a9 	.word	0x200000a9

08001260 <LCD_API_Print_Character>:

void LCD_API_Print_Character( LCD_HandleTypeDef *hlcd, uint8_t character )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	000a      	movs	r2, r1
 800126a:	1cfb      	adds	r3, r7, #3
 800126c:	701a      	strb	r2, [r3, #0]
    if ( character >= ' ' && character <= '}' )
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b1f      	cmp	r3, #31
 8001274:	d90a      	bls.n	800128c <LCD_API_Print_Character+0x2c>
 8001276:	1cfb      	adds	r3, r7, #3
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b7d      	cmp	r3, #125	; 0x7d
 800127c:	d806      	bhi.n	800128c <LCD_API_Print_Character+0x2c>
    {
        LCD_Write_To_DDRAM( hlcd, character );
 800127e:	1cfb      	adds	r3, r7, #3
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	0011      	movs	r1, r2
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff ff72 	bl	8001170 <LCD_Write_To_DDRAM>
    }
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}

08001294 <LCD_API_Print_String>:

void LCD_API_Print_String( LCD_HandleTypeDef *hlcd, uint8_t *string, uint8_t size )
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for ( i = 0U; i < size; i++ )
 80012a2:	2317      	movs	r3, #23
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e00f      	b.n	80012cc <LCD_API_Print_String+0x38>
    {
        LCD_API_Print_Character( hlcd, string[ i ] );
 80012ac:	2417      	movs	r4, #23
 80012ae:	193b      	adds	r3, r7, r4
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	0011      	movs	r1, r2
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff ffcf 	bl	8001260 <LCD_API_Print_Character>
    for ( i = 0U; i < size; i++ )
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	3201      	adds	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	2317      	movs	r3, #23
 80012ce:	18fa      	adds	r2, r7, r3
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3e8      	bcc.n	80012ac <LCD_API_Print_String+0x18>
    }
}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b007      	add	sp, #28
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <SysTick_Init>:
#include "stm32f0xx.h"

void SysTick_Init( void )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    /* Processor clock (HCLK = 8MHz) as SysTick clocksource */
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <SysTick_Init+0x30>)
 80012ea:	2204      	movs	r2, #4
 80012ec:	601a      	str	r2, [r3, #0]

    /* SysTick exception request disabled */
    SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <SysTick_Init+0x30>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <SysTick_Init+0x30>)
 80012f4:	2102      	movs	r1, #2
 80012f6:	438a      	bics	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

    /* SysTick reload value set to 1ms.
       RELOAD = 1ms / ( 1 / 8MHz ) */
    SysTick->LOAD = 0x1F40U;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <SysTick_Init+0x30>)
 80012fc:	22fa      	movs	r2, #250	; 0xfa
 80012fe:	0152      	lsls	r2, r2, #5
 8001300:	605a      	str	r2, [r3, #4]

    /* Enable SysTick */
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Init+0x30>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b03      	ldr	r3, [pc, #12]	; (8001314 <SysTick_Init+0x30>)
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]
}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	e000e010 	.word	0xe000e010

08001318 <Systick_Delay_Ms>:

void Systick_Delay_Ms( uint32_t delay )
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    uint32_t wait;

    /* SysTick current value set to 0 */
    SysTick->VAL = 0x0U;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <Systick_Delay_Ms+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]

    /* Enable SysTick */
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <Systick_Delay_Ms+0x50>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <Systick_Delay_Ms+0x50>)
 800132c:	2101      	movs	r1, #1
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]

    /* count 'delay' ms */
    for ( wait = 0; wait < delay; wait++ )
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e009      	b.n	800134c <Systick_Delay_Ms+0x34>
    {   
        /* wait for SysTick value to be 0 */
        while ( ( SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk ) == 0U )
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <Systick_Delay_Ms+0x50>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	025b      	lsls	r3, r3, #9
 8001342:	4013      	ands	r3, r2
 8001344:	d0f9      	beq.n	800133a <Systick_Delay_Ms+0x22>
    for ( wait = 0; wait < delay; wait++ )
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	d3f1      	bcc.n	8001338 <Systick_Delay_Ms+0x20>
            /* do nothing */
        }
    }

    /* Disable SysTick */
    SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <Systick_Delay_Ms+0x50>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <Systick_Delay_Ms+0x50>)
 800135a:	2101      	movs	r1, #1
 800135c:	438a      	bics	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}
 8001368:	e000e010 	.word	0xe000e010

0800136c <SPI1_GPIO_Init>:
#include "spi.h"

void SPI1_GPIO_Init( void )
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    /* enable GPIOA clock access */
    GPIOA_CLK_ENBL();
 8001370:	4b66      	ldr	r3, [pc, #408]	; (800150c <SPI1_GPIO_Init+0x1a0>)
 8001372:	695a      	ldr	r2, [r3, #20]
 8001374:	4b65      	ldr	r3, [pc, #404]	; (800150c <SPI1_GPIO_Init+0x1a0>)
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	0289      	lsls	r1, r1, #10
 800137a:	430a      	orrs	r2, r1
 800137c:	615a      	str	r2, [r3, #20]

    /* PA4 (SPI_CE) as output */
    GPIOA->MODER &= ~GPIO_MODER_MODER4_1;
 800137e:	2390      	movs	r3, #144	; 0x90
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2390      	movs	r3, #144	; 0x90
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	4961      	ldr	r1, [pc, #388]	; (8001510 <SPI1_GPIO_Init+0x1a4>)
 800138a:	400a      	ands	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  GPIO_MODER_MODER4_0;
 800138e:	2390      	movs	r3, #144	; 0x90
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2390      	movs	r3, #144	; 0x90
 8001396:	05db      	lsls	r3, r3, #23
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	0049      	lsls	r1, r1, #1
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

    /* PA5 (SPI1_SCK), PA6 (SPI1_MISO) and PA7 (SPI1_MOSI)
       in alternate function mode */
    GPIOA->MODER |=  GPIO_MODER_MODER5_1;
 80013a0:	2390      	movs	r3, #144	; 0x90
 80013a2:	05db      	lsls	r3, r3, #23
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	2390      	movs	r3, #144	; 0x90
 80013a8:	05db      	lsls	r3, r3, #23
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	0109      	lsls	r1, r1, #4
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODER5_0;
 80013b2:	2390      	movs	r3, #144	; 0x90
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2390      	movs	r3, #144	; 0x90
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	4955      	ldr	r1, [pc, #340]	; (8001514 <SPI1_GPIO_Init+0x1a8>)
 80013be:	400a      	ands	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  GPIO_MODER_MODER6_1;
 80013c2:	2390      	movs	r3, #144	; 0x90
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2390      	movs	r3, #144	; 0x90
 80013ca:	05db      	lsls	r3, r3, #23
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0189      	lsls	r1, r1, #6
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODER6_0;
 80013d4:	2390      	movs	r3, #144	; 0x90
 80013d6:	05db      	lsls	r3, r3, #23
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2390      	movs	r3, #144	; 0x90
 80013dc:	05db      	lsls	r3, r3, #23
 80013de:	494e      	ldr	r1, [pc, #312]	; (8001518 <SPI1_GPIO_Init+0x1ac>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  GPIO_MODER_MODER7_1;
 80013e4:	2390      	movs	r3, #144	; 0x90
 80013e6:	05db      	lsls	r3, r3, #23
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2390      	movs	r3, #144	; 0x90
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	0209      	lsls	r1, r1, #8
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODER7_0;
 80013f6:	2390      	movs	r3, #144	; 0x90
 80013f8:	05db      	lsls	r3, r3, #23
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2390      	movs	r3, #144	; 0x90
 80013fe:	05db      	lsls	r3, r3, #23
 8001400:	4946      	ldr	r1, [pc, #280]	; (800151c <SPI1_GPIO_Init+0x1b0>)
 8001402:	400a      	ands	r2, r1
 8001404:	601a      	str	r2, [r3, #0]

    /* PA4 (SPI1_CE), PA5 (SPI1_SCK), PA6 (SPI1_MISO) and PA7 (SPI1_MOSI)
       in output push-pull mode */
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT_4;
 8001406:	2390      	movs	r3, #144	; 0x90
 8001408:	05db      	lsls	r3, r3, #23
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	2390      	movs	r3, #144	; 0x90
 800140e:	05db      	lsls	r3, r3, #23
 8001410:	2110      	movs	r1, #16
 8001412:	438a      	bics	r2, r1
 8001414:	605a      	str	r2, [r3, #4]
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8001416:	2390      	movs	r3, #144	; 0x90
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	2390      	movs	r3, #144	; 0x90
 800141e:	05db      	lsls	r3, r3, #23
 8001420:	2120      	movs	r1, #32
 8001422:	438a      	bics	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT_6;
 8001426:	2390      	movs	r3, #144	; 0x90
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	2390      	movs	r3, #144	; 0x90
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	2140      	movs	r1, #64	; 0x40
 8001432:	438a      	bics	r2, r1
 8001434:	605a      	str	r2, [r3, #4]
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT_7;
 8001436:	2390      	movs	r3, #144	; 0x90
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	2390      	movs	r3, #144	; 0x90
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	438a      	bics	r2, r1
 8001444:	605a      	str	r2, [r3, #4]

    /* PA5 in AF0 (SPI1_SCK) */
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL5_3;
 8001446:	2390      	movs	r3, #144	; 0x90
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	6a1a      	ldr	r2, [r3, #32]
 800144c:	2390      	movs	r3, #144	; 0x90
 800144e:	05db      	lsls	r3, r3, #23
 8001450:	4933      	ldr	r1, [pc, #204]	; (8001520 <SPI1_GPIO_Init+0x1b4>)
 8001452:	400a      	ands	r2, r1
 8001454:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL5_2;
 8001456:	2390      	movs	r3, #144	; 0x90
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	6a1a      	ldr	r2, [r3, #32]
 800145c:	2390      	movs	r3, #144	; 0x90
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	4930      	ldr	r1, [pc, #192]	; (8001524 <SPI1_GPIO_Init+0x1b8>)
 8001462:	400a      	ands	r2, r1
 8001464:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL5_1;
 8001466:	2390      	movs	r3, #144	; 0x90
 8001468:	05db      	lsls	r3, r3, #23
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	2390      	movs	r3, #144	; 0x90
 800146e:	05db      	lsls	r3, r3, #23
 8001470:	492d      	ldr	r1, [pc, #180]	; (8001528 <SPI1_GPIO_Init+0x1bc>)
 8001472:	400a      	ands	r2, r1
 8001474:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL5_0;
 8001476:	2390      	movs	r3, #144	; 0x90
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	6a1a      	ldr	r2, [r3, #32]
 800147c:	2390      	movs	r3, #144	; 0x90
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	492a      	ldr	r1, [pc, #168]	; (800152c <SPI1_GPIO_Init+0x1c0>)
 8001482:	400a      	ands	r2, r1
 8001484:	621a      	str	r2, [r3, #32]

    /* PA6 in AF0 (SPI1_MISO) */
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL6_3;
 8001486:	2390      	movs	r3, #144	; 0x90
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	6a1a      	ldr	r2, [r3, #32]
 800148c:	2390      	movs	r3, #144	; 0x90
 800148e:	05db      	lsls	r3, r3, #23
 8001490:	4927      	ldr	r1, [pc, #156]	; (8001530 <SPI1_GPIO_Init+0x1c4>)
 8001492:	400a      	ands	r2, r1
 8001494:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL6_2;
 8001496:	2390      	movs	r3, #144	; 0x90
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	2390      	movs	r3, #144	; 0x90
 800149e:	05db      	lsls	r3, r3, #23
 80014a0:	4924      	ldr	r1, [pc, #144]	; (8001534 <SPI1_GPIO_Init+0x1c8>)
 80014a2:	400a      	ands	r2, r1
 80014a4:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL6_1;
 80014a6:	2390      	movs	r3, #144	; 0x90
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	6a1a      	ldr	r2, [r3, #32]
 80014ac:	2390      	movs	r3, #144	; 0x90
 80014ae:	05db      	lsls	r3, r3, #23
 80014b0:	4921      	ldr	r1, [pc, #132]	; (8001538 <SPI1_GPIO_Init+0x1cc>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL6_0;
 80014b6:	2390      	movs	r3, #144	; 0x90
 80014b8:	05db      	lsls	r3, r3, #23
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	2390      	movs	r3, #144	; 0x90
 80014be:	05db      	lsls	r3, r3, #23
 80014c0:	491e      	ldr	r1, [pc, #120]	; (800153c <SPI1_GPIO_Init+0x1d0>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	621a      	str	r2, [r3, #32]

    /* PA7 in AF0 (SPI1_MOSI) */
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL7_3;
 80014c6:	2390      	movs	r3, #144	; 0x90
 80014c8:	05db      	lsls	r3, r3, #23
 80014ca:	6a1a      	ldr	r2, [r3, #32]
 80014cc:	2390      	movs	r3, #144	; 0x90
 80014ce:	05db      	lsls	r3, r3, #23
 80014d0:	0052      	lsls	r2, r2, #1
 80014d2:	0852      	lsrs	r2, r2, #1
 80014d4:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL7_2;
 80014d6:	2390      	movs	r3, #144	; 0x90
 80014d8:	05db      	lsls	r3, r3, #23
 80014da:	6a1a      	ldr	r2, [r3, #32]
 80014dc:	2390      	movs	r3, #144	; 0x90
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	4917      	ldr	r1, [pc, #92]	; (8001540 <SPI1_GPIO_Init+0x1d4>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL7_1;
 80014e6:	2390      	movs	r3, #144	; 0x90
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	2390      	movs	r3, #144	; 0x90
 80014ee:	05db      	lsls	r3, r3, #23
 80014f0:	4914      	ldr	r1, [pc, #80]	; (8001544 <SPI1_GPIO_Init+0x1d8>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[ 0 ] &= ~GPIO_AFRL_AFSEL7_0;
 80014f6:	2390      	movs	r3, #144	; 0x90
 80014f8:	05db      	lsls	r3, r3, #23
 80014fa:	6a1a      	ldr	r2, [r3, #32]
 80014fc:	2390      	movs	r3, #144	; 0x90
 80014fe:	05db      	lsls	r3, r3, #23
 8001500:	4911      	ldr	r1, [pc, #68]	; (8001548 <SPI1_GPIO_Init+0x1dc>)
 8001502:	400a      	ands	r2, r1
 8001504:	621a      	str	r2, [r3, #32]
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	fffffdff 	.word	0xfffffdff
 8001514:	fffffbff 	.word	0xfffffbff
 8001518:	ffffefff 	.word	0xffffefff
 800151c:	ffffbfff 	.word	0xffffbfff
 8001520:	ff7fffff 	.word	0xff7fffff
 8001524:	ffbfffff 	.word	0xffbfffff
 8001528:	ffdfffff 	.word	0xffdfffff
 800152c:	ffefffff 	.word	0xffefffff
 8001530:	f7ffffff 	.word	0xf7ffffff
 8001534:	fbffffff 	.word	0xfbffffff
 8001538:	fdffffff 	.word	0xfdffffff
 800153c:	feffffff 	.word	0xfeffffff
 8001540:	bfffffff 	.word	0xbfffffff
 8001544:	dfffffff 	.word	0xdfffffff
 8001548:	efffffff 	.word	0xefffffff

0800154c <SPI1_Init>:

void SPI1_Init( void )
{   
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    /* enable GPIO resources for SPI1 */
    SPI1_GPIO_Init();
 8001550:	f7ff ff0c 	bl	800136c <SPI1_GPIO_Init>
   
    /* enable SPI1 clock access */
    SPI1_CLK_ENBL();
 8001554:	4b44      	ldr	r3, [pc, #272]	; (8001668 <SPI1_Init+0x11c>)
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <SPI1_Init+0x11c>)
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	0149      	lsls	r1, r1, #5
 800155e:	430a      	orrs	r2, r1
 8001560:	619a      	str	r2, [r3, #24]

    /* SPI1 2-line unidirectional data mode */
    SPI1->CR1 &= ~SPI_CR1_BIDIMODE;
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <SPI1_Init+0x120>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <SPI1_Init+0x120>)
 8001568:	4941      	ldr	r1, [pc, #260]	; (8001670 <SPI1_Init+0x124>)
 800156a:	400a      	ands	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
    
    /* SPI1 CRC disabled */
    SPI1->CR1 &= ~SPI_CR1_CRCEN;
 800156e:	4b3f      	ldr	r3, [pc, #252]	; (800166c <SPI1_Init+0x120>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b3e      	ldr	r3, [pc, #248]	; (800166c <SPI1_Init+0x120>)
 8001574:	493f      	ldr	r1, [pc, #252]	; (8001674 <SPI1_Init+0x128>)
 8001576:	400a      	ands	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

    /* SPI1 in full-duplex mode */
    SPI1->CR1 &= ~SPI_CR1_RXONLY;
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <SPI1_Init+0x120>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b3b      	ldr	r3, [pc, #236]	; (800166c <SPI1_Init+0x120>)
 8001580:	493d      	ldr	r1, [pc, #244]	; (8001678 <SPI1_Init+0x12c>)
 8001582:	400a      	ands	r2, r1
 8001584:	601a      	str	r2, [r3, #0]

    /* SPI1 software slave management disabled */
    SPI1->CR1 &= SPI_CR1_SSM;
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <SPI1_Init+0x120>)
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <SPI1_Init+0x120>)
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
       The value of this bit is forced onto the NSS pin and
       the I/O value of the NSS pin is ignored */
    /* SPI1->CR1 |= SPI_CR1_SSI; */

    /* SPI1 MSB transmitted/received first */
    SPI1->CR1 &= ~SPI_CR1_LSBFIRST;
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <SPI1_Init+0x120>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <SPI1_Init+0x120>)
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	438a      	bics	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

    /* SPI1 baud rate fPCLK/32.
       With fPCLK = 8 MHz (default),
       therefore SPI1 baud = 250 KHz */
    SPI1->CR1 |=  SPI_CR1_BR_2;
 80015a0:	4b32      	ldr	r3, [pc, #200]	; (800166c <SPI1_Init+0x120>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <SPI1_Init+0x120>)
 80015a6:	2120      	movs	r1, #32
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]
    SPI1->CR1 &= ~SPI_CR1_BR_1;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <SPI1_Init+0x120>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <SPI1_Init+0x120>)
 80015b2:	2110      	movs	r1, #16
 80015b4:	438a      	bics	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
    SPI1->CR1 &= ~SPI_CR1_BR_0;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <SPI1_Init+0x120>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <SPI1_Init+0x120>)
 80015be:	2108      	movs	r1, #8
 80015c0:	438a      	bics	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

    /* SPI1 as master */
    SPI1->CR1 |= SPI_CR1_MSTR;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <SPI1_Init+0x120>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <SPI1_Init+0x120>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

    /* SPI1 clock is HIGH when idle */
    SPI1->CR1 |= SPI_CR1_CPOL;
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <SPI1_Init+0x120>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <SPI1_Init+0x120>)
 80015d6:	2102      	movs	r1, #2
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

    /* SPI1 clock phase, 1st clock transition is the
       1st data capture edge */
    SPI1->CR1 |= SPI_CR1_CPHA;
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <SPI1_Init+0x120>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <SPI1_Init+0x120>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]

    /* SPI1 RXNE event generated if FIFO >= 8 bits */
    SPI1->CR2 |= SPI_CR2_FRXTH;
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <SPI1_Init+0x120>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <SPI1_Init+0x120>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0149      	lsls	r1, r1, #5
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]

    /* SPI1 8 bits Data size */
    SPI1->CR2 &= ~SPI_CR2_DS_3;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <SPI1_Init+0x120>)
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <SPI1_Init+0x120>)
 80015fc:	491f      	ldr	r1, [pc, #124]	; (800167c <SPI1_Init+0x130>)
 80015fe:	400a      	ands	r2, r1
 8001600:	605a      	str	r2, [r3, #4]
    SPI1->CR2 |=  SPI_CR2_DS_2;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <SPI1_Init+0x120>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <SPI1_Init+0x120>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	00c9      	lsls	r1, r1, #3
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]
    SPI1->CR2 |=  SPI_CR2_DS_1;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <SPI1_Init+0x120>)
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <SPI1_Init+0x120>)
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	0089      	lsls	r1, r1, #2
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
    SPI1->CR2 |=  SPI_CR2_DS_0;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <SPI1_Init+0x120>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <SPI1_Init+0x120>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	0049      	lsls	r1, r1, #1
 8001628:	430a      	orrs	r2, r1
 800162a:	605a      	str	r2, [r3, #4]

    /* SPI1 Motorola mode frame format */
    SPI1->CR2 &= ~SPI_CR2_FRF;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <SPI1_Init+0x120>)
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <SPI1_Init+0x120>)
 8001632:	2110      	movs	r1, #16
 8001634:	438a      	bics	r2, r1
 8001636:	605a      	str	r2, [r3, #4]

    /* SPI1 no NSS pulse */
    SPI1->CR2 &= ~SPI_CR2_NSSP;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <SPI1_Init+0x120>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <SPI1_Init+0x120>)
 800163e:	2108      	movs	r1, #8
 8001640:	438a      	bics	r2, r1
 8001642:	605a      	str	r2, [r3, #4]

    /* SPI1 SS output enabled */
    SPI1->CR2 |= SPI_CR2_SSOE;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <SPI1_Init+0x120>)
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <SPI1_Init+0x120>)
 800164a:	2104      	movs	r1, #4
 800164c:	430a      	orrs	r2, r1
 800164e:	605a      	str	r2, [r3, #4]

    /* enable SPI1 RX interrupt */
    /* SPI1_RX_Interrupt_Init(); */

    /* Set CS pin to IDLE state (HIGH) */
    SPI1_CS_Disable();
 8001650:	f000 f816 	bl	8001680 <SPI1_CS_Disable>

    /* enable SPI1 */
    SPI1->CR1 |= SPI_CR1_SPE;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <SPI1_Init+0x120>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SPI1_Init+0x120>)
 800165a:	2140      	movs	r1, #64	; 0x40
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	40021000 	.word	0x40021000
 800166c:	40013000 	.word	0x40013000
 8001670:	ffff7fff 	.word	0xffff7fff
 8001674:	ffffdfff 	.word	0xffffdfff
 8001678:	fffffbff 	.word	0xfffffbff
 800167c:	fffff7ff 	.word	0xfffff7ff

08001680 <SPI1_CS_Disable>:
    __enable_irq();
}
#endif

void SPI1_CS_Disable( void )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
    /* Set SPI1 CS pin to IDLE state (HIGH) */
    GPIOA->ODR |= GPIO_ODR_4;
 8001684:	2390      	movs	r3, #144	; 0x90
 8001686:	05db      	lsls	r3, r3, #23
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	2390      	movs	r3, #144	; 0x90
 800168c:	05db      	lsls	r3, r3, #23
 800168e:	2110      	movs	r1, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	615a      	str	r2, [r3, #20]
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <SPI1_CS_Enable>:

void SPI1_CS_Enable( void )
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
    /* Set SPI1 CS pin to LOW state (slave selected) */
    GPIOA->ODR &= ~GPIO_ODR_4;
 800169e:	2390      	movs	r3, #144	; 0x90
 80016a0:	05db      	lsls	r3, r3, #23
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	2390      	movs	r3, #144	; 0x90
 80016a6:	05db      	lsls	r3, r3, #23
 80016a8:	2110      	movs	r1, #16
 80016aa:	438a      	bics	r2, r1
 80016ac:	615a      	str	r2, [r3, #20]
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <SPI1_Write>:

void SPI1_Write( uint8_t *data, uint8_t size )
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	000a      	movs	r2, r1
 80016be:	1cfb      	adds	r3, r7, #3
 80016c0:	701a      	strb	r2, [r3, #0]
    uint8_t item;
    uint8_t temp;

    /* wait for SPI1 bus to be free */
    while ( ( SPI1->SR & SPI_SR_BSY ) == SPI_SR_BSY )
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <SPI1_Write+0x94>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b80      	cmp	r3, #128	; 0x80
 80016ce:	d0f9      	beq.n	80016c4 <SPI1_Write+0x10>
    {
        /* do nothing */
    }
    
    /* loop through the data array */
    for ( item = 0U; item < size; item++ )
 80016d0:	230f      	movs	r3, #15
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	e01e      	b.n	8001718 <SPI1_Write+0x64>
    {   
        /* send current byte from the data array */
        *( uint8_t * )( &( SPI1->DR ) ) = data[ item ];
 80016da:	230f      	movs	r3, #15
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	18d3      	adds	r3, r2, r3
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <SPI1_Write+0x98>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	7013      	strb	r3, [r2, #0]

        /* wait for SPI1 transmit buffer to be empty */
        while ( ( SPI1->SR & SPI_SR_TXE ) == 0U )
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <SPI1_Write+0x94>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0fa      	beq.n	80016ec <SPI1_Write+0x38>
                 data received in the MISO pin is sampled every clock cycle,
                 meaning that we send and receive data at the same time
                 although that may not be our intention. */

        /* wait for RX buffer to receive 1 byte data (FRXTH = 1) */
        while ( ( SPI1->SR & SPI_SR_RXNE ) == 0U )
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <SPI1_Write+0x94>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	d0fa      	beq.n	80016f8 <SPI1_Write+0x44>
        }

        /* store data read on MISO (this data will be ignored and not used)
            in order to clear the RX buffer. Also by reading data the 
            RXNE flag (receive buffer not empty) is automatically cleared */
        temp = ( uint8_t )( SPI1->DR );
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <SPI1_Write+0x94>)
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	230e      	movs	r3, #14
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	701a      	strb	r2, [r3, #0]
    for ( item = 0U; item < size; item++ )
 800170c:	210f      	movs	r1, #15
 800170e:	187b      	adds	r3, r7, r1
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	187b      	adds	r3, r7, r1
 8001714:	3201      	adds	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	230f      	movs	r3, #15
 800171a:	18fa      	adds	r2, r7, r3
 800171c:	1cfb      	adds	r3, r7, #3
 800171e:	7812      	ldrb	r2, [r2, #0]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d3d9      	bcc.n	80016da <SPI1_Write+0x26>
    }
      
    /* wait for SPI1 bus to be free */
    while ( ( SPI1->SR & SPI_SR_BSY ) == SPI_SR_BSY )
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <SPI1_Write+0x94>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	4013      	ands	r3, r2
 8001730:	2b80      	cmp	r3, #128	; 0x80
 8001732:	d0f9      	beq.n	8001728 <SPI1_Write+0x74>
        /* do nothing */
    }

    /* clear the overrun flag just in case the buffer is full and 
       attempt to store more receiving data on MISO is made */
    SPI1->SR &= ~SPI_SR_OVR;
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SPI1_Write+0x94>)
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <SPI1_Write+0x94>)
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	438a      	bics	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40013000 	.word	0x40013000
 800174c:	4001300c 	.word	0x4001300c

08001750 <SPI1_Read>:

void SPI1_Read( uint8_t *read, uint8_t size )
{   
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	000a      	movs	r2, r1
 800175a:	1cfb      	adds	r3, r7, #3
 800175c:	701a      	strb	r2, [r3, #0]
             data received in the MISO pin is sampled every clock cycle,
             meaning that we send and receive data at the same time
             although that may not be our intention. */
    
    /* store each data byte into the array */
    for ( item = 0; item < size; item++, read++ )
 800175e:	230f      	movs	r3, #15
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	e016      	b.n	8001796 <SPI1_Read+0x46>
    {
        /* send dummy data (this allows us to receive data on MISO) */
        *( uint8_t * )( &( SPI1->DR ) ) = 0U;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <SPI1_Read+0x60>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]

        /* wait for RX buffer to receive data */
        while ( ( SPI1->SR & SPI_SR_RXNE ) == 0U )
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <SPI1_Read+0x64>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	d0fa      	beq.n	8001770 <SPI1_Read+0x20>
            /* do nothing */
        }

        /* store received byte (this also clears
        the SPI1 RX buffer not empty flag) */
        *read = ( uint8_t )( SPI1->DR );
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <SPI1_Read+0x64>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	701a      	strb	r2, [r3, #0]
    for ( item = 0; item < size; item++, read++ )
 8001784:	210f      	movs	r1, #15
 8001786:	187b      	adds	r3, r7, r1
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	187b      	adds	r3, r7, r1
 800178c:	3201      	adds	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3301      	adds	r3, #1
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	230f      	movs	r3, #15
 8001798:	18fa      	adds	r2, r7, r3
 800179a:	1cfb      	adds	r3, r7, #3
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3e1      	bcc.n	8001768 <SPI1_Read+0x18>
    }
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	4001300c 	.word	0x4001300c
 80017b4:	40013000 	.word	0x40013000

080017b8 <__aeabi_fadd>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	0243      	lsls	r3, r0, #9
 80017bc:	0045      	lsls	r5, r0, #1
 80017be:	0fc4      	lsrs	r4, r0, #31
 80017c0:	0248      	lsls	r0, r1, #9
 80017c2:	0a42      	lsrs	r2, r0, #9
 80017c4:	4694      	mov	ip, r2
 80017c6:	004a      	lsls	r2, r1, #1
 80017c8:	0a5f      	lsrs	r7, r3, #9
 80017ca:	0e2d      	lsrs	r5, r5, #24
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	0e12      	lsrs	r2, r2, #24
 80017d0:	0fc9      	lsrs	r1, r1, #31
 80017d2:	0980      	lsrs	r0, r0, #6
 80017d4:	428c      	cmp	r4, r1
 80017d6:	d022      	beq.n	800181e <__aeabi_fadd+0x66>
 80017d8:	1aae      	subs	r6, r5, r2
 80017da:	2e00      	cmp	r6, #0
 80017dc:	dd0d      	ble.n	80017fa <__aeabi_fadd+0x42>
 80017de:	2a00      	cmp	r2, #0
 80017e0:	d12d      	bne.n	800183e <__aeabi_fadd+0x86>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d100      	bne.n	80017e8 <__aeabi_fadd+0x30>
 80017e6:	e083      	b.n	80018f0 <__aeabi_fadd+0x138>
 80017e8:	1e72      	subs	r2, r6, #1
 80017ea:	2e01      	cmp	r6, #1
 80017ec:	d100      	bne.n	80017f0 <__aeabi_fadd+0x38>
 80017ee:	e11b      	b.n	8001a28 <__aeabi_fadd+0x270>
 80017f0:	2eff      	cmp	r6, #255	; 0xff
 80017f2:	d100      	bne.n	80017f6 <__aeabi_fadd+0x3e>
 80017f4:	e0a2      	b.n	800193c <__aeabi_fadd+0x184>
 80017f6:	0016      	movs	r6, r2
 80017f8:	e027      	b.n	800184a <__aeabi_fadd+0x92>
 80017fa:	2e00      	cmp	r6, #0
 80017fc:	d048      	beq.n	8001890 <__aeabi_fadd+0xd8>
 80017fe:	1b56      	subs	r6, r2, r5
 8001800:	2d00      	cmp	r5, #0
 8001802:	d000      	beq.n	8001806 <__aeabi_fadd+0x4e>
 8001804:	e0c1      	b.n	800198a <__aeabi_fadd+0x1d2>
 8001806:	2b00      	cmp	r3, #0
 8001808:	d100      	bne.n	800180c <__aeabi_fadd+0x54>
 800180a:	e0f7      	b.n	80019fc <__aeabi_fadd+0x244>
 800180c:	1e74      	subs	r4, r6, #1
 800180e:	2e01      	cmp	r6, #1
 8001810:	d100      	bne.n	8001814 <__aeabi_fadd+0x5c>
 8001812:	e12d      	b.n	8001a70 <__aeabi_fadd+0x2b8>
 8001814:	2eff      	cmp	r6, #255	; 0xff
 8001816:	d100      	bne.n	800181a <__aeabi_fadd+0x62>
 8001818:	e08e      	b.n	8001938 <__aeabi_fadd+0x180>
 800181a:	0026      	movs	r6, r4
 800181c:	e0ba      	b.n	8001994 <__aeabi_fadd+0x1dc>
 800181e:	1aa9      	subs	r1, r5, r2
 8001820:	2900      	cmp	r1, #0
 8001822:	dc00      	bgt.n	8001826 <__aeabi_fadd+0x6e>
 8001824:	e08c      	b.n	8001940 <__aeabi_fadd+0x188>
 8001826:	2a00      	cmp	r2, #0
 8001828:	d046      	beq.n	80018b8 <__aeabi_fadd+0x100>
 800182a:	2dff      	cmp	r5, #255	; 0xff
 800182c:	d100      	bne.n	8001830 <__aeabi_fadd+0x78>
 800182e:	e085      	b.n	800193c <__aeabi_fadd+0x184>
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	04d2      	lsls	r2, r2, #19
 8001834:	4310      	orrs	r0, r2
 8001836:	291b      	cmp	r1, #27
 8001838:	dd49      	ble.n	80018ce <__aeabi_fadd+0x116>
 800183a:	3301      	adds	r3, #1
 800183c:	e016      	b.n	800186c <__aeabi_fadd+0xb4>
 800183e:	2dff      	cmp	r5, #255	; 0xff
 8001840:	d100      	bne.n	8001844 <__aeabi_fadd+0x8c>
 8001842:	e07b      	b.n	800193c <__aeabi_fadd+0x184>
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	04d2      	lsls	r2, r2, #19
 8001848:	4310      	orrs	r0, r2
 800184a:	2201      	movs	r2, #1
 800184c:	2e1b      	cmp	r6, #27
 800184e:	dc07      	bgt.n	8001860 <__aeabi_fadd+0xa8>
 8001850:	2120      	movs	r1, #32
 8001852:	1b89      	subs	r1, r1, r6
 8001854:	0002      	movs	r2, r0
 8001856:	4088      	lsls	r0, r1
 8001858:	40f2      	lsrs	r2, r6
 800185a:	1e41      	subs	r1, r0, #1
 800185c:	4188      	sbcs	r0, r1
 800185e:	4302      	orrs	r2, r0
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	015a      	lsls	r2, r3, #5
 8001864:	d451      	bmi.n	800190a <__aeabi_fadd+0x152>
 8001866:	2207      	movs	r2, #7
 8001868:	401a      	ands	r2, r3
 800186a:	d042      	beq.n	80018f2 <__aeabi_fadd+0x13a>
 800186c:	220f      	movs	r2, #15
 800186e:	401a      	ands	r2, r3
 8001870:	2a04      	cmp	r2, #4
 8001872:	d000      	beq.n	8001876 <__aeabi_fadd+0xbe>
 8001874:	3304      	adds	r3, #4
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	d53b      	bpl.n	80018f2 <__aeabi_fadd+0x13a>
 800187a:	1c68      	adds	r0, r5, #1
 800187c:	2dfe      	cmp	r5, #254	; 0xfe
 800187e:	d034      	beq.n	80018ea <__aeabi_fadd+0x132>
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	0a5b      	lsrs	r3, r3, #9
 8001884:	b2c0      	uxtb	r0, r0
 8001886:	05c0      	lsls	r0, r0, #23
 8001888:	4318      	orrs	r0, r3
 800188a:	07e4      	lsls	r4, r4, #31
 800188c:	4320      	orrs	r0, r4
 800188e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001890:	26fe      	movs	r6, #254	; 0xfe
 8001892:	1c6a      	adds	r2, r5, #1
 8001894:	4216      	tst	r6, r2
 8001896:	d000      	beq.n	800189a <__aeabi_fadd+0xe2>
 8001898:	e08b      	b.n	80019b2 <__aeabi_fadd+0x1fa>
 800189a:	2d00      	cmp	r5, #0
 800189c:	d000      	beq.n	80018a0 <__aeabi_fadd+0xe8>
 800189e:	e0b1      	b.n	8001a04 <__aeabi_fadd+0x24c>
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d100      	bne.n	80018a6 <__aeabi_fadd+0xee>
 80018a4:	e0df      	b.n	8001a66 <__aeabi_fadd+0x2ae>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d069      	beq.n	800197e <__aeabi_fadd+0x1c6>
 80018aa:	1a1a      	subs	r2, r3, r0
 80018ac:	0156      	lsls	r6, r2, #5
 80018ae:	d400      	bmi.n	80018b2 <__aeabi_fadd+0xfa>
 80018b0:	e0fb      	b.n	8001aaa <__aeabi_fadd+0x2f2>
 80018b2:	000c      	movs	r4, r1
 80018b4:	1ac3      	subs	r3, r0, r3
 80018b6:	e03c      	b.n	8001932 <__aeabi_fadd+0x17a>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d100      	bne.n	80018be <__aeabi_fadd+0x106>
 80018bc:	e0b7      	b.n	8001a2e <__aeabi_fadd+0x276>
 80018be:	1e4a      	subs	r2, r1, #1
 80018c0:	2901      	cmp	r1, #1
 80018c2:	d100      	bne.n	80018c6 <__aeabi_fadd+0x10e>
 80018c4:	e0aa      	b.n	8001a1c <__aeabi_fadd+0x264>
 80018c6:	29ff      	cmp	r1, #255	; 0xff
 80018c8:	d038      	beq.n	800193c <__aeabi_fadd+0x184>
 80018ca:	0011      	movs	r1, r2
 80018cc:	e7b3      	b.n	8001836 <__aeabi_fadd+0x7e>
 80018ce:	0002      	movs	r2, r0
 80018d0:	2620      	movs	r6, #32
 80018d2:	40ca      	lsrs	r2, r1
 80018d4:	1a71      	subs	r1, r6, r1
 80018d6:	4088      	lsls	r0, r1
 80018d8:	1e41      	subs	r1, r0, #1
 80018da:	4188      	sbcs	r0, r1
 80018dc:	4310      	orrs	r0, r2
 80018de:	181b      	adds	r3, r3, r0
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	d5c0      	bpl.n	8001866 <__aeabi_fadd+0xae>
 80018e4:	3501      	adds	r5, #1
 80018e6:	2dff      	cmp	r5, #255	; 0xff
 80018e8:	d16c      	bne.n	80019c4 <__aeabi_fadd+0x20c>
 80018ea:	20ff      	movs	r0, #255	; 0xff
 80018ec:	2300      	movs	r3, #0
 80018ee:	e7ca      	b.n	8001886 <__aeabi_fadd+0xce>
 80018f0:	0035      	movs	r5, r6
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	2dff      	cmp	r5, #255	; 0xff
 80018f6:	d144      	bne.n	8001982 <__aeabi_fadd+0x1ca>
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f6      	beq.n	80018ea <__aeabi_fadd+0x132>
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	03d2      	lsls	r2, r2, #15
 8001900:	4313      	orrs	r3, r2
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	20ff      	movs	r0, #255	; 0xff
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	e7bd      	b.n	8001886 <__aeabi_fadd+0xce>
 800190a:	019e      	lsls	r6, r3, #6
 800190c:	09b6      	lsrs	r6, r6, #6
 800190e:	0030      	movs	r0, r6
 8001910:	f7fe fc9c 	bl	800024c <__clzsi2>
 8001914:	3805      	subs	r0, #5
 8001916:	4086      	lsls	r6, r0
 8001918:	4285      	cmp	r5, r0
 800191a:	dc20      	bgt.n	800195e <__aeabi_fadd+0x1a6>
 800191c:	2220      	movs	r2, #32
 800191e:	1b40      	subs	r0, r0, r5
 8001920:	3001      	adds	r0, #1
 8001922:	1a12      	subs	r2, r2, r0
 8001924:	0033      	movs	r3, r6
 8001926:	4096      	lsls	r6, r2
 8001928:	40c3      	lsrs	r3, r0
 800192a:	1e72      	subs	r2, r6, #1
 800192c:	4196      	sbcs	r6, r2
 800192e:	2500      	movs	r5, #0
 8001930:	4333      	orrs	r3, r6
 8001932:	075a      	lsls	r2, r3, #29
 8001934:	d19a      	bne.n	800186c <__aeabi_fadd+0xb4>
 8001936:	e79e      	b.n	8001876 <__aeabi_fadd+0xbe>
 8001938:	000c      	movs	r4, r1
 800193a:	0003      	movs	r3, r0
 800193c:	08db      	lsrs	r3, r3, #3
 800193e:	e7db      	b.n	80018f8 <__aeabi_fadd+0x140>
 8001940:	2900      	cmp	r1, #0
 8001942:	d010      	beq.n	8001966 <__aeabi_fadd+0x1ae>
 8001944:	1b51      	subs	r1, r2, r5
 8001946:	2d00      	cmp	r5, #0
 8001948:	d143      	bne.n	80019d2 <__aeabi_fadd+0x21a>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d100      	bne.n	8001950 <__aeabi_fadd+0x198>
 800194e:	e093      	b.n	8001a78 <__aeabi_fadd+0x2c0>
 8001950:	1e4d      	subs	r5, r1, #1
 8001952:	2901      	cmp	r1, #1
 8001954:	d062      	beq.n	8001a1c <__aeabi_fadd+0x264>
 8001956:	29ff      	cmp	r1, #255	; 0xff
 8001958:	d0ef      	beq.n	800193a <__aeabi_fadd+0x182>
 800195a:	0029      	movs	r1, r5
 800195c:	e03e      	b.n	80019dc <__aeabi_fadd+0x224>
 800195e:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <__aeabi_fadd+0x2fc>)
 8001960:	1a2d      	subs	r5, r5, r0
 8001962:	4033      	ands	r3, r6
 8001964:	e7e5      	b.n	8001932 <__aeabi_fadd+0x17a>
 8001966:	21fe      	movs	r1, #254	; 0xfe
 8001968:	1c6a      	adds	r2, r5, #1
 800196a:	4211      	tst	r1, r2
 800196c:	d13b      	bne.n	80019e6 <__aeabi_fadd+0x22e>
 800196e:	2d00      	cmp	r5, #0
 8001970:	d16a      	bne.n	8001a48 <__aeabi_fadd+0x290>
 8001972:	2b00      	cmp	r3, #0
 8001974:	d100      	bne.n	8001978 <__aeabi_fadd+0x1c0>
 8001976:	e08e      	b.n	8001a96 <__aeabi_fadd+0x2de>
 8001978:	2800      	cmp	r0, #0
 800197a:	d000      	beq.n	800197e <__aeabi_fadd+0x1c6>
 800197c:	e08d      	b.n	8001a9a <__aeabi_fadd+0x2e2>
 800197e:	2500      	movs	r5, #0
 8001980:	08db      	lsrs	r3, r3, #3
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	0a5b      	lsrs	r3, r3, #9
 8001986:	b2e8      	uxtb	r0, r5
 8001988:	e77d      	b.n	8001886 <__aeabi_fadd+0xce>
 800198a:	2aff      	cmp	r2, #255	; 0xff
 800198c:	d0d4      	beq.n	8001938 <__aeabi_fadd+0x180>
 800198e:	2480      	movs	r4, #128	; 0x80
 8001990:	04e4      	lsls	r4, r4, #19
 8001992:	4323      	orrs	r3, r4
 8001994:	2401      	movs	r4, #1
 8001996:	2e1b      	cmp	r6, #27
 8001998:	dc07      	bgt.n	80019aa <__aeabi_fadd+0x1f2>
 800199a:	2520      	movs	r5, #32
 800199c:	1bad      	subs	r5, r5, r6
 800199e:	001c      	movs	r4, r3
 80019a0:	40ab      	lsls	r3, r5
 80019a2:	40f4      	lsrs	r4, r6
 80019a4:	1e5d      	subs	r5, r3, #1
 80019a6:	41ab      	sbcs	r3, r5
 80019a8:	431c      	orrs	r4, r3
 80019aa:	1b03      	subs	r3, r0, r4
 80019ac:	0015      	movs	r5, r2
 80019ae:	000c      	movs	r4, r1
 80019b0:	e757      	b.n	8001862 <__aeabi_fadd+0xaa>
 80019b2:	1a1e      	subs	r6, r3, r0
 80019b4:	0172      	lsls	r2, r6, #5
 80019b6:	d42e      	bmi.n	8001a16 <__aeabi_fadd+0x25e>
 80019b8:	2e00      	cmp	r6, #0
 80019ba:	d1a8      	bne.n	800190e <__aeabi_fadd+0x156>
 80019bc:	2400      	movs	r4, #0
 80019be:	2000      	movs	r0, #0
 80019c0:	2300      	movs	r3, #0
 80019c2:	e760      	b.n	8001886 <__aeabi_fadd+0xce>
 80019c4:	2201      	movs	r2, #1
 80019c6:	493c      	ldr	r1, [pc, #240]	; (8001ab8 <__aeabi_fadd+0x300>)
 80019c8:	401a      	ands	r2, r3
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	400b      	ands	r3, r1
 80019ce:	4313      	orrs	r3, r2
 80019d0:	e7af      	b.n	8001932 <__aeabi_fadd+0x17a>
 80019d2:	2aff      	cmp	r2, #255	; 0xff
 80019d4:	d0b1      	beq.n	800193a <__aeabi_fadd+0x182>
 80019d6:	2580      	movs	r5, #128	; 0x80
 80019d8:	04ed      	lsls	r5, r5, #19
 80019da:	432b      	orrs	r3, r5
 80019dc:	291b      	cmp	r1, #27
 80019de:	dd28      	ble.n	8001a32 <__aeabi_fadd+0x27a>
 80019e0:	0015      	movs	r5, r2
 80019e2:	1c43      	adds	r3, r0, #1
 80019e4:	e742      	b.n	800186c <__aeabi_fadd+0xb4>
 80019e6:	2aff      	cmp	r2, #255	; 0xff
 80019e8:	d100      	bne.n	80019ec <__aeabi_fadd+0x234>
 80019ea:	e77e      	b.n	80018ea <__aeabi_fadd+0x132>
 80019ec:	181b      	adds	r3, r3, r0
 80019ee:	085b      	lsrs	r3, r3, #1
 80019f0:	0015      	movs	r5, r2
 80019f2:	075a      	lsls	r2, r3, #29
 80019f4:	d000      	beq.n	80019f8 <__aeabi_fadd+0x240>
 80019f6:	e739      	b.n	800186c <__aeabi_fadd+0xb4>
 80019f8:	08db      	lsrs	r3, r3, #3
 80019fa:	e7c2      	b.n	8001982 <__aeabi_fadd+0x1ca>
 80019fc:	000c      	movs	r4, r1
 80019fe:	0035      	movs	r5, r6
 8001a00:	0003      	movs	r3, r0
 8001a02:	e776      	b.n	80018f2 <__aeabi_fadd+0x13a>
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d13a      	bne.n	8001a7e <__aeabi_fadd+0x2c6>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d195      	bne.n	8001938 <__aeabi_fadd+0x180>
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	2400      	movs	r4, #0
 8001a10:	20ff      	movs	r0, #255	; 0xff
 8001a12:	03db      	lsls	r3, r3, #15
 8001a14:	e737      	b.n	8001886 <__aeabi_fadd+0xce>
 8001a16:	000c      	movs	r4, r1
 8001a18:	1ac6      	subs	r6, r0, r3
 8001a1a:	e778      	b.n	800190e <__aeabi_fadd+0x156>
 8001a1c:	181b      	adds	r3, r3, r0
 8001a1e:	2502      	movs	r5, #2
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	d4cf      	bmi.n	80019c4 <__aeabi_fadd+0x20c>
 8001a24:	3d01      	subs	r5, #1
 8001a26:	e71e      	b.n	8001866 <__aeabi_fadd+0xae>
 8001a28:	2501      	movs	r5, #1
 8001a2a:	1a1b      	subs	r3, r3, r0
 8001a2c:	e719      	b.n	8001862 <__aeabi_fadd+0xaa>
 8001a2e:	000d      	movs	r5, r1
 8001a30:	e75f      	b.n	80018f2 <__aeabi_fadd+0x13a>
 8001a32:	001d      	movs	r5, r3
 8001a34:	2620      	movs	r6, #32
 8001a36:	40cd      	lsrs	r5, r1
 8001a38:	1a71      	subs	r1, r6, r1
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	1e59      	subs	r1, r3, #1
 8001a3e:	418b      	sbcs	r3, r1
 8001a40:	432b      	orrs	r3, r5
 8001a42:	181b      	adds	r3, r3, r0
 8001a44:	0015      	movs	r5, r2
 8001a46:	e74b      	b.n	80018e0 <__aeabi_fadd+0x128>
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_fadd+0x296>
 8001a4c:	e775      	b.n	800193a <__aeabi_fadd+0x182>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_fadd+0x29c>
 8001a52:	e773      	b.n	800193c <__aeabi_fadd+0x184>
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	03d2      	lsls	r2, r2, #15
 8001a58:	4297      	cmp	r7, r2
 8001a5a:	d302      	bcc.n	8001a62 <__aeabi_fadd+0x2aa>
 8001a5c:	4594      	cmp	ip, r2
 8001a5e:	d200      	bcs.n	8001a62 <__aeabi_fadd+0x2aa>
 8001a60:	0003      	movs	r3, r0
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	e74a      	b.n	80018fc <__aeabi_fadd+0x144>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d0a8      	beq.n	80019bc <__aeabi_fadd+0x204>
 8001a6a:	000c      	movs	r4, r1
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	e786      	b.n	800197e <__aeabi_fadd+0x1c6>
 8001a70:	000c      	movs	r4, r1
 8001a72:	1ac3      	subs	r3, r0, r3
 8001a74:	3501      	adds	r5, #1
 8001a76:	e6f4      	b.n	8001862 <__aeabi_fadd+0xaa>
 8001a78:	000d      	movs	r5, r1
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	e739      	b.n	80018f2 <__aeabi_fadd+0x13a>
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d100      	bne.n	8001a84 <__aeabi_fadd+0x2cc>
 8001a82:	e75b      	b.n	800193c <__aeabi_fadd+0x184>
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	03d2      	lsls	r2, r2, #15
 8001a88:	4297      	cmp	r7, r2
 8001a8a:	d3ea      	bcc.n	8001a62 <__aeabi_fadd+0x2aa>
 8001a8c:	4594      	cmp	ip, r2
 8001a8e:	d2e8      	bcs.n	8001a62 <__aeabi_fadd+0x2aa>
 8001a90:	000c      	movs	r4, r1
 8001a92:	0003      	movs	r3, r0
 8001a94:	e7e5      	b.n	8001a62 <__aeabi_fadd+0x2aa>
 8001a96:	0003      	movs	r3, r0
 8001a98:	e771      	b.n	800197e <__aeabi_fadd+0x1c6>
 8001a9a:	181b      	adds	r3, r3, r0
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	d5ab      	bpl.n	80019f8 <__aeabi_fadd+0x240>
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <__aeabi_fadd+0x2fc>)
 8001aa2:	3501      	adds	r5, #1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	08db      	lsrs	r3, r3, #3
 8001aa8:	e76b      	b.n	8001982 <__aeabi_fadd+0x1ca>
 8001aaa:	1e13      	subs	r3, r2, #0
 8001aac:	d086      	beq.n	80019bc <__aeabi_fadd+0x204>
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	e767      	b.n	8001982 <__aeabi_fadd+0x1ca>
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	fbffffff 	.word	0xfbffffff
 8001ab8:	7dffffff 	.word	0x7dffffff

08001abc <__eqsf2>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	0042      	lsls	r2, r0, #1
 8001ac0:	024e      	lsls	r6, r1, #9
 8001ac2:	004c      	lsls	r4, r1, #1
 8001ac4:	0245      	lsls	r5, r0, #9
 8001ac6:	0a6d      	lsrs	r5, r5, #9
 8001ac8:	0e12      	lsrs	r2, r2, #24
 8001aca:	0fc3      	lsrs	r3, r0, #31
 8001acc:	0a76      	lsrs	r6, r6, #9
 8001ace:	0e24      	lsrs	r4, r4, #24
 8001ad0:	0fc9      	lsrs	r1, r1, #31
 8001ad2:	2aff      	cmp	r2, #255	; 0xff
 8001ad4:	d010      	beq.n	8001af8 <__eqsf2+0x3c>
 8001ad6:	2cff      	cmp	r4, #255	; 0xff
 8001ad8:	d00c      	beq.n	8001af4 <__eqsf2+0x38>
 8001ada:	2001      	movs	r0, #1
 8001adc:	42a2      	cmp	r2, r4
 8001ade:	d10a      	bne.n	8001af6 <__eqsf2+0x3a>
 8001ae0:	42b5      	cmp	r5, r6
 8001ae2:	d108      	bne.n	8001af6 <__eqsf2+0x3a>
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	d00f      	beq.n	8001b08 <__eqsf2+0x4c>
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d104      	bne.n	8001af6 <__eqsf2+0x3a>
 8001aec:	0028      	movs	r0, r5
 8001aee:	1e43      	subs	r3, r0, #1
 8001af0:	4198      	sbcs	r0, r3
 8001af2:	e000      	b.n	8001af6 <__eqsf2+0x3a>
 8001af4:	2001      	movs	r0, #1
 8001af6:	bd70      	pop	{r4, r5, r6, pc}
 8001af8:	2001      	movs	r0, #1
 8001afa:	2cff      	cmp	r4, #255	; 0xff
 8001afc:	d1fb      	bne.n	8001af6 <__eqsf2+0x3a>
 8001afe:	4335      	orrs	r5, r6
 8001b00:	d1f9      	bne.n	8001af6 <__eqsf2+0x3a>
 8001b02:	404b      	eors	r3, r1
 8001b04:	0018      	movs	r0, r3
 8001b06:	e7f6      	b.n	8001af6 <__eqsf2+0x3a>
 8001b08:	2000      	movs	r0, #0
 8001b0a:	e7f4      	b.n	8001af6 <__eqsf2+0x3a>

08001b0c <__gesf2>:
 8001b0c:	b530      	push	{r4, r5, lr}
 8001b0e:	0042      	lsls	r2, r0, #1
 8001b10:	0244      	lsls	r4, r0, #9
 8001b12:	024d      	lsls	r5, r1, #9
 8001b14:	0fc3      	lsrs	r3, r0, #31
 8001b16:	0048      	lsls	r0, r1, #1
 8001b18:	0a64      	lsrs	r4, r4, #9
 8001b1a:	0e12      	lsrs	r2, r2, #24
 8001b1c:	0a6d      	lsrs	r5, r5, #9
 8001b1e:	0e00      	lsrs	r0, r0, #24
 8001b20:	0fc9      	lsrs	r1, r1, #31
 8001b22:	2aff      	cmp	r2, #255	; 0xff
 8001b24:	d019      	beq.n	8001b5a <__gesf2+0x4e>
 8001b26:	28ff      	cmp	r0, #255	; 0xff
 8001b28:	d00b      	beq.n	8001b42 <__gesf2+0x36>
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	d11e      	bne.n	8001b6c <__gesf2+0x60>
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d10b      	bne.n	8001b4a <__gesf2+0x3e>
 8001b32:	2d00      	cmp	r5, #0
 8001b34:	d027      	beq.n	8001b86 <__gesf2+0x7a>
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d134      	bne.n	8001ba4 <__gesf2+0x98>
 8001b3a:	2900      	cmp	r1, #0
 8001b3c:	d02f      	beq.n	8001b9e <__gesf2+0x92>
 8001b3e:	0008      	movs	r0, r1
 8001b40:	bd30      	pop	{r4, r5, pc}
 8001b42:	2d00      	cmp	r5, #0
 8001b44:	d128      	bne.n	8001b98 <__gesf2+0x8c>
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d101      	bne.n	8001b4e <__gesf2+0x42>
 8001b4a:	2c00      	cmp	r4, #0
 8001b4c:	d0f5      	beq.n	8001b3a <__gesf2+0x2e>
 8001b4e:	428b      	cmp	r3, r1
 8001b50:	d107      	bne.n	8001b62 <__gesf2+0x56>
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d023      	beq.n	8001b9e <__gesf2+0x92>
 8001b56:	0018      	movs	r0, r3
 8001b58:	e7f2      	b.n	8001b40 <__gesf2+0x34>
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d11c      	bne.n	8001b98 <__gesf2+0x8c>
 8001b5e:	28ff      	cmp	r0, #255	; 0xff
 8001b60:	d014      	beq.n	8001b8c <__gesf2+0x80>
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	2302      	movs	r3, #2
 8001b66:	4018      	ands	r0, r3
 8001b68:	3801      	subs	r0, #1
 8001b6a:	e7e9      	b.n	8001b40 <__gesf2+0x34>
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d0f8      	beq.n	8001b62 <__gesf2+0x56>
 8001b70:	428b      	cmp	r3, r1
 8001b72:	d1f6      	bne.n	8001b62 <__gesf2+0x56>
 8001b74:	4282      	cmp	r2, r0
 8001b76:	dcf4      	bgt.n	8001b62 <__gesf2+0x56>
 8001b78:	dbeb      	blt.n	8001b52 <__gesf2+0x46>
 8001b7a:	42ac      	cmp	r4, r5
 8001b7c:	d8f1      	bhi.n	8001b62 <__gesf2+0x56>
 8001b7e:	2000      	movs	r0, #0
 8001b80:	42ac      	cmp	r4, r5
 8001b82:	d2dd      	bcs.n	8001b40 <__gesf2+0x34>
 8001b84:	e7e5      	b.n	8001b52 <__gesf2+0x46>
 8001b86:	2c00      	cmp	r4, #0
 8001b88:	d0da      	beq.n	8001b40 <__gesf2+0x34>
 8001b8a:	e7ea      	b.n	8001b62 <__gesf2+0x56>
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d103      	bne.n	8001b98 <__gesf2+0x8c>
 8001b90:	428b      	cmp	r3, r1
 8001b92:	d1e6      	bne.n	8001b62 <__gesf2+0x56>
 8001b94:	2000      	movs	r0, #0
 8001b96:	e7d3      	b.n	8001b40 <__gesf2+0x34>
 8001b98:	2002      	movs	r0, #2
 8001b9a:	4240      	negs	r0, r0
 8001b9c:	e7d0      	b.n	8001b40 <__gesf2+0x34>
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	4240      	negs	r0, r0
 8001ba2:	e7cd      	b.n	8001b40 <__gesf2+0x34>
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d0e8      	beq.n	8001b7a <__gesf2+0x6e>
 8001ba8:	e7db      	b.n	8001b62 <__gesf2+0x56>
 8001baa:	46c0      	nop			; (mov r8, r8)

08001bac <__lesf2>:
 8001bac:	b530      	push	{r4, r5, lr}
 8001bae:	0042      	lsls	r2, r0, #1
 8001bb0:	0244      	lsls	r4, r0, #9
 8001bb2:	024d      	lsls	r5, r1, #9
 8001bb4:	0fc3      	lsrs	r3, r0, #31
 8001bb6:	0048      	lsls	r0, r1, #1
 8001bb8:	0a64      	lsrs	r4, r4, #9
 8001bba:	0e12      	lsrs	r2, r2, #24
 8001bbc:	0a6d      	lsrs	r5, r5, #9
 8001bbe:	0e00      	lsrs	r0, r0, #24
 8001bc0:	0fc9      	lsrs	r1, r1, #31
 8001bc2:	2aff      	cmp	r2, #255	; 0xff
 8001bc4:	d01a      	beq.n	8001bfc <__lesf2+0x50>
 8001bc6:	28ff      	cmp	r0, #255	; 0xff
 8001bc8:	d00e      	beq.n	8001be8 <__lesf2+0x3c>
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d11e      	bne.n	8001c0c <__lesf2+0x60>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d10e      	bne.n	8001bf0 <__lesf2+0x44>
 8001bd2:	2d00      	cmp	r5, #0
 8001bd4:	d02a      	beq.n	8001c2c <__lesf2+0x80>
 8001bd6:	2c00      	cmp	r4, #0
 8001bd8:	d00c      	beq.n	8001bf4 <__lesf2+0x48>
 8001bda:	428b      	cmp	r3, r1
 8001bdc:	d01d      	beq.n	8001c1a <__lesf2+0x6e>
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	2302      	movs	r3, #2
 8001be2:	4018      	ands	r0, r3
 8001be4:	3801      	subs	r0, #1
 8001be6:	e010      	b.n	8001c0a <__lesf2+0x5e>
 8001be8:	2d00      	cmp	r5, #0
 8001bea:	d10d      	bne.n	8001c08 <__lesf2+0x5c>
 8001bec:	2a00      	cmp	r2, #0
 8001bee:	d120      	bne.n	8001c32 <__lesf2+0x86>
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d11e      	bne.n	8001c32 <__lesf2+0x86>
 8001bf4:	2900      	cmp	r1, #0
 8001bf6:	d023      	beq.n	8001c40 <__lesf2+0x94>
 8001bf8:	0008      	movs	r0, r1
 8001bfa:	e006      	b.n	8001c0a <__lesf2+0x5e>
 8001bfc:	2c00      	cmp	r4, #0
 8001bfe:	d103      	bne.n	8001c08 <__lesf2+0x5c>
 8001c00:	28ff      	cmp	r0, #255	; 0xff
 8001c02:	d1ec      	bne.n	8001bde <__lesf2+0x32>
 8001c04:	2d00      	cmp	r5, #0
 8001c06:	d017      	beq.n	8001c38 <__lesf2+0x8c>
 8001c08:	2002      	movs	r0, #2
 8001c0a:	bd30      	pop	{r4, r5, pc}
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d0e6      	beq.n	8001bde <__lesf2+0x32>
 8001c10:	428b      	cmp	r3, r1
 8001c12:	d1e4      	bne.n	8001bde <__lesf2+0x32>
 8001c14:	4282      	cmp	r2, r0
 8001c16:	dce2      	bgt.n	8001bde <__lesf2+0x32>
 8001c18:	db04      	blt.n	8001c24 <__lesf2+0x78>
 8001c1a:	42ac      	cmp	r4, r5
 8001c1c:	d8df      	bhi.n	8001bde <__lesf2+0x32>
 8001c1e:	2000      	movs	r0, #0
 8001c20:	42ac      	cmp	r4, r5
 8001c22:	d2f2      	bcs.n	8001c0a <__lesf2+0x5e>
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00b      	beq.n	8001c40 <__lesf2+0x94>
 8001c28:	0018      	movs	r0, r3
 8001c2a:	e7ee      	b.n	8001c0a <__lesf2+0x5e>
 8001c2c:	2c00      	cmp	r4, #0
 8001c2e:	d0ec      	beq.n	8001c0a <__lesf2+0x5e>
 8001c30:	e7d5      	b.n	8001bde <__lesf2+0x32>
 8001c32:	428b      	cmp	r3, r1
 8001c34:	d1d3      	bne.n	8001bde <__lesf2+0x32>
 8001c36:	e7f5      	b.n	8001c24 <__lesf2+0x78>
 8001c38:	2000      	movs	r0, #0
 8001c3a:	428b      	cmp	r3, r1
 8001c3c:	d0e5      	beq.n	8001c0a <__lesf2+0x5e>
 8001c3e:	e7ce      	b.n	8001bde <__lesf2+0x32>
 8001c40:	2001      	movs	r0, #1
 8001c42:	4240      	negs	r0, r0
 8001c44:	e7e1      	b.n	8001c0a <__lesf2+0x5e>
 8001c46:	46c0      	nop			; (mov r8, r8)

08001c48 <__aeabi_fmul>:
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	464f      	mov	r7, r9
 8001c4c:	4646      	mov	r6, r8
 8001c4e:	46d6      	mov	lr, sl
 8001c50:	0243      	lsls	r3, r0, #9
 8001c52:	0a5b      	lsrs	r3, r3, #9
 8001c54:	4699      	mov	r9, r3
 8001c56:	0043      	lsls	r3, r0, #1
 8001c58:	b5c0      	push	{r6, r7, lr}
 8001c5a:	0e1b      	lsrs	r3, r3, #24
 8001c5c:	1c0e      	adds	r6, r1, #0
 8001c5e:	0fc5      	lsrs	r5, r0, #31
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d100      	bne.n	8001c66 <__aeabi_fmul+0x1e>
 8001c64:	e085      	b.n	8001d72 <__aeabi_fmul+0x12a>
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d100      	bne.n	8001c6c <__aeabi_fmul+0x24>
 8001c6a:	e08b      	b.n	8001d84 <__aeabi_fmul+0x13c>
 8001c6c:	464a      	mov	r2, r9
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	00d2      	lsls	r2, r2, #3
 8001c72:	04c9      	lsls	r1, r1, #19
 8001c74:	4311      	orrs	r1, r2
 8001c76:	227f      	movs	r2, #127	; 0x7f
 8001c78:	4252      	negs	r2, r2
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	4498      	add	r8, r3
 8001c7e:	2300      	movs	r3, #0
 8001c80:	4689      	mov	r9, r1
 8001c82:	2700      	movs	r7, #0
 8001c84:	469a      	mov	sl, r3
 8001c86:	0274      	lsls	r4, r6, #9
 8001c88:	0073      	lsls	r3, r6, #1
 8001c8a:	0a64      	lsrs	r4, r4, #9
 8001c8c:	0e1b      	lsrs	r3, r3, #24
 8001c8e:	0ff6      	lsrs	r6, r6, #31
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d064      	beq.n	8001d5e <__aeabi_fmul+0x116>
 8001c94:	2bff      	cmp	r3, #255	; 0xff
 8001c96:	d01f      	beq.n	8001cd8 <__aeabi_fmul+0x90>
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	3b7f      	subs	r3, #127	; 0x7f
 8001c9c:	00e4      	lsls	r4, r4, #3
 8001c9e:	04d2      	lsls	r2, r2, #19
 8001ca0:	4443      	add	r3, r8
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	4314      	orrs	r4, r2
 8001ca6:	1c59      	adds	r1, r3, #1
 8001ca8:	2f0a      	cmp	r7, #10
 8001caa:	dc2b      	bgt.n	8001d04 <__aeabi_fmul+0xbc>
 8001cac:	4075      	eors	r5, r6
 8001cae:	2f02      	cmp	r7, #2
 8001cb0:	dc22      	bgt.n	8001cf8 <__aeabi_fmul+0xb0>
 8001cb2:	3f01      	subs	r7, #1
 8001cb4:	2f01      	cmp	r7, #1
 8001cb6:	d900      	bls.n	8001cba <__aeabi_fmul+0x72>
 8001cb8:	e0bb      	b.n	8001e32 <__aeabi_fmul+0x1ea>
 8001cba:	2802      	cmp	r0, #2
 8001cbc:	d06b      	beq.n	8001d96 <__aeabi_fmul+0x14e>
 8001cbe:	2801      	cmp	r0, #1
 8001cc0:	d12a      	bne.n	8001d18 <__aeabi_fmul+0xd0>
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	05c0      	lsls	r0, r0, #23
 8001cc8:	07ed      	lsls	r5, r5, #31
 8001cca:	4310      	orrs	r0, r2
 8001ccc:	4328      	orrs	r0, r5
 8001cce:	bce0      	pop	{r5, r6, r7}
 8001cd0:	46ba      	mov	sl, r7
 8001cd2:	46b1      	mov	r9, r6
 8001cd4:	46a8      	mov	r8, r5
 8001cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd8:	2c00      	cmp	r4, #0
 8001cda:	d064      	beq.n	8001da6 <__aeabi_fmul+0x15e>
 8001cdc:	2203      	movs	r2, #3
 8001cde:	4641      	mov	r1, r8
 8001ce0:	4643      	mov	r3, r8
 8001ce2:	4317      	orrs	r7, r2
 8001ce4:	002a      	movs	r2, r5
 8001ce6:	3101      	adds	r1, #1
 8001ce8:	33ff      	adds	r3, #255	; 0xff
 8001cea:	4072      	eors	r2, r6
 8001cec:	31ff      	adds	r1, #255	; 0xff
 8001cee:	2f0a      	cmp	r7, #10
 8001cf0:	dd00      	ble.n	8001cf4 <__aeabi_fmul+0xac>
 8001cf2:	e0d7      	b.n	8001ea4 <__aeabi_fmul+0x25c>
 8001cf4:	0015      	movs	r5, r2
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	40ba      	lsls	r2, r7
 8001cfc:	27a6      	movs	r7, #166	; 0xa6
 8001cfe:	00ff      	lsls	r7, r7, #3
 8001d00:	423a      	tst	r2, r7
 8001d02:	d020      	beq.n	8001d46 <__aeabi_fmul+0xfe>
 8001d04:	4653      	mov	r3, sl
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d045      	beq.n	8001d96 <__aeabi_fmul+0x14e>
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_fmul+0xc8>
 8001d0e:	e0bb      	b.n	8001e88 <__aeabi_fmul+0x240>
 8001d10:	4650      	mov	r0, sl
 8001d12:	464c      	mov	r4, r9
 8001d14:	2801      	cmp	r0, #1
 8001d16:	d0d4      	beq.n	8001cc2 <__aeabi_fmul+0x7a>
 8001d18:	000b      	movs	r3, r1
 8001d1a:	337f      	adds	r3, #127	; 0x7f
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	dd70      	ble.n	8001e02 <__aeabi_fmul+0x1ba>
 8001d20:	0762      	lsls	r2, r4, #29
 8001d22:	d004      	beq.n	8001d2e <__aeabi_fmul+0xe6>
 8001d24:	220f      	movs	r2, #15
 8001d26:	4022      	ands	r2, r4
 8001d28:	2a04      	cmp	r2, #4
 8001d2a:	d000      	beq.n	8001d2e <__aeabi_fmul+0xe6>
 8001d2c:	3404      	adds	r4, #4
 8001d2e:	0122      	lsls	r2, r4, #4
 8001d30:	d503      	bpl.n	8001d3a <__aeabi_fmul+0xf2>
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <__aeabi_fmul+0x278>)
 8001d34:	401c      	ands	r4, r3
 8001d36:	000b      	movs	r3, r1
 8001d38:	3380      	adds	r3, #128	; 0x80
 8001d3a:	2bfe      	cmp	r3, #254	; 0xfe
 8001d3c:	dc2b      	bgt.n	8001d96 <__aeabi_fmul+0x14e>
 8001d3e:	01a2      	lsls	r2, r4, #6
 8001d40:	0a52      	lsrs	r2, r2, #9
 8001d42:	b2d8      	uxtb	r0, r3
 8001d44:	e7bf      	b.n	8001cc6 <__aeabi_fmul+0x7e>
 8001d46:	2790      	movs	r7, #144	; 0x90
 8001d48:	00bf      	lsls	r7, r7, #2
 8001d4a:	423a      	tst	r2, r7
 8001d4c:	d126      	bne.n	8001d9c <__aeabi_fmul+0x154>
 8001d4e:	3fb9      	subs	r7, #185	; 0xb9
 8001d50:	3fff      	subs	r7, #255	; 0xff
 8001d52:	4217      	tst	r7, r2
 8001d54:	d06d      	beq.n	8001e32 <__aeabi_fmul+0x1ea>
 8001d56:	0035      	movs	r5, r6
 8001d58:	46a1      	mov	r9, r4
 8001d5a:	4682      	mov	sl, r0
 8001d5c:	e7d2      	b.n	8001d04 <__aeabi_fmul+0xbc>
 8001d5e:	2c00      	cmp	r4, #0
 8001d60:	d141      	bne.n	8001de6 <__aeabi_fmul+0x19e>
 8001d62:	2301      	movs	r3, #1
 8001d64:	431f      	orrs	r7, r3
 8001d66:	4643      	mov	r3, r8
 8001d68:	2001      	movs	r0, #1
 8001d6a:	1c59      	adds	r1, r3, #1
 8001d6c:	2f0a      	cmp	r7, #10
 8001d6e:	dd9d      	ble.n	8001cac <__aeabi_fmul+0x64>
 8001d70:	e7c8      	b.n	8001d04 <__aeabi_fmul+0xbc>
 8001d72:	464b      	mov	r3, r9
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d127      	bne.n	8001dc8 <__aeabi_fmul+0x180>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	2704      	movs	r7, #4
 8001d80:	469a      	mov	sl, r3
 8001d82:	e780      	b.n	8001c86 <__aeabi_fmul+0x3e>
 8001d84:	464b      	mov	r3, r9
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <__aeabi_fmul+0x174>
 8001d8a:	23ff      	movs	r3, #255	; 0xff
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	3bfd      	subs	r3, #253	; 0xfd
 8001d90:	2708      	movs	r7, #8
 8001d92:	469a      	mov	sl, r3
 8001d94:	e777      	b.n	8001c86 <__aeabi_fmul+0x3e>
 8001d96:	20ff      	movs	r0, #255	; 0xff
 8001d98:	2200      	movs	r2, #0
 8001d9a:	e794      	b.n	8001cc6 <__aeabi_fmul+0x7e>
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	2500      	movs	r5, #0
 8001da0:	20ff      	movs	r0, #255	; 0xff
 8001da2:	03d2      	lsls	r2, r2, #15
 8001da4:	e78f      	b.n	8001cc6 <__aeabi_fmul+0x7e>
 8001da6:	2302      	movs	r3, #2
 8001da8:	431f      	orrs	r7, r3
 8001daa:	4643      	mov	r3, r8
 8001dac:	1c59      	adds	r1, r3, #1
 8001dae:	31ff      	adds	r1, #255	; 0xff
 8001db0:	2f0a      	cmp	r7, #10
 8001db2:	dca7      	bgt.n	8001d04 <__aeabi_fmul+0xbc>
 8001db4:	2002      	movs	r0, #2
 8001db6:	33ff      	adds	r3, #255	; 0xff
 8001db8:	4075      	eors	r5, r6
 8001dba:	e778      	b.n	8001cae <__aeabi_fmul+0x66>
 8001dbc:	23ff      	movs	r3, #255	; 0xff
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	3bfc      	subs	r3, #252	; 0xfc
 8001dc2:	270c      	movs	r7, #12
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	e75e      	b.n	8001c86 <__aeabi_fmul+0x3e>
 8001dc8:	4648      	mov	r0, r9
 8001dca:	f7fe fa3f 	bl	800024c <__clzsi2>
 8001dce:	464a      	mov	r2, r9
 8001dd0:	1f43      	subs	r3, r0, #5
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	2376      	movs	r3, #118	; 0x76
 8001dd6:	425b      	negs	r3, r3
 8001dd8:	1a1b      	subs	r3, r3, r0
 8001dda:	4698      	mov	r8, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	4691      	mov	r9, r2
 8001de0:	2700      	movs	r7, #0
 8001de2:	469a      	mov	sl, r3
 8001de4:	e74f      	b.n	8001c86 <__aeabi_fmul+0x3e>
 8001de6:	0020      	movs	r0, r4
 8001de8:	f7fe fa30 	bl	800024c <__clzsi2>
 8001dec:	1f43      	subs	r3, r0, #5
 8001dee:	409c      	lsls	r4, r3
 8001df0:	4643      	mov	r3, r8
 8001df2:	1a1b      	subs	r3, r3, r0
 8001df4:	3b76      	subs	r3, #118	; 0x76
 8001df6:	2000      	movs	r0, #0
 8001df8:	1c59      	adds	r1, r3, #1
 8001dfa:	2f0a      	cmp	r7, #10
 8001dfc:	dc00      	bgt.n	8001e00 <__aeabi_fmul+0x1b8>
 8001dfe:	e755      	b.n	8001cac <__aeabi_fmul+0x64>
 8001e00:	e780      	b.n	8001d04 <__aeabi_fmul+0xbc>
 8001e02:	2201      	movs	r2, #1
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b1b      	cmp	r3, #27
 8001e08:	dd00      	ble.n	8001e0c <__aeabi_fmul+0x1c4>
 8001e0a:	e75a      	b.n	8001cc2 <__aeabi_fmul+0x7a>
 8001e0c:	319e      	adds	r1, #158	; 0x9e
 8001e0e:	0022      	movs	r2, r4
 8001e10:	408c      	lsls	r4, r1
 8001e12:	40da      	lsrs	r2, r3
 8001e14:	1e63      	subs	r3, r4, #1
 8001e16:	419c      	sbcs	r4, r3
 8001e18:	4322      	orrs	r2, r4
 8001e1a:	0753      	lsls	r3, r2, #29
 8001e1c:	d004      	beq.n	8001e28 <__aeabi_fmul+0x1e0>
 8001e1e:	230f      	movs	r3, #15
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d000      	beq.n	8001e28 <__aeabi_fmul+0x1e0>
 8001e26:	3204      	adds	r2, #4
 8001e28:	0153      	lsls	r3, r2, #5
 8001e2a:	d537      	bpl.n	8001e9c <__aeabi_fmul+0x254>
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	2200      	movs	r2, #0
 8001e30:	e749      	b.n	8001cc6 <__aeabi_fmul+0x7e>
 8001e32:	0c20      	lsrs	r0, r4, #16
 8001e34:	464a      	mov	r2, r9
 8001e36:	0424      	lsls	r4, r4, #16
 8001e38:	0c24      	lsrs	r4, r4, #16
 8001e3a:	0027      	movs	r7, r4
 8001e3c:	0c16      	lsrs	r6, r2, #16
 8001e3e:	0412      	lsls	r2, r2, #16
 8001e40:	0c12      	lsrs	r2, r2, #16
 8001e42:	4374      	muls	r4, r6
 8001e44:	4357      	muls	r7, r2
 8001e46:	4346      	muls	r6, r0
 8001e48:	4350      	muls	r0, r2
 8001e4a:	0c3a      	lsrs	r2, r7, #16
 8001e4c:	1900      	adds	r0, r0, r4
 8001e4e:	1812      	adds	r2, r2, r0
 8001e50:	4294      	cmp	r4, r2
 8001e52:	d903      	bls.n	8001e5c <__aeabi_fmul+0x214>
 8001e54:	2080      	movs	r0, #128	; 0x80
 8001e56:	0240      	lsls	r0, r0, #9
 8001e58:	4684      	mov	ip, r0
 8001e5a:	4466      	add	r6, ip
 8001e5c:	043f      	lsls	r7, r7, #16
 8001e5e:	0410      	lsls	r0, r2, #16
 8001e60:	0c3f      	lsrs	r7, r7, #16
 8001e62:	19c0      	adds	r0, r0, r7
 8001e64:	0184      	lsls	r4, r0, #6
 8001e66:	1e67      	subs	r7, r4, #1
 8001e68:	41bc      	sbcs	r4, r7
 8001e6a:	0c12      	lsrs	r2, r2, #16
 8001e6c:	0e80      	lsrs	r0, r0, #26
 8001e6e:	1992      	adds	r2, r2, r6
 8001e70:	4304      	orrs	r4, r0
 8001e72:	0192      	lsls	r2, r2, #6
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	d50e      	bpl.n	8001e98 <__aeabi_fmul+0x250>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	0862      	lsrs	r2, r4, #1
 8001e7e:	401c      	ands	r4, r3
 8001e80:	4314      	orrs	r4, r2
 8001e82:	e749      	b.n	8001d18 <__aeabi_fmul+0xd0>
 8001e84:	0035      	movs	r5, r6
 8001e86:	46a1      	mov	r9, r4
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	464b      	mov	r3, r9
 8001e8c:	03d2      	lsls	r2, r2, #15
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	0252      	lsls	r2, r2, #9
 8001e92:	20ff      	movs	r0, #255	; 0xff
 8001e94:	0a52      	lsrs	r2, r2, #9
 8001e96:	e716      	b.n	8001cc6 <__aeabi_fmul+0x7e>
 8001e98:	0019      	movs	r1, r3
 8001e9a:	e73d      	b.n	8001d18 <__aeabi_fmul+0xd0>
 8001e9c:	0192      	lsls	r2, r2, #6
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	0a52      	lsrs	r2, r2, #9
 8001ea2:	e710      	b.n	8001cc6 <__aeabi_fmul+0x7e>
 8001ea4:	2f0f      	cmp	r7, #15
 8001ea6:	d1ed      	bne.n	8001e84 <__aeabi_fmul+0x23c>
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	464b      	mov	r3, r9
 8001eac:	03d2      	lsls	r2, r2, #15
 8001eae:	4213      	tst	r3, r2
 8001eb0:	d0ea      	beq.n	8001e88 <__aeabi_fmul+0x240>
 8001eb2:	4214      	tst	r4, r2
 8001eb4:	d1e8      	bne.n	8001e88 <__aeabi_fmul+0x240>
 8001eb6:	0035      	movs	r5, r6
 8001eb8:	20ff      	movs	r0, #255	; 0xff
 8001eba:	4322      	orrs	r2, r4
 8001ebc:	e703      	b.n	8001cc6 <__aeabi_fmul+0x7e>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	f7ffffff 	.word	0xf7ffffff

08001ec4 <__aeabi_fsub>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	0243      	lsls	r3, r0, #9
 8001ec8:	0045      	lsls	r5, r0, #1
 8001eca:	0fc4      	lsrs	r4, r0, #31
 8001ecc:	0248      	lsls	r0, r1, #9
 8001ece:	0a42      	lsrs	r2, r0, #9
 8001ed0:	4694      	mov	ip, r2
 8001ed2:	004a      	lsls	r2, r1, #1
 8001ed4:	0a5e      	lsrs	r6, r3, #9
 8001ed6:	0e2d      	lsrs	r5, r5, #24
 8001ed8:	099b      	lsrs	r3, r3, #6
 8001eda:	0e12      	lsrs	r2, r2, #24
 8001edc:	0fc9      	lsrs	r1, r1, #31
 8001ede:	0980      	lsrs	r0, r0, #6
 8001ee0:	2aff      	cmp	r2, #255	; 0xff
 8001ee2:	d023      	beq.n	8001f2c <__aeabi_fsub+0x68>
 8001ee4:	2701      	movs	r7, #1
 8001ee6:	4079      	eors	r1, r7
 8001ee8:	1aaf      	subs	r7, r5, r2
 8001eea:	428c      	cmp	r4, r1
 8001eec:	d00f      	beq.n	8001f0e <__aeabi_fsub+0x4a>
 8001eee:	2f00      	cmp	r7, #0
 8001ef0:	dc00      	bgt.n	8001ef4 <__aeabi_fsub+0x30>
 8001ef2:	e15d      	b.n	80021b0 <__aeabi_fsub+0x2ec>
 8001ef4:	2a00      	cmp	r2, #0
 8001ef6:	d12f      	bne.n	8001f58 <__aeabi_fsub+0x94>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d100      	bne.n	8001efe <__aeabi_fsub+0x3a>
 8001efc:	e090      	b.n	8002020 <__aeabi_fsub+0x15c>
 8001efe:	1e7a      	subs	r2, r7, #1
 8001f00:	2f01      	cmp	r7, #1
 8001f02:	d100      	bne.n	8001f06 <__aeabi_fsub+0x42>
 8001f04:	e11a      	b.n	800213c <__aeabi_fsub+0x278>
 8001f06:	2fff      	cmp	r7, #255	; 0xff
 8001f08:	d01c      	beq.n	8001f44 <__aeabi_fsub+0x80>
 8001f0a:	0017      	movs	r7, r2
 8001f0c:	e029      	b.n	8001f62 <__aeabi_fsub+0x9e>
 8001f0e:	2f00      	cmp	r7, #0
 8001f10:	dc00      	bgt.n	8001f14 <__aeabi_fsub+0x50>
 8001f12:	e159      	b.n	80021c8 <__aeabi_fsub+0x304>
 8001f14:	2a00      	cmp	r2, #0
 8001f16:	d052      	beq.n	8001fbe <__aeabi_fsub+0xfa>
 8001f18:	2dff      	cmp	r5, #255	; 0xff
 8001f1a:	d013      	beq.n	8001f44 <__aeabi_fsub+0x80>
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	04d2      	lsls	r2, r2, #19
 8001f20:	4310      	orrs	r0, r2
 8001f22:	2f1b      	cmp	r7, #27
 8001f24:	dc00      	bgt.n	8001f28 <__aeabi_fsub+0x64>
 8001f26:	e06a      	b.n	8001ffe <__aeabi_fsub+0x13a>
 8001f28:	3301      	adds	r3, #1
 8001f2a:	e02b      	b.n	8001f84 <__aeabi_fsub+0xc0>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d03b      	beq.n	8001fa8 <__aeabi_fsub+0xe4>
 8001f30:	428c      	cmp	r4, r1
 8001f32:	d04d      	beq.n	8001fd0 <__aeabi_fsub+0x10c>
 8001f34:	2dff      	cmp	r5, #255	; 0xff
 8001f36:	d100      	bne.n	8001f3a <__aeabi_fsub+0x76>
 8001f38:	e08f      	b.n	800205a <__aeabi_fsub+0x196>
 8001f3a:	2d00      	cmp	r5, #0
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_fsub+0x7c>
 8001f3e:	e0ab      	b.n	8002098 <__aeabi_fsub+0x1d4>
 8001f40:	000c      	movs	r4, r1
 8001f42:	0003      	movs	r3, r0
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d067      	beq.n	800201a <__aeabi_fsub+0x156>
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	03d2      	lsls	r2, r2, #15
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	025b      	lsls	r3, r3, #9
 8001f52:	20ff      	movs	r0, #255	; 0xff
 8001f54:	0a5b      	lsrs	r3, r3, #9
 8001f56:	e022      	b.n	8001f9e <__aeabi_fsub+0xda>
 8001f58:	2dff      	cmp	r5, #255	; 0xff
 8001f5a:	d0f3      	beq.n	8001f44 <__aeabi_fsub+0x80>
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	04d2      	lsls	r2, r2, #19
 8001f60:	4310      	orrs	r0, r2
 8001f62:	2201      	movs	r2, #1
 8001f64:	2f1b      	cmp	r7, #27
 8001f66:	dc07      	bgt.n	8001f78 <__aeabi_fsub+0xb4>
 8001f68:	2120      	movs	r1, #32
 8001f6a:	1bc9      	subs	r1, r1, r7
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	4088      	lsls	r0, r1
 8001f70:	40fa      	lsrs	r2, r7
 8001f72:	1e41      	subs	r1, r0, #1
 8001f74:	4188      	sbcs	r0, r1
 8001f76:	4302      	orrs	r2, r0
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	d456      	bmi.n	800202c <__aeabi_fsub+0x168>
 8001f7e:	2207      	movs	r2, #7
 8001f80:	401a      	ands	r2, r3
 8001f82:	d04e      	beq.n	8002022 <__aeabi_fsub+0x15e>
 8001f84:	220f      	movs	r2, #15
 8001f86:	401a      	ands	r2, r3
 8001f88:	2a04      	cmp	r2, #4
 8001f8a:	d000      	beq.n	8001f8e <__aeabi_fsub+0xca>
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	d547      	bpl.n	8002022 <__aeabi_fsub+0x15e>
 8001f92:	1c68      	adds	r0, r5, #1
 8001f94:	2dfe      	cmp	r5, #254	; 0xfe
 8001f96:	d040      	beq.n	800201a <__aeabi_fsub+0x156>
 8001f98:	019b      	lsls	r3, r3, #6
 8001f9a:	0a5b      	lsrs	r3, r3, #9
 8001f9c:	b2c0      	uxtb	r0, r0
 8001f9e:	05c0      	lsls	r0, r0, #23
 8001fa0:	4318      	orrs	r0, r3
 8001fa2:	07e4      	lsls	r4, r4, #31
 8001fa4:	4320      	orrs	r0, r4
 8001fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa8:	2701      	movs	r7, #1
 8001faa:	4079      	eors	r1, r7
 8001fac:	428c      	cmp	r4, r1
 8001fae:	d1c1      	bne.n	8001f34 <__aeabi_fsub+0x70>
 8001fb0:	2dff      	cmp	r5, #255	; 0xff
 8001fb2:	d010      	beq.n	8001fd6 <__aeabi_fsub+0x112>
 8001fb4:	2d00      	cmp	r5, #0
 8001fb6:	d100      	bne.n	8001fba <__aeabi_fsub+0xf6>
 8001fb8:	e0e7      	b.n	800218a <__aeabi_fsub+0x2c6>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e7c2      	b.n	8001f44 <__aeabi_fsub+0x80>
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d02e      	beq.n	8002020 <__aeabi_fsub+0x15c>
 8001fc2:	1e7a      	subs	r2, r7, #1
 8001fc4:	2f01      	cmp	r7, #1
 8001fc6:	d07f      	beq.n	80020c8 <__aeabi_fsub+0x204>
 8001fc8:	2fff      	cmp	r7, #255	; 0xff
 8001fca:	d0bb      	beq.n	8001f44 <__aeabi_fsub+0x80>
 8001fcc:	0017      	movs	r7, r2
 8001fce:	e7a8      	b.n	8001f22 <__aeabi_fsub+0x5e>
 8001fd0:	2dff      	cmp	r5, #255	; 0xff
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_fsub+0x112>
 8001fd4:	e083      	b.n	80020de <__aeabi_fsub+0x21a>
 8001fd6:	27fe      	movs	r7, #254	; 0xfe
 8001fd8:	1c6a      	adds	r2, r5, #1
 8001fda:	4217      	tst	r7, r2
 8001fdc:	d000      	beq.n	8001fe0 <__aeabi_fsub+0x11c>
 8001fde:	e08d      	b.n	80020fc <__aeabi_fsub+0x238>
 8001fe0:	2d00      	cmp	r5, #0
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_fsub+0x122>
 8001fe4:	e0ad      	b.n	8002142 <__aeabi_fsub+0x27e>
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_fsub+0x128>
 8001fea:	e0d2      	b.n	8002192 <__aeabi_fsub+0x2ce>
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d000      	beq.n	8001ff2 <__aeabi_fsub+0x12e>
 8001ff0:	e0d1      	b.n	8002196 <__aeabi_fsub+0x2d2>
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	08db      	lsrs	r3, r3, #3
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	0a5b      	lsrs	r3, r3, #9
 8001ffa:	b2e8      	uxtb	r0, r5
 8001ffc:	e7cf      	b.n	8001f9e <__aeabi_fsub+0xda>
 8001ffe:	2120      	movs	r1, #32
 8002000:	1bc9      	subs	r1, r1, r7
 8002002:	0002      	movs	r2, r0
 8002004:	4088      	lsls	r0, r1
 8002006:	40fa      	lsrs	r2, r7
 8002008:	1e41      	subs	r1, r0, #1
 800200a:	4188      	sbcs	r0, r1
 800200c:	4310      	orrs	r0, r2
 800200e:	181b      	adds	r3, r3, r0
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	d5b4      	bpl.n	8001f7e <__aeabi_fsub+0xba>
 8002014:	3501      	adds	r5, #1
 8002016:	2dff      	cmp	r5, #255	; 0xff
 8002018:	d15a      	bne.n	80020d0 <__aeabi_fsub+0x20c>
 800201a:	20ff      	movs	r0, #255	; 0xff
 800201c:	2300      	movs	r3, #0
 800201e:	e7be      	b.n	8001f9e <__aeabi_fsub+0xda>
 8002020:	003d      	movs	r5, r7
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	2dff      	cmp	r5, #255	; 0xff
 8002026:	d100      	bne.n	800202a <__aeabi_fsub+0x166>
 8002028:	e78d      	b.n	8001f46 <__aeabi_fsub+0x82>
 800202a:	e7e4      	b.n	8001ff6 <__aeabi_fsub+0x132>
 800202c:	019e      	lsls	r6, r3, #6
 800202e:	09b6      	lsrs	r6, r6, #6
 8002030:	0030      	movs	r0, r6
 8002032:	f7fe f90b 	bl	800024c <__clzsi2>
 8002036:	3805      	subs	r0, #5
 8002038:	4086      	lsls	r6, r0
 800203a:	4285      	cmp	r5, r0
 800203c:	dc1f      	bgt.n	800207e <__aeabi_fsub+0x1ba>
 800203e:	2220      	movs	r2, #32
 8002040:	1b40      	subs	r0, r0, r5
 8002042:	3001      	adds	r0, #1
 8002044:	1a12      	subs	r2, r2, r0
 8002046:	0033      	movs	r3, r6
 8002048:	4096      	lsls	r6, r2
 800204a:	40c3      	lsrs	r3, r0
 800204c:	1e72      	subs	r2, r6, #1
 800204e:	4196      	sbcs	r6, r2
 8002050:	2500      	movs	r5, #0
 8002052:	4333      	orrs	r3, r6
 8002054:	075a      	lsls	r2, r3, #29
 8002056:	d195      	bne.n	8001f84 <__aeabi_fsub+0xc0>
 8002058:	e799      	b.n	8001f8e <__aeabi_fsub+0xca>
 800205a:	27fe      	movs	r7, #254	; 0xfe
 800205c:	1c6a      	adds	r2, r5, #1
 800205e:	4217      	tst	r7, r2
 8002060:	d111      	bne.n	8002086 <__aeabi_fsub+0x1c2>
 8002062:	2d00      	cmp	r5, #0
 8002064:	d15a      	bne.n	800211c <__aeabi_fsub+0x258>
 8002066:	2b00      	cmp	r3, #0
 8002068:	d100      	bne.n	800206c <__aeabi_fsub+0x1a8>
 800206a:	e089      	b.n	8002180 <__aeabi_fsub+0x2bc>
 800206c:	2800      	cmp	r0, #0
 800206e:	d0c0      	beq.n	8001ff2 <__aeabi_fsub+0x12e>
 8002070:	1a1a      	subs	r2, r3, r0
 8002072:	0156      	lsls	r6, r2, #5
 8002074:	d400      	bmi.n	8002078 <__aeabi_fsub+0x1b4>
 8002076:	e096      	b.n	80021a6 <__aeabi_fsub+0x2e2>
 8002078:	000c      	movs	r4, r1
 800207a:	1ac3      	subs	r3, r0, r3
 800207c:	e7ea      	b.n	8002054 <__aeabi_fsub+0x190>
 800207e:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <__aeabi_fsub+0x31c>)
 8002080:	1a2d      	subs	r5, r5, r0
 8002082:	4033      	ands	r3, r6
 8002084:	e7e6      	b.n	8002054 <__aeabi_fsub+0x190>
 8002086:	1a1e      	subs	r6, r3, r0
 8002088:	0172      	lsls	r2, r6, #5
 800208a:	d444      	bmi.n	8002116 <__aeabi_fsub+0x252>
 800208c:	2e00      	cmp	r6, #0
 800208e:	d1cf      	bne.n	8002030 <__aeabi_fsub+0x16c>
 8002090:	2400      	movs	r4, #0
 8002092:	2000      	movs	r0, #0
 8002094:	2300      	movs	r3, #0
 8002096:	e782      	b.n	8001f9e <__aeabi_fsub+0xda>
 8002098:	25ff      	movs	r5, #255	; 0xff
 800209a:	2b00      	cmp	r3, #0
 800209c:	d038      	beq.n	8002110 <__aeabi_fsub+0x24c>
 800209e:	1e6e      	subs	r6, r5, #1
 80020a0:	2d01      	cmp	r5, #1
 80020a2:	d06a      	beq.n	800217a <__aeabi_fsub+0x2b6>
 80020a4:	2dff      	cmp	r5, #255	; 0xff
 80020a6:	d100      	bne.n	80020aa <__aeabi_fsub+0x1e6>
 80020a8:	e74a      	b.n	8001f40 <__aeabi_fsub+0x7c>
 80020aa:	2401      	movs	r4, #1
 80020ac:	2e1b      	cmp	r6, #27
 80020ae:	dc07      	bgt.n	80020c0 <__aeabi_fsub+0x1fc>
 80020b0:	2520      	movs	r5, #32
 80020b2:	1bad      	subs	r5, r5, r6
 80020b4:	001c      	movs	r4, r3
 80020b6:	40ab      	lsls	r3, r5
 80020b8:	40f4      	lsrs	r4, r6
 80020ba:	1e5d      	subs	r5, r3, #1
 80020bc:	41ab      	sbcs	r3, r5
 80020be:	431c      	orrs	r4, r3
 80020c0:	1b03      	subs	r3, r0, r4
 80020c2:	0015      	movs	r5, r2
 80020c4:	000c      	movs	r4, r1
 80020c6:	e758      	b.n	8001f7a <__aeabi_fsub+0xb6>
 80020c8:	181b      	adds	r3, r3, r0
 80020ca:	2502      	movs	r5, #2
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	d533      	bpl.n	8002138 <__aeabi_fsub+0x274>
 80020d0:	2201      	movs	r2, #1
 80020d2:	4944      	ldr	r1, [pc, #272]	; (80021e4 <__aeabi_fsub+0x320>)
 80020d4:	401a      	ands	r2, r3
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	400b      	ands	r3, r1
 80020da:	4313      	orrs	r3, r2
 80020dc:	e7ba      	b.n	8002054 <__aeabi_fsub+0x190>
 80020de:	2d00      	cmp	r5, #0
 80020e0:	d131      	bne.n	8002146 <__aeabi_fsub+0x282>
 80020e2:	35ff      	adds	r5, #255	; 0xff
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d052      	beq.n	800218e <__aeabi_fsub+0x2ca>
 80020e8:	1e69      	subs	r1, r5, #1
 80020ea:	2d01      	cmp	r5, #1
 80020ec:	d020      	beq.n	8002130 <__aeabi_fsub+0x26c>
 80020ee:	2dff      	cmp	r5, #255	; 0xff
 80020f0:	d029      	beq.n	8002146 <__aeabi_fsub+0x282>
 80020f2:	291b      	cmp	r1, #27
 80020f4:	dd36      	ble.n	8002164 <__aeabi_fsub+0x2a0>
 80020f6:	0015      	movs	r5, r2
 80020f8:	1c43      	adds	r3, r0, #1
 80020fa:	e743      	b.n	8001f84 <__aeabi_fsub+0xc0>
 80020fc:	2aff      	cmp	r2, #255	; 0xff
 80020fe:	d08c      	beq.n	800201a <__aeabi_fsub+0x156>
 8002100:	181b      	adds	r3, r3, r0
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	0015      	movs	r5, r2
 8002106:	075a      	lsls	r2, r3, #29
 8002108:	d000      	beq.n	800210c <__aeabi_fsub+0x248>
 800210a:	e73b      	b.n	8001f84 <__aeabi_fsub+0xc0>
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	e772      	b.n	8001ff6 <__aeabi_fsub+0x132>
 8002110:	000c      	movs	r4, r1
 8002112:	0003      	movs	r3, r0
 8002114:	e785      	b.n	8002022 <__aeabi_fsub+0x15e>
 8002116:	000c      	movs	r4, r1
 8002118:	1ac6      	subs	r6, r0, r3
 800211a:	e789      	b.n	8002030 <__aeabi_fsub+0x16c>
 800211c:	2b00      	cmp	r3, #0
 800211e:	d114      	bne.n	800214a <__aeabi_fsub+0x286>
 8002120:	2800      	cmp	r0, #0
 8002122:	d000      	beq.n	8002126 <__aeabi_fsub+0x262>
 8002124:	e70c      	b.n	8001f40 <__aeabi_fsub+0x7c>
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	2400      	movs	r4, #0
 800212a:	20ff      	movs	r0, #255	; 0xff
 800212c:	03db      	lsls	r3, r3, #15
 800212e:	e736      	b.n	8001f9e <__aeabi_fsub+0xda>
 8002130:	181b      	adds	r3, r3, r0
 8002132:	3501      	adds	r5, #1
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	d4cb      	bmi.n	80020d0 <__aeabi_fsub+0x20c>
 8002138:	3d01      	subs	r5, #1
 800213a:	e720      	b.n	8001f7e <__aeabi_fsub+0xba>
 800213c:	2501      	movs	r5, #1
 800213e:	1a1b      	subs	r3, r3, r0
 8002140:	e71b      	b.n	8001f7a <__aeabi_fsub+0xb6>
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <__aeabi_fsub+0x286>
 8002146:	0003      	movs	r3, r0
 8002148:	e6fc      	b.n	8001f44 <__aeabi_fsub+0x80>
 800214a:	2800      	cmp	r0, #0
 800214c:	d100      	bne.n	8002150 <__aeabi_fsub+0x28c>
 800214e:	e6f9      	b.n	8001f44 <__aeabi_fsub+0x80>
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	03d2      	lsls	r2, r2, #15
 8002154:	4296      	cmp	r6, r2
 8002156:	d303      	bcc.n	8002160 <__aeabi_fsub+0x29c>
 8002158:	4594      	cmp	ip, r2
 800215a:	d201      	bcs.n	8002160 <__aeabi_fsub+0x29c>
 800215c:	000c      	movs	r4, r1
 800215e:	0003      	movs	r3, r0
 8002160:	08db      	lsrs	r3, r3, #3
 8002162:	e6f2      	b.n	8001f4a <__aeabi_fsub+0x86>
 8002164:	001d      	movs	r5, r3
 8002166:	2620      	movs	r6, #32
 8002168:	40cd      	lsrs	r5, r1
 800216a:	1a71      	subs	r1, r6, r1
 800216c:	408b      	lsls	r3, r1
 800216e:	1e59      	subs	r1, r3, #1
 8002170:	418b      	sbcs	r3, r1
 8002172:	432b      	orrs	r3, r5
 8002174:	181b      	adds	r3, r3, r0
 8002176:	0015      	movs	r5, r2
 8002178:	e74a      	b.n	8002010 <__aeabi_fsub+0x14c>
 800217a:	000c      	movs	r4, r1
 800217c:	1ac3      	subs	r3, r0, r3
 800217e:	e6fc      	b.n	8001f7a <__aeabi_fsub+0xb6>
 8002180:	2800      	cmp	r0, #0
 8002182:	d085      	beq.n	8002090 <__aeabi_fsub+0x1cc>
 8002184:	000c      	movs	r4, r1
 8002186:	0003      	movs	r3, r0
 8002188:	e733      	b.n	8001ff2 <__aeabi_fsub+0x12e>
 800218a:	25ff      	movs	r5, #255	; 0xff
 800218c:	e7aa      	b.n	80020e4 <__aeabi_fsub+0x220>
 800218e:	0003      	movs	r3, r0
 8002190:	e747      	b.n	8002022 <__aeabi_fsub+0x15e>
 8002192:	0003      	movs	r3, r0
 8002194:	e72d      	b.n	8001ff2 <__aeabi_fsub+0x12e>
 8002196:	181b      	adds	r3, r3, r0
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	d5b7      	bpl.n	800210c <__aeabi_fsub+0x248>
 800219c:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <__aeabi_fsub+0x31c>)
 800219e:	3501      	adds	r5, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	e727      	b.n	8001ff6 <__aeabi_fsub+0x132>
 80021a6:	1e13      	subs	r3, r2, #0
 80021a8:	d100      	bne.n	80021ac <__aeabi_fsub+0x2e8>
 80021aa:	e771      	b.n	8002090 <__aeabi_fsub+0x1cc>
 80021ac:	08db      	lsrs	r3, r3, #3
 80021ae:	e722      	b.n	8001ff6 <__aeabi_fsub+0x132>
 80021b0:	2f00      	cmp	r7, #0
 80021b2:	d100      	bne.n	80021b6 <__aeabi_fsub+0x2f2>
 80021b4:	e751      	b.n	800205a <__aeabi_fsub+0x196>
 80021b6:	1b56      	subs	r6, r2, r5
 80021b8:	2d00      	cmp	r5, #0
 80021ba:	d101      	bne.n	80021c0 <__aeabi_fsub+0x2fc>
 80021bc:	0035      	movs	r5, r6
 80021be:	e76c      	b.n	800209a <__aeabi_fsub+0x1d6>
 80021c0:	2480      	movs	r4, #128	; 0x80
 80021c2:	04e4      	lsls	r4, r4, #19
 80021c4:	4323      	orrs	r3, r4
 80021c6:	e770      	b.n	80020aa <__aeabi_fsub+0x1e6>
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_fsub+0x30a>
 80021cc:	e703      	b.n	8001fd6 <__aeabi_fsub+0x112>
 80021ce:	1b51      	subs	r1, r2, r5
 80021d0:	2d00      	cmp	r5, #0
 80021d2:	d101      	bne.n	80021d8 <__aeabi_fsub+0x314>
 80021d4:	000d      	movs	r5, r1
 80021d6:	e785      	b.n	80020e4 <__aeabi_fsub+0x220>
 80021d8:	2580      	movs	r5, #128	; 0x80
 80021da:	04ed      	lsls	r5, r5, #19
 80021dc:	432b      	orrs	r3, r5
 80021de:	e788      	b.n	80020f2 <__aeabi_fsub+0x22e>
 80021e0:	fbffffff 	.word	0xfbffffff
 80021e4:	7dffffff 	.word	0x7dffffff

080021e8 <__aeabi_f2iz>:
 80021e8:	0241      	lsls	r1, r0, #9
 80021ea:	0042      	lsls	r2, r0, #1
 80021ec:	0fc3      	lsrs	r3, r0, #31
 80021ee:	0a49      	lsrs	r1, r1, #9
 80021f0:	2000      	movs	r0, #0
 80021f2:	0e12      	lsrs	r2, r2, #24
 80021f4:	2a7e      	cmp	r2, #126	; 0x7e
 80021f6:	dd03      	ble.n	8002200 <__aeabi_f2iz+0x18>
 80021f8:	2a9d      	cmp	r2, #157	; 0x9d
 80021fa:	dd02      	ble.n	8002202 <__aeabi_f2iz+0x1a>
 80021fc:	4a09      	ldr	r2, [pc, #36]	; (8002224 <__aeabi_f2iz+0x3c>)
 80021fe:	1898      	adds	r0, r3, r2
 8002200:	4770      	bx	lr
 8002202:	2080      	movs	r0, #128	; 0x80
 8002204:	0400      	lsls	r0, r0, #16
 8002206:	4301      	orrs	r1, r0
 8002208:	2a95      	cmp	r2, #149	; 0x95
 800220a:	dc07      	bgt.n	800221c <__aeabi_f2iz+0x34>
 800220c:	2096      	movs	r0, #150	; 0x96
 800220e:	1a82      	subs	r2, r0, r2
 8002210:	40d1      	lsrs	r1, r2
 8002212:	4248      	negs	r0, r1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f3      	bne.n	8002200 <__aeabi_f2iz+0x18>
 8002218:	0008      	movs	r0, r1
 800221a:	e7f1      	b.n	8002200 <__aeabi_f2iz+0x18>
 800221c:	3a96      	subs	r2, #150	; 0x96
 800221e:	4091      	lsls	r1, r2
 8002220:	e7f7      	b.n	8002212 <__aeabi_f2iz+0x2a>
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	7fffffff 	.word	0x7fffffff

08002228 <__aeabi_i2f>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	2800      	cmp	r0, #0
 800222c:	d013      	beq.n	8002256 <__aeabi_i2f+0x2e>
 800222e:	17c3      	asrs	r3, r0, #31
 8002230:	18c5      	adds	r5, r0, r3
 8002232:	405d      	eors	r5, r3
 8002234:	0fc4      	lsrs	r4, r0, #31
 8002236:	0028      	movs	r0, r5
 8002238:	f7fe f808 	bl	800024c <__clzsi2>
 800223c:	239e      	movs	r3, #158	; 0x9e
 800223e:	0001      	movs	r1, r0
 8002240:	1a1b      	subs	r3, r3, r0
 8002242:	2b96      	cmp	r3, #150	; 0x96
 8002244:	dc0f      	bgt.n	8002266 <__aeabi_i2f+0x3e>
 8002246:	2808      	cmp	r0, #8
 8002248:	d034      	beq.n	80022b4 <__aeabi_i2f+0x8c>
 800224a:	3908      	subs	r1, #8
 800224c:	408d      	lsls	r5, r1
 800224e:	026d      	lsls	r5, r5, #9
 8002250:	0a6d      	lsrs	r5, r5, #9
 8002252:	b2d8      	uxtb	r0, r3
 8002254:	e002      	b.n	800225c <__aeabi_i2f+0x34>
 8002256:	2400      	movs	r4, #0
 8002258:	2000      	movs	r0, #0
 800225a:	2500      	movs	r5, #0
 800225c:	05c0      	lsls	r0, r0, #23
 800225e:	4328      	orrs	r0, r5
 8002260:	07e4      	lsls	r4, r4, #31
 8002262:	4320      	orrs	r0, r4
 8002264:	bd70      	pop	{r4, r5, r6, pc}
 8002266:	2b99      	cmp	r3, #153	; 0x99
 8002268:	dc16      	bgt.n	8002298 <__aeabi_i2f+0x70>
 800226a:	1f42      	subs	r2, r0, #5
 800226c:	2805      	cmp	r0, #5
 800226e:	d000      	beq.n	8002272 <__aeabi_i2f+0x4a>
 8002270:	4095      	lsls	r5, r2
 8002272:	002a      	movs	r2, r5
 8002274:	4811      	ldr	r0, [pc, #68]	; (80022bc <__aeabi_i2f+0x94>)
 8002276:	4002      	ands	r2, r0
 8002278:	076e      	lsls	r6, r5, #29
 800227a:	d009      	beq.n	8002290 <__aeabi_i2f+0x68>
 800227c:	260f      	movs	r6, #15
 800227e:	4035      	ands	r5, r6
 8002280:	2d04      	cmp	r5, #4
 8002282:	d005      	beq.n	8002290 <__aeabi_i2f+0x68>
 8002284:	3204      	adds	r2, #4
 8002286:	0155      	lsls	r5, r2, #5
 8002288:	d502      	bpl.n	8002290 <__aeabi_i2f+0x68>
 800228a:	239f      	movs	r3, #159	; 0x9f
 800228c:	4002      	ands	r2, r0
 800228e:	1a5b      	subs	r3, r3, r1
 8002290:	0192      	lsls	r2, r2, #6
 8002292:	0a55      	lsrs	r5, r2, #9
 8002294:	b2d8      	uxtb	r0, r3
 8002296:	e7e1      	b.n	800225c <__aeabi_i2f+0x34>
 8002298:	2205      	movs	r2, #5
 800229a:	1a12      	subs	r2, r2, r0
 800229c:	0028      	movs	r0, r5
 800229e:	40d0      	lsrs	r0, r2
 80022a0:	0002      	movs	r2, r0
 80022a2:	0008      	movs	r0, r1
 80022a4:	301b      	adds	r0, #27
 80022a6:	4085      	lsls	r5, r0
 80022a8:	0028      	movs	r0, r5
 80022aa:	1e45      	subs	r5, r0, #1
 80022ac:	41a8      	sbcs	r0, r5
 80022ae:	4302      	orrs	r2, r0
 80022b0:	0015      	movs	r5, r2
 80022b2:	e7de      	b.n	8002272 <__aeabi_i2f+0x4a>
 80022b4:	026d      	lsls	r5, r5, #9
 80022b6:	2096      	movs	r0, #150	; 0x96
 80022b8:	0a6d      	lsrs	r5, r5, #9
 80022ba:	e7cf      	b.n	800225c <__aeabi_i2f+0x34>
 80022bc:	fbffffff 	.word	0xfbffffff

080022c0 <__aeabi_ddiv>:
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	46de      	mov	lr, fp
 80022c4:	4645      	mov	r5, r8
 80022c6:	4657      	mov	r7, sl
 80022c8:	464e      	mov	r6, r9
 80022ca:	b5e0      	push	{r5, r6, r7, lr}
 80022cc:	b087      	sub	sp, #28
 80022ce:	9200      	str	r2, [sp, #0]
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	030b      	lsls	r3, r1, #12
 80022d4:	0b1b      	lsrs	r3, r3, #12
 80022d6:	469b      	mov	fp, r3
 80022d8:	0fca      	lsrs	r2, r1, #31
 80022da:	004b      	lsls	r3, r1, #1
 80022dc:	0004      	movs	r4, r0
 80022de:	4680      	mov	r8, r0
 80022e0:	0d5b      	lsrs	r3, r3, #21
 80022e2:	9202      	str	r2, [sp, #8]
 80022e4:	d100      	bne.n	80022e8 <__aeabi_ddiv+0x28>
 80022e6:	e16a      	b.n	80025be <__aeabi_ddiv+0x2fe>
 80022e8:	4ad4      	ldr	r2, [pc, #848]	; (800263c <__aeabi_ddiv+0x37c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d100      	bne.n	80022f0 <__aeabi_ddiv+0x30>
 80022ee:	e18c      	b.n	800260a <__aeabi_ddiv+0x34a>
 80022f0:	4659      	mov	r1, fp
 80022f2:	0f42      	lsrs	r2, r0, #29
 80022f4:	00c9      	lsls	r1, r1, #3
 80022f6:	430a      	orrs	r2, r1
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	0409      	lsls	r1, r1, #16
 80022fc:	4311      	orrs	r1, r2
 80022fe:	00c2      	lsls	r2, r0, #3
 8002300:	4690      	mov	r8, r2
 8002302:	4acf      	ldr	r2, [pc, #828]	; (8002640 <__aeabi_ddiv+0x380>)
 8002304:	4689      	mov	r9, r1
 8002306:	4692      	mov	sl, r2
 8002308:	449a      	add	sl, r3
 800230a:	2300      	movs	r3, #0
 800230c:	2400      	movs	r4, #0
 800230e:	9303      	str	r3, [sp, #12]
 8002310:	9e00      	ldr	r6, [sp, #0]
 8002312:	9f01      	ldr	r7, [sp, #4]
 8002314:	033b      	lsls	r3, r7, #12
 8002316:	0b1b      	lsrs	r3, r3, #12
 8002318:	469b      	mov	fp, r3
 800231a:	007b      	lsls	r3, r7, #1
 800231c:	0030      	movs	r0, r6
 800231e:	0d5b      	lsrs	r3, r3, #21
 8002320:	0ffd      	lsrs	r5, r7, #31
 8002322:	2b00      	cmp	r3, #0
 8002324:	d100      	bne.n	8002328 <__aeabi_ddiv+0x68>
 8002326:	e128      	b.n	800257a <__aeabi_ddiv+0x2ba>
 8002328:	4ac4      	ldr	r2, [pc, #784]	; (800263c <__aeabi_ddiv+0x37c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d100      	bne.n	8002330 <__aeabi_ddiv+0x70>
 800232e:	e177      	b.n	8002620 <__aeabi_ddiv+0x360>
 8002330:	4659      	mov	r1, fp
 8002332:	0f72      	lsrs	r2, r6, #29
 8002334:	00c9      	lsls	r1, r1, #3
 8002336:	430a      	orrs	r2, r1
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	0409      	lsls	r1, r1, #16
 800233c:	4311      	orrs	r1, r2
 800233e:	468b      	mov	fp, r1
 8002340:	49bf      	ldr	r1, [pc, #764]	; (8002640 <__aeabi_ddiv+0x380>)
 8002342:	00f2      	lsls	r2, r6, #3
 8002344:	468c      	mov	ip, r1
 8002346:	4651      	mov	r1, sl
 8002348:	4463      	add	r3, ip
 800234a:	1acb      	subs	r3, r1, r3
 800234c:	469a      	mov	sl, r3
 800234e:	2300      	movs	r3, #0
 8002350:	9e02      	ldr	r6, [sp, #8]
 8002352:	406e      	eors	r6, r5
 8002354:	2c0f      	cmp	r4, #15
 8002356:	d827      	bhi.n	80023a8 <__aeabi_ddiv+0xe8>
 8002358:	49ba      	ldr	r1, [pc, #744]	; (8002644 <__aeabi_ddiv+0x384>)
 800235a:	00a4      	lsls	r4, r4, #2
 800235c:	5909      	ldr	r1, [r1, r4]
 800235e:	468f      	mov	pc, r1
 8002360:	46cb      	mov	fp, r9
 8002362:	4642      	mov	r2, r8
 8002364:	9e02      	ldr	r6, [sp, #8]
 8002366:	9b03      	ldr	r3, [sp, #12]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d016      	beq.n	800239a <__aeabi_ddiv+0xda>
 800236c:	2b03      	cmp	r3, #3
 800236e:	d100      	bne.n	8002372 <__aeabi_ddiv+0xb2>
 8002370:	e2a9      	b.n	80028c6 <__aeabi_ddiv+0x606>
 8002372:	2b01      	cmp	r3, #1
 8002374:	d000      	beq.n	8002378 <__aeabi_ddiv+0xb8>
 8002376:	e0df      	b.n	8002538 <__aeabi_ddiv+0x278>
 8002378:	2200      	movs	r2, #0
 800237a:	2300      	movs	r3, #0
 800237c:	2400      	movs	r4, #0
 800237e:	4690      	mov	r8, r2
 8002380:	051b      	lsls	r3, r3, #20
 8002382:	4323      	orrs	r3, r4
 8002384:	07f6      	lsls	r6, r6, #31
 8002386:	4333      	orrs	r3, r6
 8002388:	4640      	mov	r0, r8
 800238a:	0019      	movs	r1, r3
 800238c:	b007      	add	sp, #28
 800238e:	bcf0      	pop	{r4, r5, r6, r7}
 8002390:	46bb      	mov	fp, r7
 8002392:	46b2      	mov	sl, r6
 8002394:	46a9      	mov	r9, r5
 8002396:	46a0      	mov	r8, r4
 8002398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239a:	2200      	movs	r2, #0
 800239c:	2400      	movs	r4, #0
 800239e:	4690      	mov	r8, r2
 80023a0:	4ba6      	ldr	r3, [pc, #664]	; (800263c <__aeabi_ddiv+0x37c>)
 80023a2:	e7ed      	b.n	8002380 <__aeabi_ddiv+0xc0>
 80023a4:	002e      	movs	r6, r5
 80023a6:	e7df      	b.n	8002368 <__aeabi_ddiv+0xa8>
 80023a8:	45cb      	cmp	fp, r9
 80023aa:	d200      	bcs.n	80023ae <__aeabi_ddiv+0xee>
 80023ac:	e1d8      	b.n	8002760 <__aeabi_ddiv+0x4a0>
 80023ae:	d100      	bne.n	80023b2 <__aeabi_ddiv+0xf2>
 80023b0:	e1d3      	b.n	800275a <__aeabi_ddiv+0x49a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	425b      	negs	r3, r3
 80023b6:	469c      	mov	ip, r3
 80023b8:	4644      	mov	r4, r8
 80023ba:	4648      	mov	r0, r9
 80023bc:	2700      	movs	r7, #0
 80023be:	44e2      	add	sl, ip
 80023c0:	465b      	mov	r3, fp
 80023c2:	0e15      	lsrs	r5, r2, #24
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	431d      	orrs	r5, r3
 80023c8:	0c19      	lsrs	r1, r3, #16
 80023ca:	042b      	lsls	r3, r5, #16
 80023cc:	0212      	lsls	r2, r2, #8
 80023ce:	9500      	str	r5, [sp, #0]
 80023d0:	0c1d      	lsrs	r5, r3, #16
 80023d2:	4691      	mov	r9, r2
 80023d4:	9102      	str	r1, [sp, #8]
 80023d6:	9503      	str	r5, [sp, #12]
 80023d8:	f7fd fef8 	bl	80001cc <__aeabi_uidivmod>
 80023dc:	0002      	movs	r2, r0
 80023de:	436a      	muls	r2, r5
 80023e0:	040b      	lsls	r3, r1, #16
 80023e2:	0c21      	lsrs	r1, r4, #16
 80023e4:	4680      	mov	r8, r0
 80023e6:	4319      	orrs	r1, r3
 80023e8:	428a      	cmp	r2, r1
 80023ea:	d909      	bls.n	8002400 <__aeabi_ddiv+0x140>
 80023ec:	9d00      	ldr	r5, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	46ac      	mov	ip, r5
 80023f2:	425b      	negs	r3, r3
 80023f4:	4461      	add	r1, ip
 80023f6:	469c      	mov	ip, r3
 80023f8:	44e0      	add	r8, ip
 80023fa:	428d      	cmp	r5, r1
 80023fc:	d800      	bhi.n	8002400 <__aeabi_ddiv+0x140>
 80023fe:	e1ff      	b.n	8002800 <__aeabi_ddiv+0x540>
 8002400:	1a88      	subs	r0, r1, r2
 8002402:	9902      	ldr	r1, [sp, #8]
 8002404:	f7fd fee2 	bl	80001cc <__aeabi_uidivmod>
 8002408:	9a03      	ldr	r2, [sp, #12]
 800240a:	0424      	lsls	r4, r4, #16
 800240c:	4342      	muls	r2, r0
 800240e:	0409      	lsls	r1, r1, #16
 8002410:	0c24      	lsrs	r4, r4, #16
 8002412:	0003      	movs	r3, r0
 8002414:	430c      	orrs	r4, r1
 8002416:	42a2      	cmp	r2, r4
 8002418:	d906      	bls.n	8002428 <__aeabi_ddiv+0x168>
 800241a:	9900      	ldr	r1, [sp, #0]
 800241c:	3b01      	subs	r3, #1
 800241e:	468c      	mov	ip, r1
 8002420:	4464      	add	r4, ip
 8002422:	42a1      	cmp	r1, r4
 8002424:	d800      	bhi.n	8002428 <__aeabi_ddiv+0x168>
 8002426:	e1e5      	b.n	80027f4 <__aeabi_ddiv+0x534>
 8002428:	1aa0      	subs	r0, r4, r2
 800242a:	4642      	mov	r2, r8
 800242c:	0412      	lsls	r2, r2, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	4693      	mov	fp, r2
 8002432:	464b      	mov	r3, r9
 8002434:	4659      	mov	r1, fp
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	001d      	movs	r5, r3
 800243a:	9304      	str	r3, [sp, #16]
 800243c:	040b      	lsls	r3, r1, #16
 800243e:	4649      	mov	r1, r9
 8002440:	0409      	lsls	r1, r1, #16
 8002442:	0c09      	lsrs	r1, r1, #16
 8002444:	000c      	movs	r4, r1
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	435c      	muls	r4, r3
 800244a:	0c12      	lsrs	r2, r2, #16
 800244c:	436b      	muls	r3, r5
 800244e:	4688      	mov	r8, r1
 8002450:	4351      	muls	r1, r2
 8002452:	436a      	muls	r2, r5
 8002454:	0c25      	lsrs	r5, r4, #16
 8002456:	46ac      	mov	ip, r5
 8002458:	185b      	adds	r3, r3, r1
 800245a:	4463      	add	r3, ip
 800245c:	4299      	cmp	r1, r3
 800245e:	d903      	bls.n	8002468 <__aeabi_ddiv+0x1a8>
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	0249      	lsls	r1, r1, #9
 8002464:	468c      	mov	ip, r1
 8002466:	4462      	add	r2, ip
 8002468:	0c19      	lsrs	r1, r3, #16
 800246a:	0424      	lsls	r4, r4, #16
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	0c24      	lsrs	r4, r4, #16
 8002470:	188a      	adds	r2, r1, r2
 8002472:	191c      	adds	r4, r3, r4
 8002474:	4290      	cmp	r0, r2
 8002476:	d302      	bcc.n	800247e <__aeabi_ddiv+0x1be>
 8002478:	d116      	bne.n	80024a8 <__aeabi_ddiv+0x1e8>
 800247a:	42a7      	cmp	r7, r4
 800247c:	d214      	bcs.n	80024a8 <__aeabi_ddiv+0x1e8>
 800247e:	465b      	mov	r3, fp
 8002480:	9d00      	ldr	r5, [sp, #0]
 8002482:	3b01      	subs	r3, #1
 8002484:	444f      	add	r7, r9
 8002486:	9305      	str	r3, [sp, #20]
 8002488:	454f      	cmp	r7, r9
 800248a:	419b      	sbcs	r3, r3
 800248c:	46ac      	mov	ip, r5
 800248e:	425b      	negs	r3, r3
 8002490:	4463      	add	r3, ip
 8002492:	18c0      	adds	r0, r0, r3
 8002494:	4285      	cmp	r5, r0
 8002496:	d300      	bcc.n	800249a <__aeabi_ddiv+0x1da>
 8002498:	e1a5      	b.n	80027e6 <__aeabi_ddiv+0x526>
 800249a:	4282      	cmp	r2, r0
 800249c:	d900      	bls.n	80024a0 <__aeabi_ddiv+0x1e0>
 800249e:	e1f9      	b.n	8002894 <__aeabi_ddiv+0x5d4>
 80024a0:	d100      	bne.n	80024a4 <__aeabi_ddiv+0x1e4>
 80024a2:	e1f4      	b.n	800288e <__aeabi_ddiv+0x5ce>
 80024a4:	9b05      	ldr	r3, [sp, #20]
 80024a6:	469b      	mov	fp, r3
 80024a8:	1b3c      	subs	r4, r7, r4
 80024aa:	42a7      	cmp	r7, r4
 80024ac:	41bf      	sbcs	r7, r7
 80024ae:	9d00      	ldr	r5, [sp, #0]
 80024b0:	1a80      	subs	r0, r0, r2
 80024b2:	427f      	negs	r7, r7
 80024b4:	1bc0      	subs	r0, r0, r7
 80024b6:	4285      	cmp	r5, r0
 80024b8:	d100      	bne.n	80024bc <__aeabi_ddiv+0x1fc>
 80024ba:	e1d4      	b.n	8002866 <__aeabi_ddiv+0x5a6>
 80024bc:	9902      	ldr	r1, [sp, #8]
 80024be:	f7fd fe85 	bl	80001cc <__aeabi_uidivmod>
 80024c2:	9a03      	ldr	r2, [sp, #12]
 80024c4:	040b      	lsls	r3, r1, #16
 80024c6:	4342      	muls	r2, r0
 80024c8:	0c21      	lsrs	r1, r4, #16
 80024ca:	0007      	movs	r7, r0
 80024cc:	4319      	orrs	r1, r3
 80024ce:	428a      	cmp	r2, r1
 80024d0:	d900      	bls.n	80024d4 <__aeabi_ddiv+0x214>
 80024d2:	e17c      	b.n	80027ce <__aeabi_ddiv+0x50e>
 80024d4:	1a88      	subs	r0, r1, r2
 80024d6:	9902      	ldr	r1, [sp, #8]
 80024d8:	f7fd fe78 	bl	80001cc <__aeabi_uidivmod>
 80024dc:	9a03      	ldr	r2, [sp, #12]
 80024de:	0424      	lsls	r4, r4, #16
 80024e0:	4342      	muls	r2, r0
 80024e2:	0409      	lsls	r1, r1, #16
 80024e4:	0c24      	lsrs	r4, r4, #16
 80024e6:	0003      	movs	r3, r0
 80024e8:	430c      	orrs	r4, r1
 80024ea:	42a2      	cmp	r2, r4
 80024ec:	d900      	bls.n	80024f0 <__aeabi_ddiv+0x230>
 80024ee:	e161      	b.n	80027b4 <__aeabi_ddiv+0x4f4>
 80024f0:	4641      	mov	r1, r8
 80024f2:	1aa4      	subs	r4, r4, r2
 80024f4:	043a      	lsls	r2, r7, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	9d04      	ldr	r5, [sp, #16]
 80024fa:	0413      	lsls	r3, r2, #16
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	4359      	muls	r1, r3
 8002500:	4647      	mov	r7, r8
 8002502:	436b      	muls	r3, r5
 8002504:	469c      	mov	ip, r3
 8002506:	0c10      	lsrs	r0, r2, #16
 8002508:	4347      	muls	r7, r0
 800250a:	0c0b      	lsrs	r3, r1, #16
 800250c:	44bc      	add	ip, r7
 800250e:	4463      	add	r3, ip
 8002510:	4368      	muls	r0, r5
 8002512:	429f      	cmp	r7, r3
 8002514:	d903      	bls.n	800251e <__aeabi_ddiv+0x25e>
 8002516:	2580      	movs	r5, #128	; 0x80
 8002518:	026d      	lsls	r5, r5, #9
 800251a:	46ac      	mov	ip, r5
 800251c:	4460      	add	r0, ip
 800251e:	0c1f      	lsrs	r7, r3, #16
 8002520:	0409      	lsls	r1, r1, #16
 8002522:	041b      	lsls	r3, r3, #16
 8002524:	0c09      	lsrs	r1, r1, #16
 8002526:	183f      	adds	r7, r7, r0
 8002528:	185b      	adds	r3, r3, r1
 800252a:	42bc      	cmp	r4, r7
 800252c:	d200      	bcs.n	8002530 <__aeabi_ddiv+0x270>
 800252e:	e106      	b.n	800273e <__aeabi_ddiv+0x47e>
 8002530:	d100      	bne.n	8002534 <__aeabi_ddiv+0x274>
 8002532:	e101      	b.n	8002738 <__aeabi_ddiv+0x478>
 8002534:	2301      	movs	r3, #1
 8002536:	431a      	orrs	r2, r3
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <__aeabi_ddiv+0x388>)
 800253a:	4453      	add	r3, sl
 800253c:	2b00      	cmp	r3, #0
 800253e:	dc00      	bgt.n	8002542 <__aeabi_ddiv+0x282>
 8002540:	e0b2      	b.n	80026a8 <__aeabi_ddiv+0x3e8>
 8002542:	0751      	lsls	r1, r2, #29
 8002544:	d000      	beq.n	8002548 <__aeabi_ddiv+0x288>
 8002546:	e19b      	b.n	8002880 <__aeabi_ddiv+0x5c0>
 8002548:	4659      	mov	r1, fp
 800254a:	01c9      	lsls	r1, r1, #7
 800254c:	d506      	bpl.n	800255c <__aeabi_ddiv+0x29c>
 800254e:	4659      	mov	r1, fp
 8002550:	4b3e      	ldr	r3, [pc, #248]	; (800264c <__aeabi_ddiv+0x38c>)
 8002552:	4019      	ands	r1, r3
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	468b      	mov	fp, r1
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4453      	add	r3, sl
 800255c:	493c      	ldr	r1, [pc, #240]	; (8002650 <__aeabi_ddiv+0x390>)
 800255e:	428b      	cmp	r3, r1
 8002560:	dd00      	ble.n	8002564 <__aeabi_ddiv+0x2a4>
 8002562:	e71a      	b.n	800239a <__aeabi_ddiv+0xda>
 8002564:	4659      	mov	r1, fp
 8002566:	08d2      	lsrs	r2, r2, #3
 8002568:	0749      	lsls	r1, r1, #29
 800256a:	4311      	orrs	r1, r2
 800256c:	465a      	mov	r2, fp
 800256e:	055b      	lsls	r3, r3, #21
 8002570:	0254      	lsls	r4, r2, #9
 8002572:	4688      	mov	r8, r1
 8002574:	0b24      	lsrs	r4, r4, #12
 8002576:	0d5b      	lsrs	r3, r3, #21
 8002578:	e702      	b.n	8002380 <__aeabi_ddiv+0xc0>
 800257a:	465a      	mov	r2, fp
 800257c:	9b00      	ldr	r3, [sp, #0]
 800257e:	431a      	orrs	r2, r3
 8002580:	d100      	bne.n	8002584 <__aeabi_ddiv+0x2c4>
 8002582:	e082      	b.n	800268a <__aeabi_ddiv+0x3ca>
 8002584:	465b      	mov	r3, fp
 8002586:	2b00      	cmp	r3, #0
 8002588:	d100      	bne.n	800258c <__aeabi_ddiv+0x2cc>
 800258a:	e104      	b.n	8002796 <__aeabi_ddiv+0x4d6>
 800258c:	4658      	mov	r0, fp
 800258e:	f7fd fe5d 	bl	800024c <__clzsi2>
 8002592:	0002      	movs	r2, r0
 8002594:	0003      	movs	r3, r0
 8002596:	3a0b      	subs	r2, #11
 8002598:	271d      	movs	r7, #29
 800259a:	9e00      	ldr	r6, [sp, #0]
 800259c:	1aba      	subs	r2, r7, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	4658      	mov	r0, fp
 80025a2:	40d6      	lsrs	r6, r2
 80025a4:	3908      	subs	r1, #8
 80025a6:	4088      	lsls	r0, r1
 80025a8:	0032      	movs	r2, r6
 80025aa:	4302      	orrs	r2, r0
 80025ac:	4693      	mov	fp, r2
 80025ae:	9a00      	ldr	r2, [sp, #0]
 80025b0:	408a      	lsls	r2, r1
 80025b2:	4928      	ldr	r1, [pc, #160]	; (8002654 <__aeabi_ddiv+0x394>)
 80025b4:	4453      	add	r3, sl
 80025b6:	468a      	mov	sl, r1
 80025b8:	449a      	add	sl, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	e6c8      	b.n	8002350 <__aeabi_ddiv+0x90>
 80025be:	465b      	mov	r3, fp
 80025c0:	4303      	orrs	r3, r0
 80025c2:	4699      	mov	r9, r3
 80025c4:	d05a      	beq.n	800267c <__aeabi_ddiv+0x3bc>
 80025c6:	465b      	mov	r3, fp
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d100      	bne.n	80025ce <__aeabi_ddiv+0x30e>
 80025cc:	e0d1      	b.n	8002772 <__aeabi_ddiv+0x4b2>
 80025ce:	4658      	mov	r0, fp
 80025d0:	f7fd fe3c 	bl	800024c <__clzsi2>
 80025d4:	230b      	movs	r3, #11
 80025d6:	425b      	negs	r3, r3
 80025d8:	469c      	mov	ip, r3
 80025da:	0002      	movs	r2, r0
 80025dc:	4484      	add	ip, r0
 80025de:	4666      	mov	r6, ip
 80025e0:	231d      	movs	r3, #29
 80025e2:	1b9b      	subs	r3, r3, r6
 80025e4:	0026      	movs	r6, r4
 80025e6:	0011      	movs	r1, r2
 80025e8:	4658      	mov	r0, fp
 80025ea:	40de      	lsrs	r6, r3
 80025ec:	3908      	subs	r1, #8
 80025ee:	4088      	lsls	r0, r1
 80025f0:	0033      	movs	r3, r6
 80025f2:	4303      	orrs	r3, r0
 80025f4:	4699      	mov	r9, r3
 80025f6:	0023      	movs	r3, r4
 80025f8:	408b      	lsls	r3, r1
 80025fa:	4698      	mov	r8, r3
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <__aeabi_ddiv+0x398>)
 80025fe:	2400      	movs	r4, #0
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	469a      	mov	sl, r3
 8002604:	2300      	movs	r3, #0
 8002606:	9303      	str	r3, [sp, #12]
 8002608:	e682      	b.n	8002310 <__aeabi_ddiv+0x50>
 800260a:	465a      	mov	r2, fp
 800260c:	4302      	orrs	r2, r0
 800260e:	4691      	mov	r9, r2
 8002610:	d12e      	bne.n	8002670 <__aeabi_ddiv+0x3b0>
 8002612:	2200      	movs	r2, #0
 8002614:	469a      	mov	sl, r3
 8002616:	2302      	movs	r3, #2
 8002618:	4690      	mov	r8, r2
 800261a:	2408      	movs	r4, #8
 800261c:	9303      	str	r3, [sp, #12]
 800261e:	e677      	b.n	8002310 <__aeabi_ddiv+0x50>
 8002620:	465a      	mov	r2, fp
 8002622:	9b00      	ldr	r3, [sp, #0]
 8002624:	431a      	orrs	r2, r3
 8002626:	d11b      	bne.n	8002660 <__aeabi_ddiv+0x3a0>
 8002628:	2302      	movs	r3, #2
 800262a:	431c      	orrs	r4, r3
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <__aeabi_ddiv+0x39c>)
 800262e:	469c      	mov	ip, r3
 8002630:	2300      	movs	r3, #0
 8002632:	44e2      	add	sl, ip
 8002634:	469b      	mov	fp, r3
 8002636:	3302      	adds	r3, #2
 8002638:	e68a      	b.n	8002350 <__aeabi_ddiv+0x90>
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	000007ff 	.word	0x000007ff
 8002640:	fffffc01 	.word	0xfffffc01
 8002644:	0800448c 	.word	0x0800448c
 8002648:	000003ff 	.word	0x000003ff
 800264c:	feffffff 	.word	0xfeffffff
 8002650:	000007fe 	.word	0x000007fe
 8002654:	000003f3 	.word	0x000003f3
 8002658:	fffffc0d 	.word	0xfffffc0d
 800265c:	fffff801 	.word	0xfffff801
 8002660:	2303      	movs	r3, #3
 8002662:	431c      	orrs	r4, r3
 8002664:	4b9f      	ldr	r3, [pc, #636]	; (80028e4 <__aeabi_ddiv+0x624>)
 8002666:	0032      	movs	r2, r6
 8002668:	469c      	mov	ip, r3
 800266a:	2303      	movs	r3, #3
 800266c:	44e2      	add	sl, ip
 800266e:	e66f      	b.n	8002350 <__aeabi_ddiv+0x90>
 8002670:	469a      	mov	sl, r3
 8002672:	2303      	movs	r3, #3
 8002674:	46d9      	mov	r9, fp
 8002676:	240c      	movs	r4, #12
 8002678:	9303      	str	r3, [sp, #12]
 800267a:	e649      	b.n	8002310 <__aeabi_ddiv+0x50>
 800267c:	2300      	movs	r3, #0
 800267e:	4698      	mov	r8, r3
 8002680:	469a      	mov	sl, r3
 8002682:	3301      	adds	r3, #1
 8002684:	2404      	movs	r4, #4
 8002686:	9303      	str	r3, [sp, #12]
 8002688:	e642      	b.n	8002310 <__aeabi_ddiv+0x50>
 800268a:	2301      	movs	r3, #1
 800268c:	431c      	orrs	r4, r3
 800268e:	2300      	movs	r3, #0
 8002690:	469b      	mov	fp, r3
 8002692:	3301      	adds	r3, #1
 8002694:	e65c      	b.n	8002350 <__aeabi_ddiv+0x90>
 8002696:	2300      	movs	r3, #0
 8002698:	2480      	movs	r4, #128	; 0x80
 800269a:	4698      	mov	r8, r3
 800269c:	2600      	movs	r6, #0
 800269e:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <__aeabi_ddiv+0x628>)
 80026a0:	0324      	lsls	r4, r4, #12
 80026a2:	e66d      	b.n	8002380 <__aeabi_ddiv+0xc0>
 80026a4:	2201      	movs	r2, #1
 80026a6:	4252      	negs	r2, r2
 80026a8:	2101      	movs	r1, #1
 80026aa:	1ac9      	subs	r1, r1, r3
 80026ac:	2938      	cmp	r1, #56	; 0x38
 80026ae:	dd00      	ble.n	80026b2 <__aeabi_ddiv+0x3f2>
 80026b0:	e662      	b.n	8002378 <__aeabi_ddiv+0xb8>
 80026b2:	291f      	cmp	r1, #31
 80026b4:	dc00      	bgt.n	80026b8 <__aeabi_ddiv+0x3f8>
 80026b6:	e0ab      	b.n	8002810 <__aeabi_ddiv+0x550>
 80026b8:	201f      	movs	r0, #31
 80026ba:	4240      	negs	r0, r0
 80026bc:	1ac3      	subs	r3, r0, r3
 80026be:	4658      	mov	r0, fp
 80026c0:	40d8      	lsrs	r0, r3
 80026c2:	0003      	movs	r3, r0
 80026c4:	2920      	cmp	r1, #32
 80026c6:	d004      	beq.n	80026d2 <__aeabi_ddiv+0x412>
 80026c8:	4658      	mov	r0, fp
 80026ca:	4988      	ldr	r1, [pc, #544]	; (80028ec <__aeabi_ddiv+0x62c>)
 80026cc:	4451      	add	r1, sl
 80026ce:	4088      	lsls	r0, r1
 80026d0:	4302      	orrs	r2, r0
 80026d2:	1e51      	subs	r1, r2, #1
 80026d4:	418a      	sbcs	r2, r1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	2307      	movs	r3, #7
 80026da:	0019      	movs	r1, r3
 80026dc:	2400      	movs	r4, #0
 80026de:	4011      	ands	r1, r2
 80026e0:	4213      	tst	r3, r2
 80026e2:	d00c      	beq.n	80026fe <__aeabi_ddiv+0x43e>
 80026e4:	230f      	movs	r3, #15
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d100      	bne.n	80026ee <__aeabi_ddiv+0x42e>
 80026ec:	e0f8      	b.n	80028e0 <__aeabi_ddiv+0x620>
 80026ee:	1d11      	adds	r1, r2, #4
 80026f0:	4291      	cmp	r1, r2
 80026f2:	419b      	sbcs	r3, r3
 80026f4:	000a      	movs	r2, r1
 80026f6:	425b      	negs	r3, r3
 80026f8:	0759      	lsls	r1, r3, #29
 80026fa:	025b      	lsls	r3, r3, #9
 80026fc:	0b1c      	lsrs	r4, r3, #12
 80026fe:	08d2      	lsrs	r2, r2, #3
 8002700:	430a      	orrs	r2, r1
 8002702:	4690      	mov	r8, r2
 8002704:	2300      	movs	r3, #0
 8002706:	e63b      	b.n	8002380 <__aeabi_ddiv+0xc0>
 8002708:	2480      	movs	r4, #128	; 0x80
 800270a:	464b      	mov	r3, r9
 800270c:	0324      	lsls	r4, r4, #12
 800270e:	4223      	tst	r3, r4
 8002710:	d009      	beq.n	8002726 <__aeabi_ddiv+0x466>
 8002712:	465b      	mov	r3, fp
 8002714:	4223      	tst	r3, r4
 8002716:	d106      	bne.n	8002726 <__aeabi_ddiv+0x466>
 8002718:	431c      	orrs	r4, r3
 800271a:	0324      	lsls	r4, r4, #12
 800271c:	002e      	movs	r6, r5
 800271e:	4690      	mov	r8, r2
 8002720:	4b71      	ldr	r3, [pc, #452]	; (80028e8 <__aeabi_ddiv+0x628>)
 8002722:	0b24      	lsrs	r4, r4, #12
 8002724:	e62c      	b.n	8002380 <__aeabi_ddiv+0xc0>
 8002726:	2480      	movs	r4, #128	; 0x80
 8002728:	464b      	mov	r3, r9
 800272a:	0324      	lsls	r4, r4, #12
 800272c:	431c      	orrs	r4, r3
 800272e:	0324      	lsls	r4, r4, #12
 8002730:	9e02      	ldr	r6, [sp, #8]
 8002732:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <__aeabi_ddiv+0x628>)
 8002734:	0b24      	lsrs	r4, r4, #12
 8002736:	e623      	b.n	8002380 <__aeabi_ddiv+0xc0>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d100      	bne.n	800273e <__aeabi_ddiv+0x47e>
 800273c:	e6fc      	b.n	8002538 <__aeabi_ddiv+0x278>
 800273e:	9800      	ldr	r0, [sp, #0]
 8002740:	1e51      	subs	r1, r2, #1
 8002742:	4684      	mov	ip, r0
 8002744:	4464      	add	r4, ip
 8002746:	4284      	cmp	r4, r0
 8002748:	d200      	bcs.n	800274c <__aeabi_ddiv+0x48c>
 800274a:	e084      	b.n	8002856 <__aeabi_ddiv+0x596>
 800274c:	42bc      	cmp	r4, r7
 800274e:	d200      	bcs.n	8002752 <__aeabi_ddiv+0x492>
 8002750:	e0ad      	b.n	80028ae <__aeabi_ddiv+0x5ee>
 8002752:	d100      	bne.n	8002756 <__aeabi_ddiv+0x496>
 8002754:	e0c0      	b.n	80028d8 <__aeabi_ddiv+0x618>
 8002756:	000a      	movs	r2, r1
 8002758:	e6ec      	b.n	8002534 <__aeabi_ddiv+0x274>
 800275a:	4542      	cmp	r2, r8
 800275c:	d900      	bls.n	8002760 <__aeabi_ddiv+0x4a0>
 800275e:	e628      	b.n	80023b2 <__aeabi_ddiv+0xf2>
 8002760:	464b      	mov	r3, r9
 8002762:	07dc      	lsls	r4, r3, #31
 8002764:	0858      	lsrs	r0, r3, #1
 8002766:	4643      	mov	r3, r8
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	431c      	orrs	r4, r3
 800276c:	4643      	mov	r3, r8
 800276e:	07df      	lsls	r7, r3, #31
 8002770:	e626      	b.n	80023c0 <__aeabi_ddiv+0x100>
 8002772:	f7fd fd6b 	bl	800024c <__clzsi2>
 8002776:	2315      	movs	r3, #21
 8002778:	469c      	mov	ip, r3
 800277a:	4484      	add	ip, r0
 800277c:	0002      	movs	r2, r0
 800277e:	4663      	mov	r3, ip
 8002780:	3220      	adds	r2, #32
 8002782:	2b1c      	cmp	r3, #28
 8002784:	dc00      	bgt.n	8002788 <__aeabi_ddiv+0x4c8>
 8002786:	e72a      	b.n	80025de <__aeabi_ddiv+0x31e>
 8002788:	0023      	movs	r3, r4
 800278a:	3808      	subs	r0, #8
 800278c:	4083      	lsls	r3, r0
 800278e:	4699      	mov	r9, r3
 8002790:	2300      	movs	r3, #0
 8002792:	4698      	mov	r8, r3
 8002794:	e732      	b.n	80025fc <__aeabi_ddiv+0x33c>
 8002796:	f7fd fd59 	bl	800024c <__clzsi2>
 800279a:	0002      	movs	r2, r0
 800279c:	0003      	movs	r3, r0
 800279e:	3215      	adds	r2, #21
 80027a0:	3320      	adds	r3, #32
 80027a2:	2a1c      	cmp	r2, #28
 80027a4:	dc00      	bgt.n	80027a8 <__aeabi_ddiv+0x4e8>
 80027a6:	e6f7      	b.n	8002598 <__aeabi_ddiv+0x2d8>
 80027a8:	9900      	ldr	r1, [sp, #0]
 80027aa:	3808      	subs	r0, #8
 80027ac:	4081      	lsls	r1, r0
 80027ae:	2200      	movs	r2, #0
 80027b0:	468b      	mov	fp, r1
 80027b2:	e6fe      	b.n	80025b2 <__aeabi_ddiv+0x2f2>
 80027b4:	9900      	ldr	r1, [sp, #0]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	468c      	mov	ip, r1
 80027ba:	4464      	add	r4, ip
 80027bc:	42a1      	cmp	r1, r4
 80027be:	d900      	bls.n	80027c2 <__aeabi_ddiv+0x502>
 80027c0:	e696      	b.n	80024f0 <__aeabi_ddiv+0x230>
 80027c2:	42a2      	cmp	r2, r4
 80027c4:	d800      	bhi.n	80027c8 <__aeabi_ddiv+0x508>
 80027c6:	e693      	b.n	80024f0 <__aeabi_ddiv+0x230>
 80027c8:	1e83      	subs	r3, r0, #2
 80027ca:	4464      	add	r4, ip
 80027cc:	e690      	b.n	80024f0 <__aeabi_ddiv+0x230>
 80027ce:	46ac      	mov	ip, r5
 80027d0:	4461      	add	r1, ip
 80027d2:	3f01      	subs	r7, #1
 80027d4:	428d      	cmp	r5, r1
 80027d6:	d900      	bls.n	80027da <__aeabi_ddiv+0x51a>
 80027d8:	e67c      	b.n	80024d4 <__aeabi_ddiv+0x214>
 80027da:	428a      	cmp	r2, r1
 80027dc:	d800      	bhi.n	80027e0 <__aeabi_ddiv+0x520>
 80027de:	e679      	b.n	80024d4 <__aeabi_ddiv+0x214>
 80027e0:	1e87      	subs	r7, r0, #2
 80027e2:	4461      	add	r1, ip
 80027e4:	e676      	b.n	80024d4 <__aeabi_ddiv+0x214>
 80027e6:	4285      	cmp	r5, r0
 80027e8:	d000      	beq.n	80027ec <__aeabi_ddiv+0x52c>
 80027ea:	e65b      	b.n	80024a4 <__aeabi_ddiv+0x1e4>
 80027ec:	45b9      	cmp	r9, r7
 80027ee:	d900      	bls.n	80027f2 <__aeabi_ddiv+0x532>
 80027f0:	e658      	b.n	80024a4 <__aeabi_ddiv+0x1e4>
 80027f2:	e652      	b.n	800249a <__aeabi_ddiv+0x1da>
 80027f4:	42a2      	cmp	r2, r4
 80027f6:	d800      	bhi.n	80027fa <__aeabi_ddiv+0x53a>
 80027f8:	e616      	b.n	8002428 <__aeabi_ddiv+0x168>
 80027fa:	1e83      	subs	r3, r0, #2
 80027fc:	4464      	add	r4, ip
 80027fe:	e613      	b.n	8002428 <__aeabi_ddiv+0x168>
 8002800:	428a      	cmp	r2, r1
 8002802:	d800      	bhi.n	8002806 <__aeabi_ddiv+0x546>
 8002804:	e5fc      	b.n	8002400 <__aeabi_ddiv+0x140>
 8002806:	46ac      	mov	ip, r5
 8002808:	1e83      	subs	r3, r0, #2
 800280a:	4698      	mov	r8, r3
 800280c:	4461      	add	r1, ip
 800280e:	e5f7      	b.n	8002400 <__aeabi_ddiv+0x140>
 8002810:	4837      	ldr	r0, [pc, #220]	; (80028f0 <__aeabi_ddiv+0x630>)
 8002812:	0014      	movs	r4, r2
 8002814:	4450      	add	r0, sl
 8002816:	4082      	lsls	r2, r0
 8002818:	465b      	mov	r3, fp
 800281a:	0017      	movs	r7, r2
 800281c:	4083      	lsls	r3, r0
 800281e:	40cc      	lsrs	r4, r1
 8002820:	1e7a      	subs	r2, r7, #1
 8002822:	4197      	sbcs	r7, r2
 8002824:	4323      	orrs	r3, r4
 8002826:	433b      	orrs	r3, r7
 8002828:	001a      	movs	r2, r3
 800282a:	465b      	mov	r3, fp
 800282c:	40cb      	lsrs	r3, r1
 800282e:	0751      	lsls	r1, r2, #29
 8002830:	d009      	beq.n	8002846 <__aeabi_ddiv+0x586>
 8002832:	210f      	movs	r1, #15
 8002834:	4011      	ands	r1, r2
 8002836:	2904      	cmp	r1, #4
 8002838:	d005      	beq.n	8002846 <__aeabi_ddiv+0x586>
 800283a:	1d11      	adds	r1, r2, #4
 800283c:	4291      	cmp	r1, r2
 800283e:	4192      	sbcs	r2, r2
 8002840:	4252      	negs	r2, r2
 8002842:	189b      	adds	r3, r3, r2
 8002844:	000a      	movs	r2, r1
 8002846:	0219      	lsls	r1, r3, #8
 8002848:	d400      	bmi.n	800284c <__aeabi_ddiv+0x58c>
 800284a:	e755      	b.n	80026f8 <__aeabi_ddiv+0x438>
 800284c:	2200      	movs	r2, #0
 800284e:	2301      	movs	r3, #1
 8002850:	2400      	movs	r4, #0
 8002852:	4690      	mov	r8, r2
 8002854:	e594      	b.n	8002380 <__aeabi_ddiv+0xc0>
 8002856:	000a      	movs	r2, r1
 8002858:	42bc      	cmp	r4, r7
 800285a:	d000      	beq.n	800285e <__aeabi_ddiv+0x59e>
 800285c:	e66a      	b.n	8002534 <__aeabi_ddiv+0x274>
 800285e:	454b      	cmp	r3, r9
 8002860:	d000      	beq.n	8002864 <__aeabi_ddiv+0x5a4>
 8002862:	e667      	b.n	8002534 <__aeabi_ddiv+0x274>
 8002864:	e668      	b.n	8002538 <__aeabi_ddiv+0x278>
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <__aeabi_ddiv+0x634>)
 8002868:	4453      	add	r3, sl
 800286a:	2b00      	cmp	r3, #0
 800286c:	dc00      	bgt.n	8002870 <__aeabi_ddiv+0x5b0>
 800286e:	e719      	b.n	80026a4 <__aeabi_ddiv+0x3e4>
 8002870:	2101      	movs	r1, #1
 8002872:	4249      	negs	r1, r1
 8002874:	1d0a      	adds	r2, r1, #4
 8002876:	428a      	cmp	r2, r1
 8002878:	4189      	sbcs	r1, r1
 800287a:	4249      	negs	r1, r1
 800287c:	448b      	add	fp, r1
 800287e:	e663      	b.n	8002548 <__aeabi_ddiv+0x288>
 8002880:	210f      	movs	r1, #15
 8002882:	4011      	ands	r1, r2
 8002884:	2904      	cmp	r1, #4
 8002886:	d100      	bne.n	800288a <__aeabi_ddiv+0x5ca>
 8002888:	e65e      	b.n	8002548 <__aeabi_ddiv+0x288>
 800288a:	0011      	movs	r1, r2
 800288c:	e7f2      	b.n	8002874 <__aeabi_ddiv+0x5b4>
 800288e:	42bc      	cmp	r4, r7
 8002890:	d800      	bhi.n	8002894 <__aeabi_ddiv+0x5d4>
 8002892:	e607      	b.n	80024a4 <__aeabi_ddiv+0x1e4>
 8002894:	2302      	movs	r3, #2
 8002896:	425b      	negs	r3, r3
 8002898:	469c      	mov	ip, r3
 800289a:	9900      	ldr	r1, [sp, #0]
 800289c:	444f      	add	r7, r9
 800289e:	454f      	cmp	r7, r9
 80028a0:	419b      	sbcs	r3, r3
 80028a2:	44e3      	add	fp, ip
 80028a4:	468c      	mov	ip, r1
 80028a6:	425b      	negs	r3, r3
 80028a8:	4463      	add	r3, ip
 80028aa:	18c0      	adds	r0, r0, r3
 80028ac:	e5fc      	b.n	80024a8 <__aeabi_ddiv+0x1e8>
 80028ae:	4649      	mov	r1, r9
 80028b0:	9d00      	ldr	r5, [sp, #0]
 80028b2:	0048      	lsls	r0, r1, #1
 80028b4:	4548      	cmp	r0, r9
 80028b6:	4189      	sbcs	r1, r1
 80028b8:	46ac      	mov	ip, r5
 80028ba:	4249      	negs	r1, r1
 80028bc:	4461      	add	r1, ip
 80028be:	4681      	mov	r9, r0
 80028c0:	3a02      	subs	r2, #2
 80028c2:	1864      	adds	r4, r4, r1
 80028c4:	e7c8      	b.n	8002858 <__aeabi_ddiv+0x598>
 80028c6:	2480      	movs	r4, #128	; 0x80
 80028c8:	465b      	mov	r3, fp
 80028ca:	0324      	lsls	r4, r4, #12
 80028cc:	431c      	orrs	r4, r3
 80028ce:	0324      	lsls	r4, r4, #12
 80028d0:	4690      	mov	r8, r2
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <__aeabi_ddiv+0x628>)
 80028d4:	0b24      	lsrs	r4, r4, #12
 80028d6:	e553      	b.n	8002380 <__aeabi_ddiv+0xc0>
 80028d8:	4599      	cmp	r9, r3
 80028da:	d3e8      	bcc.n	80028ae <__aeabi_ddiv+0x5ee>
 80028dc:	000a      	movs	r2, r1
 80028de:	e7be      	b.n	800285e <__aeabi_ddiv+0x59e>
 80028e0:	2300      	movs	r3, #0
 80028e2:	e709      	b.n	80026f8 <__aeabi_ddiv+0x438>
 80028e4:	fffff801 	.word	0xfffff801
 80028e8:	000007ff 	.word	0x000007ff
 80028ec:	0000043e 	.word	0x0000043e
 80028f0:	0000041e 	.word	0x0000041e
 80028f4:	000003ff 	.word	0x000003ff

080028f8 <__aeabi_dmul>:
 80028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fa:	4657      	mov	r7, sl
 80028fc:	46de      	mov	lr, fp
 80028fe:	464e      	mov	r6, r9
 8002900:	4645      	mov	r5, r8
 8002902:	b5e0      	push	{r5, r6, r7, lr}
 8002904:	001f      	movs	r7, r3
 8002906:	030b      	lsls	r3, r1, #12
 8002908:	0b1b      	lsrs	r3, r3, #12
 800290a:	0016      	movs	r6, r2
 800290c:	469a      	mov	sl, r3
 800290e:	0fca      	lsrs	r2, r1, #31
 8002910:	004b      	lsls	r3, r1, #1
 8002912:	0004      	movs	r4, r0
 8002914:	4693      	mov	fp, r2
 8002916:	b087      	sub	sp, #28
 8002918:	0d5b      	lsrs	r3, r3, #21
 800291a:	d100      	bne.n	800291e <__aeabi_dmul+0x26>
 800291c:	e0d2      	b.n	8002ac4 <__aeabi_dmul+0x1cc>
 800291e:	4ab9      	ldr	r2, [pc, #740]	; (8002c04 <__aeabi_dmul+0x30c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d100      	bne.n	8002926 <__aeabi_dmul+0x2e>
 8002924:	e0f5      	b.n	8002b12 <__aeabi_dmul+0x21a>
 8002926:	4651      	mov	r1, sl
 8002928:	0f42      	lsrs	r2, r0, #29
 800292a:	00c9      	lsls	r1, r1, #3
 800292c:	430a      	orrs	r2, r1
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	0409      	lsls	r1, r1, #16
 8002932:	4311      	orrs	r1, r2
 8002934:	00c2      	lsls	r2, r0, #3
 8002936:	4691      	mov	r9, r2
 8002938:	4ab3      	ldr	r2, [pc, #716]	; (8002c08 <__aeabi_dmul+0x310>)
 800293a:	468a      	mov	sl, r1
 800293c:	189d      	adds	r5, r3, r2
 800293e:	2300      	movs	r3, #0
 8002940:	4698      	mov	r8, r3
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	033c      	lsls	r4, r7, #12
 8002946:	007b      	lsls	r3, r7, #1
 8002948:	0ffa      	lsrs	r2, r7, #31
 800294a:	0030      	movs	r0, r6
 800294c:	0b24      	lsrs	r4, r4, #12
 800294e:	0d5b      	lsrs	r3, r3, #21
 8002950:	9200      	str	r2, [sp, #0]
 8002952:	d100      	bne.n	8002956 <__aeabi_dmul+0x5e>
 8002954:	e093      	b.n	8002a7e <__aeabi_dmul+0x186>
 8002956:	4aab      	ldr	r2, [pc, #684]	; (8002c04 <__aeabi_dmul+0x30c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d031      	beq.n	80029c0 <__aeabi_dmul+0xc8>
 800295c:	00e4      	lsls	r4, r4, #3
 800295e:	0f72      	lsrs	r2, r6, #29
 8002960:	4322      	orrs	r2, r4
 8002962:	2480      	movs	r4, #128	; 0x80
 8002964:	0424      	lsls	r4, r4, #16
 8002966:	4314      	orrs	r4, r2
 8002968:	4aa7      	ldr	r2, [pc, #668]	; (8002c08 <__aeabi_dmul+0x310>)
 800296a:	00f0      	lsls	r0, r6, #3
 800296c:	4694      	mov	ip, r2
 800296e:	4463      	add	r3, ip
 8002970:	195b      	adds	r3, r3, r5
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	9201      	str	r2, [sp, #4]
 8002976:	4642      	mov	r2, r8
 8002978:	2500      	movs	r5, #0
 800297a:	2a0a      	cmp	r2, #10
 800297c:	dc3f      	bgt.n	80029fe <__aeabi_dmul+0x106>
 800297e:	465a      	mov	r2, fp
 8002980:	9900      	ldr	r1, [sp, #0]
 8002982:	404a      	eors	r2, r1
 8002984:	4693      	mov	fp, r2
 8002986:	4642      	mov	r2, r8
 8002988:	2a02      	cmp	r2, #2
 800298a:	dc2f      	bgt.n	80029ec <__aeabi_dmul+0xf4>
 800298c:	3a01      	subs	r2, #1
 800298e:	2a01      	cmp	r2, #1
 8002990:	d900      	bls.n	8002994 <__aeabi_dmul+0x9c>
 8002992:	e145      	b.n	8002c20 <__aeabi_dmul+0x328>
 8002994:	2d02      	cmp	r5, #2
 8002996:	d100      	bne.n	800299a <__aeabi_dmul+0xa2>
 8002998:	e0c7      	b.n	8002b2a <__aeabi_dmul+0x232>
 800299a:	2d01      	cmp	r5, #1
 800299c:	d13a      	bne.n	8002a14 <__aeabi_dmul+0x11c>
 800299e:	2300      	movs	r3, #0
 80029a0:	2400      	movs	r4, #0
 80029a2:	2200      	movs	r2, #0
 80029a4:	0010      	movs	r0, r2
 80029a6:	465a      	mov	r2, fp
 80029a8:	051b      	lsls	r3, r3, #20
 80029aa:	4323      	orrs	r3, r4
 80029ac:	07d2      	lsls	r2, r2, #31
 80029ae:	4313      	orrs	r3, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	b007      	add	sp, #28
 80029b4:	bcf0      	pop	{r4, r5, r6, r7}
 80029b6:	46bb      	mov	fp, r7
 80029b8:	46b2      	mov	sl, r6
 80029ba:	46a9      	mov	r9, r5
 80029bc:	46a0      	mov	r8, r4
 80029be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c0:	4326      	orrs	r6, r4
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dmul+0xce>
 80029c4:	e0bb      	b.n	8002b3e <__aeabi_dmul+0x246>
 80029c6:	2203      	movs	r2, #3
 80029c8:	4641      	mov	r1, r8
 80029ca:	4311      	orrs	r1, r2
 80029cc:	465a      	mov	r2, fp
 80029ce:	4688      	mov	r8, r1
 80029d0:	9900      	ldr	r1, [sp, #0]
 80029d2:	4b8c      	ldr	r3, [pc, #560]	; (8002c04 <__aeabi_dmul+0x30c>)
 80029d4:	404a      	eors	r2, r1
 80029d6:	2180      	movs	r1, #128	; 0x80
 80029d8:	0109      	lsls	r1, r1, #4
 80029da:	1869      	adds	r1, r5, r1
 80029dc:	9101      	str	r1, [sp, #4]
 80029de:	4641      	mov	r1, r8
 80029e0:	18eb      	adds	r3, r5, r3
 80029e2:	290a      	cmp	r1, #10
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dmul+0xf0>
 80029e6:	e231      	b.n	8002e4c <__aeabi_dmul+0x554>
 80029e8:	4693      	mov	fp, r2
 80029ea:	2503      	movs	r5, #3
 80029ec:	4642      	mov	r2, r8
 80029ee:	2701      	movs	r7, #1
 80029f0:	4097      	lsls	r7, r2
 80029f2:	21a6      	movs	r1, #166	; 0xa6
 80029f4:	003a      	movs	r2, r7
 80029f6:	00c9      	lsls	r1, r1, #3
 80029f8:	400a      	ands	r2, r1
 80029fa:	420f      	tst	r7, r1
 80029fc:	d031      	beq.n	8002a62 <__aeabi_dmul+0x16a>
 80029fe:	9d02      	ldr	r5, [sp, #8]
 8002a00:	2d02      	cmp	r5, #2
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0x10e>
 8002a04:	e233      	b.n	8002e6e <__aeabi_dmul+0x576>
 8002a06:	2d03      	cmp	r5, #3
 8002a08:	d100      	bne.n	8002a0c <__aeabi_dmul+0x114>
 8002a0a:	e1d0      	b.n	8002dae <__aeabi_dmul+0x4b6>
 8002a0c:	4654      	mov	r4, sl
 8002a0e:	4648      	mov	r0, r9
 8002a10:	2d01      	cmp	r5, #1
 8002a12:	d0c4      	beq.n	800299e <__aeabi_dmul+0xa6>
 8002a14:	9a01      	ldr	r2, [sp, #4]
 8002a16:	4b7d      	ldr	r3, [pc, #500]	; (8002c0c <__aeabi_dmul+0x314>)
 8002a18:	4694      	mov	ip, r2
 8002a1a:	4463      	add	r3, ip
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	dc00      	bgt.n	8002a22 <__aeabi_dmul+0x12a>
 8002a20:	e0c0      	b.n	8002ba4 <__aeabi_dmul+0x2ac>
 8002a22:	0742      	lsls	r2, r0, #29
 8002a24:	d009      	beq.n	8002a3a <__aeabi_dmul+0x142>
 8002a26:	220f      	movs	r2, #15
 8002a28:	4002      	ands	r2, r0
 8002a2a:	2a04      	cmp	r2, #4
 8002a2c:	d005      	beq.n	8002a3a <__aeabi_dmul+0x142>
 8002a2e:	1d02      	adds	r2, r0, #4
 8002a30:	4282      	cmp	r2, r0
 8002a32:	4180      	sbcs	r0, r0
 8002a34:	4240      	negs	r0, r0
 8002a36:	1824      	adds	r4, r4, r0
 8002a38:	0010      	movs	r0, r2
 8002a3a:	01e2      	lsls	r2, r4, #7
 8002a3c:	d506      	bpl.n	8002a4c <__aeabi_dmul+0x154>
 8002a3e:	4b74      	ldr	r3, [pc, #464]	; (8002c10 <__aeabi_dmul+0x318>)
 8002a40:	9a01      	ldr	r2, [sp, #4]
 8002a42:	401c      	ands	r4, r3
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	4694      	mov	ip, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4463      	add	r3, ip
 8002a4c:	4a71      	ldr	r2, [pc, #452]	; (8002c14 <__aeabi_dmul+0x31c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	dc6b      	bgt.n	8002b2a <__aeabi_dmul+0x232>
 8002a52:	0762      	lsls	r2, r4, #29
 8002a54:	08c0      	lsrs	r0, r0, #3
 8002a56:	0264      	lsls	r4, r4, #9
 8002a58:	055b      	lsls	r3, r3, #21
 8002a5a:	4302      	orrs	r2, r0
 8002a5c:	0b24      	lsrs	r4, r4, #12
 8002a5e:	0d5b      	lsrs	r3, r3, #21
 8002a60:	e7a0      	b.n	80029a4 <__aeabi_dmul+0xac>
 8002a62:	2190      	movs	r1, #144	; 0x90
 8002a64:	0089      	lsls	r1, r1, #2
 8002a66:	420f      	tst	r7, r1
 8002a68:	d163      	bne.n	8002b32 <__aeabi_dmul+0x23a>
 8002a6a:	2288      	movs	r2, #136	; 0x88
 8002a6c:	423a      	tst	r2, r7
 8002a6e:	d100      	bne.n	8002a72 <__aeabi_dmul+0x17a>
 8002a70:	e0d6      	b.n	8002c20 <__aeabi_dmul+0x328>
 8002a72:	9b00      	ldr	r3, [sp, #0]
 8002a74:	46a2      	mov	sl, r4
 8002a76:	469b      	mov	fp, r3
 8002a78:	4681      	mov	r9, r0
 8002a7a:	9502      	str	r5, [sp, #8]
 8002a7c:	e7bf      	b.n	80029fe <__aeabi_dmul+0x106>
 8002a7e:	0023      	movs	r3, r4
 8002a80:	4333      	orrs	r3, r6
 8002a82:	d100      	bne.n	8002a86 <__aeabi_dmul+0x18e>
 8002a84:	e07f      	b.n	8002b86 <__aeabi_dmul+0x28e>
 8002a86:	2c00      	cmp	r4, #0
 8002a88:	d100      	bne.n	8002a8c <__aeabi_dmul+0x194>
 8002a8a:	e1ab      	b.n	8002de4 <__aeabi_dmul+0x4ec>
 8002a8c:	0020      	movs	r0, r4
 8002a8e:	f7fd fbdd 	bl	800024c <__clzsi2>
 8002a92:	0002      	movs	r2, r0
 8002a94:	0003      	movs	r3, r0
 8002a96:	3a0b      	subs	r2, #11
 8002a98:	201d      	movs	r0, #29
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	1a82      	subs	r2, r0, r2
 8002a9e:	0030      	movs	r0, r6
 8002aa0:	3908      	subs	r1, #8
 8002aa2:	40d0      	lsrs	r0, r2
 8002aa4:	408c      	lsls	r4, r1
 8002aa6:	4304      	orrs	r4, r0
 8002aa8:	0030      	movs	r0, r6
 8002aaa:	4088      	lsls	r0, r1
 8002aac:	4a5a      	ldr	r2, [pc, #360]	; (8002c18 <__aeabi_dmul+0x320>)
 8002aae:	1aeb      	subs	r3, r5, r3
 8002ab0:	4694      	mov	ip, r2
 8002ab2:	4463      	add	r3, ip
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	9201      	str	r2, [sp, #4]
 8002ab8:	4642      	mov	r2, r8
 8002aba:	2500      	movs	r5, #0
 8002abc:	2a0a      	cmp	r2, #10
 8002abe:	dc00      	bgt.n	8002ac2 <__aeabi_dmul+0x1ca>
 8002ac0:	e75d      	b.n	800297e <__aeabi_dmul+0x86>
 8002ac2:	e79c      	b.n	80029fe <__aeabi_dmul+0x106>
 8002ac4:	4653      	mov	r3, sl
 8002ac6:	4303      	orrs	r3, r0
 8002ac8:	4699      	mov	r9, r3
 8002aca:	d054      	beq.n	8002b76 <__aeabi_dmul+0x27e>
 8002acc:	4653      	mov	r3, sl
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dmul+0x1dc>
 8002ad2:	e175      	b.n	8002dc0 <__aeabi_dmul+0x4c8>
 8002ad4:	4650      	mov	r0, sl
 8002ad6:	f7fd fbb9 	bl	800024c <__clzsi2>
 8002ada:	230b      	movs	r3, #11
 8002adc:	425b      	negs	r3, r3
 8002ade:	469c      	mov	ip, r3
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	4484      	add	ip, r0
 8002ae4:	0011      	movs	r1, r2
 8002ae6:	4650      	mov	r0, sl
 8002ae8:	3908      	subs	r1, #8
 8002aea:	4088      	lsls	r0, r1
 8002aec:	231d      	movs	r3, #29
 8002aee:	4680      	mov	r8, r0
 8002af0:	4660      	mov	r0, ip
 8002af2:	1a1b      	subs	r3, r3, r0
 8002af4:	0020      	movs	r0, r4
 8002af6:	40d8      	lsrs	r0, r3
 8002af8:	0003      	movs	r3, r0
 8002afa:	4640      	mov	r0, r8
 8002afc:	4303      	orrs	r3, r0
 8002afe:	469a      	mov	sl, r3
 8002b00:	0023      	movs	r3, r4
 8002b02:	408b      	lsls	r3, r1
 8002b04:	4699      	mov	r9, r3
 8002b06:	2300      	movs	r3, #0
 8002b08:	4d43      	ldr	r5, [pc, #268]	; (8002c18 <__aeabi_dmul+0x320>)
 8002b0a:	4698      	mov	r8, r3
 8002b0c:	1aad      	subs	r5, r5, r2
 8002b0e:	9302      	str	r3, [sp, #8]
 8002b10:	e718      	b.n	8002944 <__aeabi_dmul+0x4c>
 8002b12:	4652      	mov	r2, sl
 8002b14:	4302      	orrs	r2, r0
 8002b16:	4691      	mov	r9, r2
 8002b18:	d126      	bne.n	8002b68 <__aeabi_dmul+0x270>
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	001d      	movs	r5, r3
 8002b1e:	2302      	movs	r3, #2
 8002b20:	4692      	mov	sl, r2
 8002b22:	3208      	adds	r2, #8
 8002b24:	4690      	mov	r8, r2
 8002b26:	9302      	str	r3, [sp, #8]
 8002b28:	e70c      	b.n	8002944 <__aeabi_dmul+0x4c>
 8002b2a:	2400      	movs	r4, #0
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <__aeabi_dmul+0x30c>)
 8002b30:	e738      	b.n	80029a4 <__aeabi_dmul+0xac>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2480      	movs	r4, #128	; 0x80
 8002b36:	469b      	mov	fp, r3
 8002b38:	0324      	lsls	r4, r4, #12
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <__aeabi_dmul+0x30c>)
 8002b3c:	e732      	b.n	80029a4 <__aeabi_dmul+0xac>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	4642      	mov	r2, r8
 8002b42:	431a      	orrs	r2, r3
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	18eb      	adds	r3, r5, r3
 8002b4a:	4690      	mov	r8, r2
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	2a0a      	cmp	r2, #10
 8002b50:	dd00      	ble.n	8002b54 <__aeabi_dmul+0x25c>
 8002b52:	e754      	b.n	80029fe <__aeabi_dmul+0x106>
 8002b54:	465a      	mov	r2, fp
 8002b56:	2000      	movs	r0, #0
 8002b58:	9900      	ldr	r1, [sp, #0]
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <__aeabi_dmul+0x30c>)
 8002b5c:	404a      	eors	r2, r1
 8002b5e:	18eb      	adds	r3, r5, r3
 8002b60:	4693      	mov	fp, r2
 8002b62:	0004      	movs	r4, r0
 8002b64:	2502      	movs	r5, #2
 8002b66:	e70e      	b.n	8002986 <__aeabi_dmul+0x8e>
 8002b68:	220c      	movs	r2, #12
 8002b6a:	001d      	movs	r5, r3
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	4681      	mov	r9, r0
 8002b70:	4690      	mov	r8, r2
 8002b72:	9302      	str	r3, [sp, #8]
 8002b74:	e6e6      	b.n	8002944 <__aeabi_dmul+0x4c>
 8002b76:	2300      	movs	r3, #0
 8002b78:	469a      	mov	sl, r3
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4698      	mov	r8, r3
 8002b7e:	3b03      	subs	r3, #3
 8002b80:	2500      	movs	r5, #0
 8002b82:	9302      	str	r3, [sp, #8]
 8002b84:	e6de      	b.n	8002944 <__aeabi_dmul+0x4c>
 8002b86:	4642      	mov	r2, r8
 8002b88:	3301      	adds	r3, #1
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	002b      	movs	r3, r5
 8002b8e:	4690      	mov	r8, r2
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	9201      	str	r2, [sp, #4]
 8002b94:	4642      	mov	r2, r8
 8002b96:	2400      	movs	r4, #0
 8002b98:	2000      	movs	r0, #0
 8002b9a:	2501      	movs	r5, #1
 8002b9c:	2a0a      	cmp	r2, #10
 8002b9e:	dc00      	bgt.n	8002ba2 <__aeabi_dmul+0x2aa>
 8002ba0:	e6ed      	b.n	800297e <__aeabi_dmul+0x86>
 8002ba2:	e72c      	b.n	80029fe <__aeabi_dmul+0x106>
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	1ad2      	subs	r2, r2, r3
 8002ba8:	2a38      	cmp	r2, #56	; 0x38
 8002baa:	dd00      	ble.n	8002bae <__aeabi_dmul+0x2b6>
 8002bac:	e6f7      	b.n	800299e <__aeabi_dmul+0xa6>
 8002bae:	2a1f      	cmp	r2, #31
 8002bb0:	dc00      	bgt.n	8002bb4 <__aeabi_dmul+0x2bc>
 8002bb2:	e128      	b.n	8002e06 <__aeabi_dmul+0x50e>
 8002bb4:	211f      	movs	r1, #31
 8002bb6:	4249      	negs	r1, r1
 8002bb8:	1acb      	subs	r3, r1, r3
 8002bba:	0021      	movs	r1, r4
 8002bbc:	40d9      	lsrs	r1, r3
 8002bbe:	000b      	movs	r3, r1
 8002bc0:	2a20      	cmp	r2, #32
 8002bc2:	d005      	beq.n	8002bd0 <__aeabi_dmul+0x2d8>
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <__aeabi_dmul+0x324>)
 8002bc6:	9e01      	ldr	r6, [sp, #4]
 8002bc8:	4694      	mov	ip, r2
 8002bca:	4466      	add	r6, ip
 8002bcc:	40b4      	lsls	r4, r6
 8002bce:	4320      	orrs	r0, r4
 8002bd0:	1e42      	subs	r2, r0, #1
 8002bd2:	4190      	sbcs	r0, r2
 8002bd4:	4318      	orrs	r0, r3
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	0019      	movs	r1, r3
 8002bda:	2400      	movs	r4, #0
 8002bdc:	4001      	ands	r1, r0
 8002bde:	4203      	tst	r3, r0
 8002be0:	d00c      	beq.n	8002bfc <__aeabi_dmul+0x304>
 8002be2:	230f      	movs	r3, #15
 8002be4:	4003      	ands	r3, r0
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d100      	bne.n	8002bec <__aeabi_dmul+0x2f4>
 8002bea:	e13e      	b.n	8002e6a <__aeabi_dmul+0x572>
 8002bec:	1d03      	adds	r3, r0, #4
 8002bee:	4283      	cmp	r3, r0
 8002bf0:	41a4      	sbcs	r4, r4
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	4264      	negs	r4, r4
 8002bf6:	0761      	lsls	r1, r4, #29
 8002bf8:	0264      	lsls	r4, r4, #9
 8002bfa:	0b24      	lsrs	r4, r4, #12
 8002bfc:	08c2      	lsrs	r2, r0, #3
 8002bfe:	2300      	movs	r3, #0
 8002c00:	430a      	orrs	r2, r1
 8002c02:	e6cf      	b.n	80029a4 <__aeabi_dmul+0xac>
 8002c04:	000007ff 	.word	0x000007ff
 8002c08:	fffffc01 	.word	0xfffffc01
 8002c0c:	000003ff 	.word	0x000003ff
 8002c10:	feffffff 	.word	0xfeffffff
 8002c14:	000007fe 	.word	0x000007fe
 8002c18:	fffffc0d 	.word	0xfffffc0d
 8002c1c:	0000043e 	.word	0x0000043e
 8002c20:	4649      	mov	r1, r9
 8002c22:	464a      	mov	r2, r9
 8002c24:	0409      	lsls	r1, r1, #16
 8002c26:	0c09      	lsrs	r1, r1, #16
 8002c28:	000e      	movs	r6, r1
 8002c2a:	0c15      	lsrs	r5, r2, #16
 8002c2c:	0c02      	lsrs	r2, r0, #16
 8002c2e:	0400      	lsls	r0, r0, #16
 8002c30:	0c00      	lsrs	r0, r0, #16
 8002c32:	4346      	muls	r6, r0
 8002c34:	46b4      	mov	ip, r6
 8002c36:	0006      	movs	r6, r0
 8002c38:	436e      	muls	r6, r5
 8002c3a:	46b0      	mov	r8, r6
 8002c3c:	0016      	movs	r6, r2
 8002c3e:	000f      	movs	r7, r1
 8002c40:	436e      	muls	r6, r5
 8002c42:	9200      	str	r2, [sp, #0]
 8002c44:	9602      	str	r6, [sp, #8]
 8002c46:	0032      	movs	r2, r6
 8002c48:	9e00      	ldr	r6, [sp, #0]
 8002c4a:	4377      	muls	r7, r6
 8002c4c:	4666      	mov	r6, ip
 8002c4e:	0c36      	lsrs	r6, r6, #16
 8002c50:	46b1      	mov	r9, r6
 8002c52:	4447      	add	r7, r8
 8002c54:	444f      	add	r7, r9
 8002c56:	45b8      	cmp	r8, r7
 8002c58:	d905      	bls.n	8002c66 <__aeabi_dmul+0x36e>
 8002c5a:	0016      	movs	r6, r2
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	0252      	lsls	r2, r2, #9
 8002c60:	4690      	mov	r8, r2
 8002c62:	4446      	add	r6, r8
 8002c64:	9602      	str	r6, [sp, #8]
 8002c66:	0c3e      	lsrs	r6, r7, #16
 8002c68:	9603      	str	r6, [sp, #12]
 8002c6a:	4666      	mov	r6, ip
 8002c6c:	0436      	lsls	r6, r6, #16
 8002c6e:	043f      	lsls	r7, r7, #16
 8002c70:	0c36      	lsrs	r6, r6, #16
 8002c72:	46b4      	mov	ip, r6
 8002c74:	003e      	movs	r6, r7
 8002c76:	4466      	add	r6, ip
 8002c78:	9604      	str	r6, [sp, #16]
 8002c7a:	0c26      	lsrs	r6, r4, #16
 8002c7c:	0424      	lsls	r4, r4, #16
 8002c7e:	0c24      	lsrs	r4, r4, #16
 8002c80:	46b4      	mov	ip, r6
 8002c82:	0026      	movs	r6, r4
 8002c84:	436e      	muls	r6, r5
 8002c86:	46b0      	mov	r8, r6
 8002c88:	4666      	mov	r6, ip
 8002c8a:	000f      	movs	r7, r1
 8002c8c:	4371      	muls	r1, r6
 8002c8e:	4441      	add	r1, r8
 8002c90:	4689      	mov	r9, r1
 8002c92:	4367      	muls	r7, r4
 8002c94:	0c39      	lsrs	r1, r7, #16
 8002c96:	4449      	add	r1, r9
 8002c98:	4375      	muls	r5, r6
 8002c9a:	4588      	cmp	r8, r1
 8002c9c:	d903      	bls.n	8002ca6 <__aeabi_dmul+0x3ae>
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	0252      	lsls	r2, r2, #9
 8002ca2:	4690      	mov	r8, r2
 8002ca4:	4445      	add	r5, r8
 8002ca6:	0c0e      	lsrs	r6, r1, #16
 8002ca8:	46b0      	mov	r8, r6
 8002caa:	4445      	add	r5, r8
 8002cac:	9505      	str	r5, [sp, #20]
 8002cae:	9d03      	ldr	r5, [sp, #12]
 8002cb0:	043f      	lsls	r7, r7, #16
 8002cb2:	46a8      	mov	r8, r5
 8002cb4:	0c3f      	lsrs	r7, r7, #16
 8002cb6:	0409      	lsls	r1, r1, #16
 8002cb8:	19c9      	adds	r1, r1, r7
 8002cba:	4488      	add	r8, r1
 8002cbc:	4645      	mov	r5, r8
 8002cbe:	9503      	str	r5, [sp, #12]
 8002cc0:	4655      	mov	r5, sl
 8002cc2:	0c2f      	lsrs	r7, r5, #16
 8002cc4:	042d      	lsls	r5, r5, #16
 8002cc6:	0c2d      	lsrs	r5, r5, #16
 8002cc8:	002e      	movs	r6, r5
 8002cca:	4346      	muls	r6, r0
 8002ccc:	4378      	muls	r0, r7
 8002cce:	4681      	mov	r9, r0
 8002cd0:	0038      	movs	r0, r7
 8002cd2:	46b0      	mov	r8, r6
 8002cd4:	0c36      	lsrs	r6, r6, #16
 8002cd6:	46b2      	mov	sl, r6
 8002cd8:	9a00      	ldr	r2, [sp, #0]
 8002cda:	4350      	muls	r0, r2
 8002cdc:	436a      	muls	r2, r5
 8002cde:	444a      	add	r2, r9
 8002ce0:	4452      	add	r2, sl
 8002ce2:	4591      	cmp	r9, r2
 8002ce4:	d903      	bls.n	8002cee <__aeabi_dmul+0x3f6>
 8002ce6:	2680      	movs	r6, #128	; 0x80
 8002ce8:	0276      	lsls	r6, r6, #9
 8002cea:	46b1      	mov	r9, r6
 8002cec:	4448      	add	r0, r9
 8002cee:	0c16      	lsrs	r6, r2, #16
 8002cf0:	46b1      	mov	r9, r6
 8002cf2:	4646      	mov	r6, r8
 8002cf4:	0436      	lsls	r6, r6, #16
 8002cf6:	0c36      	lsrs	r6, r6, #16
 8002cf8:	46b0      	mov	r8, r6
 8002cfa:	4666      	mov	r6, ip
 8002cfc:	437e      	muls	r6, r7
 8002cfe:	0412      	lsls	r2, r2, #16
 8002d00:	4448      	add	r0, r9
 8002d02:	4490      	add	r8, r2
 8002d04:	46b1      	mov	r9, r6
 8002d06:	002a      	movs	r2, r5
 8002d08:	4666      	mov	r6, ip
 8002d0a:	4362      	muls	r2, r4
 8002d0c:	4375      	muls	r5, r6
 8002d0e:	437c      	muls	r4, r7
 8002d10:	0c17      	lsrs	r7, r2, #16
 8002d12:	192d      	adds	r5, r5, r4
 8002d14:	197f      	adds	r7, r7, r5
 8002d16:	42bc      	cmp	r4, r7
 8002d18:	d903      	bls.n	8002d22 <__aeabi_dmul+0x42a>
 8002d1a:	2480      	movs	r4, #128	; 0x80
 8002d1c:	0264      	lsls	r4, r4, #9
 8002d1e:	46a4      	mov	ip, r4
 8002d20:	44e1      	add	r9, ip
 8002d22:	9c02      	ldr	r4, [sp, #8]
 8002d24:	9d03      	ldr	r5, [sp, #12]
 8002d26:	46a4      	mov	ip, r4
 8002d28:	9e05      	ldr	r6, [sp, #20]
 8002d2a:	4465      	add	r5, ip
 8002d2c:	428d      	cmp	r5, r1
 8002d2e:	4189      	sbcs	r1, r1
 8002d30:	46b4      	mov	ip, r6
 8002d32:	0412      	lsls	r2, r2, #16
 8002d34:	043c      	lsls	r4, r7, #16
 8002d36:	0c12      	lsrs	r2, r2, #16
 8002d38:	18a2      	adds	r2, r4, r2
 8002d3a:	4462      	add	r2, ip
 8002d3c:	4249      	negs	r1, r1
 8002d3e:	1854      	adds	r4, r2, r1
 8002d40:	4445      	add	r5, r8
 8002d42:	46a4      	mov	ip, r4
 8002d44:	4545      	cmp	r5, r8
 8002d46:	41a4      	sbcs	r4, r4
 8002d48:	4682      	mov	sl, r0
 8002d4a:	4264      	negs	r4, r4
 8002d4c:	46a0      	mov	r8, r4
 8002d4e:	42b2      	cmp	r2, r6
 8002d50:	4192      	sbcs	r2, r2
 8002d52:	458c      	cmp	ip, r1
 8002d54:	4189      	sbcs	r1, r1
 8002d56:	44e2      	add	sl, ip
 8002d58:	44d0      	add	r8, sl
 8002d5a:	4249      	negs	r1, r1
 8002d5c:	4252      	negs	r2, r2
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	45a0      	cmp	r8, r4
 8002d62:	41a4      	sbcs	r4, r4
 8002d64:	4582      	cmp	sl, r0
 8002d66:	4189      	sbcs	r1, r1
 8002d68:	4264      	negs	r4, r4
 8002d6a:	4249      	negs	r1, r1
 8002d6c:	430c      	orrs	r4, r1
 8002d6e:	4641      	mov	r1, r8
 8002d70:	0c3f      	lsrs	r7, r7, #16
 8002d72:	19d2      	adds	r2, r2, r7
 8002d74:	1912      	adds	r2, r2, r4
 8002d76:	0dcc      	lsrs	r4, r1, #23
 8002d78:	9904      	ldr	r1, [sp, #16]
 8002d7a:	0268      	lsls	r0, r5, #9
 8002d7c:	4308      	orrs	r0, r1
 8002d7e:	1e41      	subs	r1, r0, #1
 8002d80:	4188      	sbcs	r0, r1
 8002d82:	4641      	mov	r1, r8
 8002d84:	444a      	add	r2, r9
 8002d86:	0ded      	lsrs	r5, r5, #23
 8002d88:	0252      	lsls	r2, r2, #9
 8002d8a:	4328      	orrs	r0, r5
 8002d8c:	0249      	lsls	r1, r1, #9
 8002d8e:	4314      	orrs	r4, r2
 8002d90:	4308      	orrs	r0, r1
 8002d92:	01d2      	lsls	r2, r2, #7
 8002d94:	d535      	bpl.n	8002e02 <__aeabi_dmul+0x50a>
 8002d96:	2201      	movs	r2, #1
 8002d98:	0843      	lsrs	r3, r0, #1
 8002d9a:	4002      	ands	r2, r0
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	07e0      	lsls	r0, r4, #31
 8002da0:	4318      	orrs	r0, r3
 8002da2:	0864      	lsrs	r4, r4, #1
 8002da4:	e636      	b.n	8002a14 <__aeabi_dmul+0x11c>
 8002da6:	9b00      	ldr	r3, [sp, #0]
 8002da8:	46a2      	mov	sl, r4
 8002daa:	469b      	mov	fp, r3
 8002dac:	4681      	mov	r9, r0
 8002dae:	2480      	movs	r4, #128	; 0x80
 8002db0:	4653      	mov	r3, sl
 8002db2:	0324      	lsls	r4, r4, #12
 8002db4:	431c      	orrs	r4, r3
 8002db6:	0324      	lsls	r4, r4, #12
 8002db8:	464a      	mov	r2, r9
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <__aeabi_dmul+0x580>)
 8002dbc:	0b24      	lsrs	r4, r4, #12
 8002dbe:	e5f1      	b.n	80029a4 <__aeabi_dmul+0xac>
 8002dc0:	f7fd fa44 	bl	800024c <__clzsi2>
 8002dc4:	2315      	movs	r3, #21
 8002dc6:	469c      	mov	ip, r3
 8002dc8:	4484      	add	ip, r0
 8002dca:	0002      	movs	r2, r0
 8002dcc:	4663      	mov	r3, ip
 8002dce:	3220      	adds	r2, #32
 8002dd0:	2b1c      	cmp	r3, #28
 8002dd2:	dc00      	bgt.n	8002dd6 <__aeabi_dmul+0x4de>
 8002dd4:	e686      	b.n	8002ae4 <__aeabi_dmul+0x1ec>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4699      	mov	r9, r3
 8002dda:	0023      	movs	r3, r4
 8002ddc:	3808      	subs	r0, #8
 8002dde:	4083      	lsls	r3, r0
 8002de0:	469a      	mov	sl, r3
 8002de2:	e690      	b.n	8002b06 <__aeabi_dmul+0x20e>
 8002de4:	f7fd fa32 	bl	800024c <__clzsi2>
 8002de8:	0002      	movs	r2, r0
 8002dea:	0003      	movs	r3, r0
 8002dec:	3215      	adds	r2, #21
 8002dee:	3320      	adds	r3, #32
 8002df0:	2a1c      	cmp	r2, #28
 8002df2:	dc00      	bgt.n	8002df6 <__aeabi_dmul+0x4fe>
 8002df4:	e650      	b.n	8002a98 <__aeabi_dmul+0x1a0>
 8002df6:	0002      	movs	r2, r0
 8002df8:	0034      	movs	r4, r6
 8002dfa:	3a08      	subs	r2, #8
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	4094      	lsls	r4, r2
 8002e00:	e654      	b.n	8002aac <__aeabi_dmul+0x1b4>
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	e606      	b.n	8002a14 <__aeabi_dmul+0x11c>
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <__aeabi_dmul+0x584>)
 8002e08:	0021      	movs	r1, r4
 8002e0a:	469c      	mov	ip, r3
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	9e01      	ldr	r6, [sp, #4]
 8002e10:	40d3      	lsrs	r3, r2
 8002e12:	4466      	add	r6, ip
 8002e14:	40b1      	lsls	r1, r6
 8002e16:	4319      	orrs	r1, r3
 8002e18:	0003      	movs	r3, r0
 8002e1a:	40b3      	lsls	r3, r6
 8002e1c:	1e58      	subs	r0, r3, #1
 8002e1e:	4183      	sbcs	r3, r0
 8002e20:	4319      	orrs	r1, r3
 8002e22:	0008      	movs	r0, r1
 8002e24:	40d4      	lsrs	r4, r2
 8002e26:	074b      	lsls	r3, r1, #29
 8002e28:	d009      	beq.n	8002e3e <__aeabi_dmul+0x546>
 8002e2a:	230f      	movs	r3, #15
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d005      	beq.n	8002e3e <__aeabi_dmul+0x546>
 8002e32:	1d0b      	adds	r3, r1, #4
 8002e34:	428b      	cmp	r3, r1
 8002e36:	4180      	sbcs	r0, r0
 8002e38:	4240      	negs	r0, r0
 8002e3a:	1824      	adds	r4, r4, r0
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	0223      	lsls	r3, r4, #8
 8002e40:	d400      	bmi.n	8002e44 <__aeabi_dmul+0x54c>
 8002e42:	e6d8      	b.n	8002bf6 <__aeabi_dmul+0x2fe>
 8002e44:	2301      	movs	r3, #1
 8002e46:	2400      	movs	r4, #0
 8002e48:	2200      	movs	r2, #0
 8002e4a:	e5ab      	b.n	80029a4 <__aeabi_dmul+0xac>
 8002e4c:	290f      	cmp	r1, #15
 8002e4e:	d1aa      	bne.n	8002da6 <__aeabi_dmul+0x4ae>
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	4652      	mov	r2, sl
 8002e54:	031b      	lsls	r3, r3, #12
 8002e56:	421a      	tst	r2, r3
 8002e58:	d0a9      	beq.n	8002dae <__aeabi_dmul+0x4b6>
 8002e5a:	421c      	tst	r4, r3
 8002e5c:	d1a7      	bne.n	8002dae <__aeabi_dmul+0x4b6>
 8002e5e:	431c      	orrs	r4, r3
 8002e60:	9b00      	ldr	r3, [sp, #0]
 8002e62:	0002      	movs	r2, r0
 8002e64:	469b      	mov	fp, r3
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <__aeabi_dmul+0x580>)
 8002e68:	e59c      	b.n	80029a4 <__aeabi_dmul+0xac>
 8002e6a:	2400      	movs	r4, #0
 8002e6c:	e6c3      	b.n	8002bf6 <__aeabi_dmul+0x2fe>
 8002e6e:	2400      	movs	r4, #0
 8002e70:	4b01      	ldr	r3, [pc, #4]	; (8002e78 <__aeabi_dmul+0x580>)
 8002e72:	0022      	movs	r2, r4
 8002e74:	e596      	b.n	80029a4 <__aeabi_dmul+0xac>
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	000007ff 	.word	0x000007ff
 8002e7c:	0000041e 	.word	0x0000041e

08002e80 <__aeabi_i2d>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d016      	beq.n	8002eb4 <__aeabi_i2d+0x34>
 8002e86:	17c3      	asrs	r3, r0, #31
 8002e88:	18c5      	adds	r5, r0, r3
 8002e8a:	405d      	eors	r5, r3
 8002e8c:	0fc4      	lsrs	r4, r0, #31
 8002e8e:	0028      	movs	r0, r5
 8002e90:	f7fd f9dc 	bl	800024c <__clzsi2>
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <__aeabi_i2d+0x5c>)
 8002e96:	1a1b      	subs	r3, r3, r0
 8002e98:	280a      	cmp	r0, #10
 8002e9a:	dc16      	bgt.n	8002eca <__aeabi_i2d+0x4a>
 8002e9c:	0002      	movs	r2, r0
 8002e9e:	002e      	movs	r6, r5
 8002ea0:	3215      	adds	r2, #21
 8002ea2:	4096      	lsls	r6, r2
 8002ea4:	220b      	movs	r2, #11
 8002ea6:	1a12      	subs	r2, r2, r0
 8002ea8:	40d5      	lsrs	r5, r2
 8002eaa:	055b      	lsls	r3, r3, #21
 8002eac:	032d      	lsls	r5, r5, #12
 8002eae:	0b2d      	lsrs	r5, r5, #12
 8002eb0:	0d5b      	lsrs	r3, r3, #21
 8002eb2:	e003      	b.n	8002ebc <__aeabi_i2d+0x3c>
 8002eb4:	2400      	movs	r4, #0
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2500      	movs	r5, #0
 8002eba:	2600      	movs	r6, #0
 8002ebc:	051b      	lsls	r3, r3, #20
 8002ebe:	432b      	orrs	r3, r5
 8002ec0:	07e4      	lsls	r4, r4, #31
 8002ec2:	4323      	orrs	r3, r4
 8002ec4:	0030      	movs	r0, r6
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
 8002eca:	380b      	subs	r0, #11
 8002ecc:	4085      	lsls	r5, r0
 8002ece:	055b      	lsls	r3, r3, #21
 8002ed0:	032d      	lsls	r5, r5, #12
 8002ed2:	2600      	movs	r6, #0
 8002ed4:	0b2d      	lsrs	r5, r5, #12
 8002ed6:	0d5b      	lsrs	r3, r3, #21
 8002ed8:	e7f0      	b.n	8002ebc <__aeabi_i2d+0x3c>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	0000041e 	.word	0x0000041e

08002ee0 <__aeabi_d2f>:
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	004b      	lsls	r3, r1, #1
 8002ee4:	030f      	lsls	r7, r1, #12
 8002ee6:	0d5b      	lsrs	r3, r3, #21
 8002ee8:	4c3f      	ldr	r4, [pc, #252]	; (8002fe8 <__aeabi_d2f+0x108>)
 8002eea:	0f45      	lsrs	r5, r0, #29
 8002eec:	b083      	sub	sp, #12
 8002eee:	0a7f      	lsrs	r7, r7, #9
 8002ef0:	1c5e      	adds	r6, r3, #1
 8002ef2:	432f      	orrs	r7, r5
 8002ef4:	9000      	str	r0, [sp, #0]
 8002ef6:	9101      	str	r1, [sp, #4]
 8002ef8:	0fca      	lsrs	r2, r1, #31
 8002efa:	00c5      	lsls	r5, r0, #3
 8002efc:	4226      	tst	r6, r4
 8002efe:	d00b      	beq.n	8002f18 <__aeabi_d2f+0x38>
 8002f00:	493a      	ldr	r1, [pc, #232]	; (8002fec <__aeabi_d2f+0x10c>)
 8002f02:	185c      	adds	r4, r3, r1
 8002f04:	2cfe      	cmp	r4, #254	; 0xfe
 8002f06:	dd13      	ble.n	8002f30 <__aeabi_d2f+0x50>
 8002f08:	20ff      	movs	r0, #255	; 0xff
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	05c0      	lsls	r0, r0, #23
 8002f0e:	4318      	orrs	r0, r3
 8002f10:	07d2      	lsls	r2, r2, #31
 8002f12:	4310      	orrs	r0, r2
 8002f14:	b003      	add	sp, #12
 8002f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <__aeabi_d2f+0x42>
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e7f4      	b.n	8002f0c <__aeabi_d2f+0x2c>
 8002f22:	433d      	orrs	r5, r7
 8002f24:	d0f0      	beq.n	8002f08 <__aeabi_d2f+0x28>
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	03db      	lsls	r3, r3, #15
 8002f2a:	20ff      	movs	r0, #255	; 0xff
 8002f2c:	433b      	orrs	r3, r7
 8002f2e:	e7ed      	b.n	8002f0c <__aeabi_d2f+0x2c>
 8002f30:	2c00      	cmp	r4, #0
 8002f32:	dd14      	ble.n	8002f5e <__aeabi_d2f+0x7e>
 8002f34:	9b00      	ldr	r3, [sp, #0]
 8002f36:	00ff      	lsls	r7, r7, #3
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	4183      	sbcs	r3, r0
 8002f3e:	0f69      	lsrs	r1, r5, #29
 8002f40:	433b      	orrs	r3, r7
 8002f42:	430b      	orrs	r3, r1
 8002f44:	0759      	lsls	r1, r3, #29
 8002f46:	d041      	beq.n	8002fcc <__aeabi_d2f+0xec>
 8002f48:	210f      	movs	r1, #15
 8002f4a:	4019      	ands	r1, r3
 8002f4c:	2904      	cmp	r1, #4
 8002f4e:	d047      	beq.n	8002fe0 <__aeabi_d2f+0x100>
 8002f50:	3304      	adds	r3, #4
 8002f52:	0159      	lsls	r1, r3, #5
 8002f54:	d542      	bpl.n	8002fdc <__aeabi_d2f+0xfc>
 8002f56:	3401      	adds	r4, #1
 8002f58:	2300      	movs	r3, #0
 8002f5a:	b2e0      	uxtb	r0, r4
 8002f5c:	e7d6      	b.n	8002f0c <__aeabi_d2f+0x2c>
 8002f5e:	0021      	movs	r1, r4
 8002f60:	3117      	adds	r1, #23
 8002f62:	dbdb      	blt.n	8002f1c <__aeabi_d2f+0x3c>
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	201e      	movs	r0, #30
 8002f68:	0409      	lsls	r1, r1, #16
 8002f6a:	4339      	orrs	r1, r7
 8002f6c:	1b00      	subs	r0, r0, r4
 8002f6e:	281f      	cmp	r0, #31
 8002f70:	dd1b      	ble.n	8002faa <__aeabi_d2f+0xca>
 8002f72:	2602      	movs	r6, #2
 8002f74:	4276      	negs	r6, r6
 8002f76:	1b34      	subs	r4, r6, r4
 8002f78:	000e      	movs	r6, r1
 8002f7a:	40e6      	lsrs	r6, r4
 8002f7c:	0034      	movs	r4, r6
 8002f7e:	2820      	cmp	r0, #32
 8002f80:	d004      	beq.n	8002f8c <__aeabi_d2f+0xac>
 8002f82:	481b      	ldr	r0, [pc, #108]	; (8002ff0 <__aeabi_d2f+0x110>)
 8002f84:	4684      	mov	ip, r0
 8002f86:	4463      	add	r3, ip
 8002f88:	4099      	lsls	r1, r3
 8002f8a:	430d      	orrs	r5, r1
 8002f8c:	1e6b      	subs	r3, r5, #1
 8002f8e:	419d      	sbcs	r5, r3
 8002f90:	4325      	orrs	r5, r4
 8002f92:	076b      	lsls	r3, r5, #29
 8002f94:	d01d      	beq.n	8002fd2 <__aeabi_d2f+0xf2>
 8002f96:	210f      	movs	r1, #15
 8002f98:	2400      	movs	r4, #0
 8002f9a:	4029      	ands	r1, r5
 8002f9c:	08eb      	lsrs	r3, r5, #3
 8002f9e:	2904      	cmp	r1, #4
 8002fa0:	d11b      	bne.n	8002fda <__aeabi_d2f+0xfa>
 8002fa2:	025b      	lsls	r3, r3, #9
 8002fa4:	0a5b      	lsrs	r3, r3, #9
 8002fa6:	b2e0      	uxtb	r0, r4
 8002fa8:	e7b0      	b.n	8002f0c <__aeabi_d2f+0x2c>
 8002faa:	4c12      	ldr	r4, [pc, #72]	; (8002ff4 <__aeabi_d2f+0x114>)
 8002fac:	191c      	adds	r4, r3, r4
 8002fae:	002b      	movs	r3, r5
 8002fb0:	40a5      	lsls	r5, r4
 8002fb2:	40c3      	lsrs	r3, r0
 8002fb4:	40a1      	lsls	r1, r4
 8002fb6:	1e68      	subs	r0, r5, #1
 8002fb8:	4185      	sbcs	r5, r0
 8002fba:	4329      	orrs	r1, r5
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	2400      	movs	r4, #0
 8002fc0:	0759      	lsls	r1, r3, #29
 8002fc2:	d1c1      	bne.n	8002f48 <__aeabi_d2f+0x68>
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	0a5b      	lsrs	r3, r3, #9
 8002fca:	e79f      	b.n	8002f0c <__aeabi_d2f+0x2c>
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	b2e0      	uxtb	r0, r4
 8002fd0:	e79c      	b.n	8002f0c <__aeabi_d2f+0x2c>
 8002fd2:	01ad      	lsls	r5, r5, #6
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	0a6b      	lsrs	r3, r5, #9
 8002fd8:	e798      	b.n	8002f0c <__aeabi_d2f+0x2c>
 8002fda:	1d2b      	adds	r3, r5, #4
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	e7e0      	b.n	8002fa2 <__aeabi_d2f+0xc2>
 8002fe0:	019b      	lsls	r3, r3, #6
 8002fe2:	0a5b      	lsrs	r3, r3, #9
 8002fe4:	b2e0      	uxtb	r0, r4
 8002fe6:	e791      	b.n	8002f0c <__aeabi_d2f+0x2c>
 8002fe8:	000007fe 	.word	0x000007fe
 8002fec:	fffffc80 	.word	0xfffffc80
 8002ff0:	fffffca2 	.word	0xfffffca2
 8002ff4:	fffffc82 	.word	0xfffffc82

08002ff8 <std>:
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	b510      	push	{r4, lr}
 8002ffc:	0004      	movs	r4, r0
 8002ffe:	6003      	str	r3, [r0, #0]
 8003000:	6043      	str	r3, [r0, #4]
 8003002:	6083      	str	r3, [r0, #8]
 8003004:	8181      	strh	r1, [r0, #12]
 8003006:	6643      	str	r3, [r0, #100]	; 0x64
 8003008:	81c2      	strh	r2, [r0, #14]
 800300a:	6103      	str	r3, [r0, #16]
 800300c:	6143      	str	r3, [r0, #20]
 800300e:	6183      	str	r3, [r0, #24]
 8003010:	0019      	movs	r1, r3
 8003012:	2208      	movs	r2, #8
 8003014:	305c      	adds	r0, #92	; 0x5c
 8003016:	f000 f90f 	bl	8003238 <memset>
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <std+0x50>)
 800301c:	6224      	str	r4, [r4, #32]
 800301e:	6263      	str	r3, [r4, #36]	; 0x24
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <std+0x54>)
 8003022:	62a3      	str	r3, [r4, #40]	; 0x28
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <std+0x58>)
 8003026:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <std+0x5c>)
 800302a:	6323      	str	r3, [r4, #48]	; 0x30
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <std+0x60>)
 800302e:	429c      	cmp	r4, r3
 8003030:	d005      	beq.n	800303e <std+0x46>
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <std+0x64>)
 8003034:	429c      	cmp	r4, r3
 8003036:	d002      	beq.n	800303e <std+0x46>
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <std+0x68>)
 800303a:	429c      	cmp	r4, r3
 800303c:	d103      	bne.n	8003046 <std+0x4e>
 800303e:	0020      	movs	r0, r4
 8003040:	3058      	adds	r0, #88	; 0x58
 8003042:	f000 f973 	bl	800332c <__retarget_lock_init_recursive>
 8003046:	bd10      	pop	{r4, pc}
 8003048:	080031a1 	.word	0x080031a1
 800304c:	080031c9 	.word	0x080031c9
 8003050:	08003201 	.word	0x08003201
 8003054:	0800322d 	.word	0x0800322d
 8003058:	200000ac 	.word	0x200000ac
 800305c:	20000114 	.word	0x20000114
 8003060:	2000017c 	.word	0x2000017c

08003064 <stdio_exit_handler>:
 8003064:	b510      	push	{r4, lr}
 8003066:	4a03      	ldr	r2, [pc, #12]	; (8003074 <stdio_exit_handler+0x10>)
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <stdio_exit_handler+0x14>)
 800306a:	4804      	ldr	r0, [pc, #16]	; (800307c <stdio_exit_handler+0x18>)
 800306c:	f000 f86c 	bl	8003148 <_fwalk_sglue>
 8003070:	bd10      	pop	{r4, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	20000000 	.word	0x20000000
 8003078:	08003bd9 	.word	0x08003bd9
 800307c:	20000010 	.word	0x20000010

08003080 <cleanup_stdio>:
 8003080:	6841      	ldr	r1, [r0, #4]
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <cleanup_stdio+0x30>)
 8003084:	b510      	push	{r4, lr}
 8003086:	0004      	movs	r4, r0
 8003088:	4299      	cmp	r1, r3
 800308a:	d001      	beq.n	8003090 <cleanup_stdio+0x10>
 800308c:	f000 fda4 	bl	8003bd8 <_fflush_r>
 8003090:	68a1      	ldr	r1, [r4, #8]
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <cleanup_stdio+0x34>)
 8003094:	4299      	cmp	r1, r3
 8003096:	d002      	beq.n	800309e <cleanup_stdio+0x1e>
 8003098:	0020      	movs	r0, r4
 800309a:	f000 fd9d 	bl	8003bd8 <_fflush_r>
 800309e:	68e1      	ldr	r1, [r4, #12]
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <cleanup_stdio+0x38>)
 80030a2:	4299      	cmp	r1, r3
 80030a4:	d002      	beq.n	80030ac <cleanup_stdio+0x2c>
 80030a6:	0020      	movs	r0, r4
 80030a8:	f000 fd96 	bl	8003bd8 <_fflush_r>
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	200000ac 	.word	0x200000ac
 80030b4:	20000114 	.word	0x20000114
 80030b8:	2000017c 	.word	0x2000017c

080030bc <global_stdio_init.part.0>:
 80030bc:	b510      	push	{r4, lr}
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <global_stdio_init.part.0+0x28>)
 80030c0:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <global_stdio_init.part.0+0x2c>)
 80030c2:	2104      	movs	r1, #4
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	4809      	ldr	r0, [pc, #36]	; (80030ec <global_stdio_init.part.0+0x30>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	f7ff ff95 	bl	8002ff8 <std>
 80030ce:	2201      	movs	r2, #1
 80030d0:	2109      	movs	r1, #9
 80030d2:	4807      	ldr	r0, [pc, #28]	; (80030f0 <global_stdio_init.part.0+0x34>)
 80030d4:	f7ff ff90 	bl	8002ff8 <std>
 80030d8:	2202      	movs	r2, #2
 80030da:	2112      	movs	r1, #18
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <global_stdio_init.part.0+0x38>)
 80030de:	f7ff ff8b 	bl	8002ff8 <std>
 80030e2:	bd10      	pop	{r4, pc}
 80030e4:	200001e4 	.word	0x200001e4
 80030e8:	08003065 	.word	0x08003065
 80030ec:	200000ac 	.word	0x200000ac
 80030f0:	20000114 	.word	0x20000114
 80030f4:	2000017c 	.word	0x2000017c

080030f8 <__sfp_lock_acquire>:
 80030f8:	b510      	push	{r4, lr}
 80030fa:	4802      	ldr	r0, [pc, #8]	; (8003104 <__sfp_lock_acquire+0xc>)
 80030fc:	f000 f917 	bl	800332e <__retarget_lock_acquire_recursive>
 8003100:	bd10      	pop	{r4, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	200001ed 	.word	0x200001ed

08003108 <__sfp_lock_release>:
 8003108:	b510      	push	{r4, lr}
 800310a:	4802      	ldr	r0, [pc, #8]	; (8003114 <__sfp_lock_release+0xc>)
 800310c:	f000 f910 	bl	8003330 <__retarget_lock_release_recursive>
 8003110:	bd10      	pop	{r4, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	200001ed 	.word	0x200001ed

08003118 <__sinit>:
 8003118:	b510      	push	{r4, lr}
 800311a:	0004      	movs	r4, r0
 800311c:	f7ff ffec 	bl	80030f8 <__sfp_lock_acquire>
 8003120:	6a23      	ldr	r3, [r4, #32]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <__sinit+0x14>
 8003126:	f7ff ffef 	bl	8003108 <__sfp_lock_release>
 800312a:	bd10      	pop	{r4, pc}
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <__sinit+0x28>)
 800312e:	6223      	str	r3, [r4, #32]
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <__sinit+0x2c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f6      	bne.n	8003126 <__sinit+0xe>
 8003138:	f7ff ffc0 	bl	80030bc <global_stdio_init.part.0>
 800313c:	e7f3      	b.n	8003126 <__sinit+0xe>
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	08003081 	.word	0x08003081
 8003144:	200001e4 	.word	0x200001e4

08003148 <_fwalk_sglue>:
 8003148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800314a:	0014      	movs	r4, r2
 800314c:	2600      	movs	r6, #0
 800314e:	9000      	str	r0, [sp, #0]
 8003150:	9101      	str	r1, [sp, #4]
 8003152:	68a5      	ldr	r5, [r4, #8]
 8003154:	6867      	ldr	r7, [r4, #4]
 8003156:	3f01      	subs	r7, #1
 8003158:	d504      	bpl.n	8003164 <_fwalk_sglue+0x1c>
 800315a:	6824      	ldr	r4, [r4, #0]
 800315c:	2c00      	cmp	r4, #0
 800315e:	d1f8      	bne.n	8003152 <_fwalk_sglue+0xa>
 8003160:	0030      	movs	r0, r6
 8003162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003164:	89ab      	ldrh	r3, [r5, #12]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d908      	bls.n	800317c <_fwalk_sglue+0x34>
 800316a:	220e      	movs	r2, #14
 800316c:	5eab      	ldrsh	r3, [r5, r2]
 800316e:	3301      	adds	r3, #1
 8003170:	d004      	beq.n	800317c <_fwalk_sglue+0x34>
 8003172:	0029      	movs	r1, r5
 8003174:	9800      	ldr	r0, [sp, #0]
 8003176:	9b01      	ldr	r3, [sp, #4]
 8003178:	4798      	blx	r3
 800317a:	4306      	orrs	r6, r0
 800317c:	3568      	adds	r5, #104	; 0x68
 800317e:	e7ea      	b.n	8003156 <_fwalk_sglue+0xe>

08003180 <iprintf>:
 8003180:	b40f      	push	{r0, r1, r2, r3}
 8003182:	b507      	push	{r0, r1, r2, lr}
 8003184:	4905      	ldr	r1, [pc, #20]	; (800319c <iprintf+0x1c>)
 8003186:	ab04      	add	r3, sp, #16
 8003188:	6808      	ldr	r0, [r1, #0]
 800318a:	cb04      	ldmia	r3!, {r2}
 800318c:	6881      	ldr	r1, [r0, #8]
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	f000 f9ee 	bl	8003570 <_vfiprintf_r>
 8003194:	b003      	add	sp, #12
 8003196:	bc08      	pop	{r3}
 8003198:	b004      	add	sp, #16
 800319a:	4718      	bx	r3
 800319c:	2000000c 	.word	0x2000000c

080031a0 <__sread>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	000c      	movs	r4, r1
 80031a4:	250e      	movs	r5, #14
 80031a6:	5f49      	ldrsh	r1, [r1, r5]
 80031a8:	f000 f874 	bl	8003294 <_read_r>
 80031ac:	2800      	cmp	r0, #0
 80031ae:	db03      	blt.n	80031b8 <__sread+0x18>
 80031b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031b2:	181b      	adds	r3, r3, r0
 80031b4:	6563      	str	r3, [r4, #84]	; 0x54
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	4a02      	ldr	r2, [pc, #8]	; (80031c4 <__sread+0x24>)
 80031bc:	4013      	ands	r3, r2
 80031be:	81a3      	strh	r3, [r4, #12]
 80031c0:	e7f9      	b.n	80031b6 <__sread+0x16>
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	ffffefff 	.word	0xffffefff

080031c8 <__swrite>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	001f      	movs	r7, r3
 80031cc:	898b      	ldrh	r3, [r1, #12]
 80031ce:	0005      	movs	r5, r0
 80031d0:	000c      	movs	r4, r1
 80031d2:	0016      	movs	r6, r2
 80031d4:	05db      	lsls	r3, r3, #23
 80031d6:	d505      	bpl.n	80031e4 <__swrite+0x1c>
 80031d8:	230e      	movs	r3, #14
 80031da:	5ec9      	ldrsh	r1, [r1, r3]
 80031dc:	2200      	movs	r2, #0
 80031de:	2302      	movs	r3, #2
 80031e0:	f000 f844 	bl	800326c <_lseek_r>
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	4a05      	ldr	r2, [pc, #20]	; (80031fc <__swrite+0x34>)
 80031e8:	0028      	movs	r0, r5
 80031ea:	4013      	ands	r3, r2
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	0032      	movs	r2, r6
 80031f0:	230e      	movs	r3, #14
 80031f2:	5ee1      	ldrsh	r1, [r4, r3]
 80031f4:	003b      	movs	r3, r7
 80031f6:	f000 f861 	bl	80032bc <_write_r>
 80031fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031fc:	ffffefff 	.word	0xffffefff

08003200 <__sseek>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	000c      	movs	r4, r1
 8003204:	250e      	movs	r5, #14
 8003206:	5f49      	ldrsh	r1, [r1, r5]
 8003208:	f000 f830 	bl	800326c <_lseek_r>
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	1c42      	adds	r2, r0, #1
 8003210:	d103      	bne.n	800321a <__sseek+0x1a>
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <__sseek+0x28>)
 8003214:	4013      	ands	r3, r2
 8003216:	81a3      	strh	r3, [r4, #12]
 8003218:	bd70      	pop	{r4, r5, r6, pc}
 800321a:	2280      	movs	r2, #128	; 0x80
 800321c:	0152      	lsls	r2, r2, #5
 800321e:	4313      	orrs	r3, r2
 8003220:	81a3      	strh	r3, [r4, #12]
 8003222:	6560      	str	r0, [r4, #84]	; 0x54
 8003224:	e7f8      	b.n	8003218 <__sseek+0x18>
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	ffffefff 	.word	0xffffefff

0800322c <__sclose>:
 800322c:	b510      	push	{r4, lr}
 800322e:	230e      	movs	r3, #14
 8003230:	5ec9      	ldrsh	r1, [r1, r3]
 8003232:	f000 f809 	bl	8003248 <_close_r>
 8003236:	bd10      	pop	{r4, pc}

08003238 <memset>:
 8003238:	0003      	movs	r3, r0
 800323a:	1882      	adds	r2, r0, r2
 800323c:	4293      	cmp	r3, r2
 800323e:	d100      	bne.n	8003242 <memset+0xa>
 8003240:	4770      	bx	lr
 8003242:	7019      	strb	r1, [r3, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	e7f9      	b.n	800323c <memset+0x4>

08003248 <_close_r>:
 8003248:	2300      	movs	r3, #0
 800324a:	b570      	push	{r4, r5, r6, lr}
 800324c:	4d06      	ldr	r5, [pc, #24]	; (8003268 <_close_r+0x20>)
 800324e:	0004      	movs	r4, r0
 8003250:	0008      	movs	r0, r1
 8003252:	602b      	str	r3, [r5, #0]
 8003254:	f000 ff0c 	bl	8004070 <_close>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d103      	bne.n	8003264 <_close_r+0x1c>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d000      	beq.n	8003264 <_close_r+0x1c>
 8003262:	6023      	str	r3, [r4, #0]
 8003264:	bd70      	pop	{r4, r5, r6, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	200001e8 	.word	0x200001e8

0800326c <_lseek_r>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	0004      	movs	r4, r0
 8003270:	0008      	movs	r0, r1
 8003272:	0011      	movs	r1, r2
 8003274:	001a      	movs	r2, r3
 8003276:	2300      	movs	r3, #0
 8003278:	4d05      	ldr	r5, [pc, #20]	; (8003290 <_lseek_r+0x24>)
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	f000 feb9 	bl	8003ff2 <_lseek>
 8003280:	1c43      	adds	r3, r0, #1
 8003282:	d103      	bne.n	800328c <_lseek_r+0x20>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d000      	beq.n	800328c <_lseek_r+0x20>
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	200001e8 	.word	0x200001e8

08003294 <_read_r>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	0004      	movs	r4, r0
 8003298:	0008      	movs	r0, r1
 800329a:	0011      	movs	r1, r2
 800329c:	001a      	movs	r2, r3
 800329e:	2300      	movs	r3, #0
 80032a0:	4d05      	ldr	r5, [pc, #20]	; (80032b8 <_read_r+0x24>)
 80032a2:	602b      	str	r3, [r5, #0]
 80032a4:	f000 fe50 	bl	8003f48 <_read>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d103      	bne.n	80032b4 <_read_r+0x20>
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d000      	beq.n	80032b4 <_read_r+0x20>
 80032b2:	6023      	str	r3, [r4, #0]
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	200001e8 	.word	0x200001e8

080032bc <_write_r>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	0004      	movs	r4, r0
 80032c0:	0008      	movs	r0, r1
 80032c2:	0011      	movs	r1, r2
 80032c4:	001a      	movs	r2, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	4d05      	ldr	r5, [pc, #20]	; (80032e0 <_write_r+0x24>)
 80032ca:	602b      	str	r3, [r5, #0]
 80032cc:	f000 fea5 	bl	800401a <_write>
 80032d0:	1c43      	adds	r3, r0, #1
 80032d2:	d103      	bne.n	80032dc <_write_r+0x20>
 80032d4:	682b      	ldr	r3, [r5, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d000      	beq.n	80032dc <_write_r+0x20>
 80032da:	6023      	str	r3, [r4, #0]
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	200001e8 	.word	0x200001e8

080032e4 <__libc_init_array>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	2600      	movs	r6, #0
 80032e8:	4c0c      	ldr	r4, [pc, #48]	; (800331c <__libc_init_array+0x38>)
 80032ea:	4d0d      	ldr	r5, [pc, #52]	; (8003320 <__libc_init_array+0x3c>)
 80032ec:	1b64      	subs	r4, r4, r5
 80032ee:	10a4      	asrs	r4, r4, #2
 80032f0:	42a6      	cmp	r6, r4
 80032f2:	d109      	bne.n	8003308 <__libc_init_array+0x24>
 80032f4:	2600      	movs	r6, #0
 80032f6:	f001 f8a7 	bl	8004448 <_init>
 80032fa:	4c0a      	ldr	r4, [pc, #40]	; (8003324 <__libc_init_array+0x40>)
 80032fc:	4d0a      	ldr	r5, [pc, #40]	; (8003328 <__libc_init_array+0x44>)
 80032fe:	1b64      	subs	r4, r4, r5
 8003300:	10a4      	asrs	r4, r4, #2
 8003302:	42a6      	cmp	r6, r4
 8003304:	d105      	bne.n	8003312 <__libc_init_array+0x2e>
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	00b3      	lsls	r3, r6, #2
 800330a:	58eb      	ldr	r3, [r5, r3]
 800330c:	4798      	blx	r3
 800330e:	3601      	adds	r6, #1
 8003310:	e7ee      	b.n	80032f0 <__libc_init_array+0xc>
 8003312:	00b3      	lsls	r3, r6, #2
 8003314:	58eb      	ldr	r3, [r5, r3]
 8003316:	4798      	blx	r3
 8003318:	3601      	adds	r6, #1
 800331a:	e7f2      	b.n	8003302 <__libc_init_array+0x1e>
 800331c:	0800451c 	.word	0x0800451c
 8003320:	0800451c 	.word	0x0800451c
 8003324:	08004520 	.word	0x08004520
 8003328:	0800451c 	.word	0x0800451c

0800332c <__retarget_lock_init_recursive>:
 800332c:	4770      	bx	lr

0800332e <__retarget_lock_acquire_recursive>:
 800332e:	4770      	bx	lr

08003330 <__retarget_lock_release_recursive>:
 8003330:	4770      	bx	lr
	...

08003334 <_free_r>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	0005      	movs	r5, r0
 8003338:	1e0c      	subs	r4, r1, #0
 800333a:	d010      	beq.n	800335e <_free_r+0x2a>
 800333c:	3c04      	subs	r4, #4
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	da00      	bge.n	8003346 <_free_r+0x12>
 8003344:	18e4      	adds	r4, r4, r3
 8003346:	0028      	movs	r0, r5
 8003348:	f000 f8da 	bl	8003500 <__malloc_lock>
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <_free_r+0x90>)
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <_free_r+0x2c>
 8003354:	6063      	str	r3, [r4, #4]
 8003356:	6014      	str	r4, [r2, #0]
 8003358:	0028      	movs	r0, r5
 800335a:	f000 f8d9 	bl	8003510 <__malloc_unlock>
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	42a3      	cmp	r3, r4
 8003362:	d908      	bls.n	8003376 <_free_r+0x42>
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	1821      	adds	r1, r4, r0
 8003368:	428b      	cmp	r3, r1
 800336a:	d1f3      	bne.n	8003354 <_free_r+0x20>
 800336c:	6819      	ldr	r1, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	1809      	adds	r1, r1, r0
 8003372:	6021      	str	r1, [r4, #0]
 8003374:	e7ee      	b.n	8003354 <_free_r+0x20>
 8003376:	001a      	movs	r2, r3
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <_free_r+0x4e>
 800337e:	42a3      	cmp	r3, r4
 8003380:	d9f9      	bls.n	8003376 <_free_r+0x42>
 8003382:	6811      	ldr	r1, [r2, #0]
 8003384:	1850      	adds	r0, r2, r1
 8003386:	42a0      	cmp	r0, r4
 8003388:	d10b      	bne.n	80033a2 <_free_r+0x6e>
 800338a:	6820      	ldr	r0, [r4, #0]
 800338c:	1809      	adds	r1, r1, r0
 800338e:	1850      	adds	r0, r2, r1
 8003390:	6011      	str	r1, [r2, #0]
 8003392:	4283      	cmp	r3, r0
 8003394:	d1e0      	bne.n	8003358 <_free_r+0x24>
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	1841      	adds	r1, r0, r1
 800339c:	6011      	str	r1, [r2, #0]
 800339e:	6053      	str	r3, [r2, #4]
 80033a0:	e7da      	b.n	8003358 <_free_r+0x24>
 80033a2:	42a0      	cmp	r0, r4
 80033a4:	d902      	bls.n	80033ac <_free_r+0x78>
 80033a6:	230c      	movs	r3, #12
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	e7d5      	b.n	8003358 <_free_r+0x24>
 80033ac:	6820      	ldr	r0, [r4, #0]
 80033ae:	1821      	adds	r1, r4, r0
 80033b0:	428b      	cmp	r3, r1
 80033b2:	d103      	bne.n	80033bc <_free_r+0x88>
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	1809      	adds	r1, r1, r0
 80033ba:	6021      	str	r1, [r4, #0]
 80033bc:	6063      	str	r3, [r4, #4]
 80033be:	6054      	str	r4, [r2, #4]
 80033c0:	e7ca      	b.n	8003358 <_free_r+0x24>
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	200001f4 	.word	0x200001f4

080033c8 <sbrk_aligned>:
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	4e0f      	ldr	r6, [pc, #60]	; (8003408 <sbrk_aligned+0x40>)
 80033cc:	000d      	movs	r5, r1
 80033ce:	6831      	ldr	r1, [r6, #0]
 80033d0:	0004      	movs	r4, r0
 80033d2:	2900      	cmp	r1, #0
 80033d4:	d102      	bne.n	80033dc <sbrk_aligned+0x14>
 80033d6:	f000 fccb 	bl	8003d70 <_sbrk_r>
 80033da:	6030      	str	r0, [r6, #0]
 80033dc:	0029      	movs	r1, r5
 80033de:	0020      	movs	r0, r4
 80033e0:	f000 fcc6 	bl	8003d70 <_sbrk_r>
 80033e4:	1c43      	adds	r3, r0, #1
 80033e6:	d103      	bne.n	80033f0 <sbrk_aligned+0x28>
 80033e8:	2501      	movs	r5, #1
 80033ea:	426d      	negs	r5, r5
 80033ec:	0028      	movs	r0, r5
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	2303      	movs	r3, #3
 80033f2:	1cc5      	adds	r5, r0, #3
 80033f4:	439d      	bics	r5, r3
 80033f6:	42a8      	cmp	r0, r5
 80033f8:	d0f8      	beq.n	80033ec <sbrk_aligned+0x24>
 80033fa:	1a29      	subs	r1, r5, r0
 80033fc:	0020      	movs	r0, r4
 80033fe:	f000 fcb7 	bl	8003d70 <_sbrk_r>
 8003402:	3001      	adds	r0, #1
 8003404:	d1f2      	bne.n	80033ec <sbrk_aligned+0x24>
 8003406:	e7ef      	b.n	80033e8 <sbrk_aligned+0x20>
 8003408:	200001f0 	.word	0x200001f0

0800340c <_malloc_r>:
 800340c:	2303      	movs	r3, #3
 800340e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003410:	1ccd      	adds	r5, r1, #3
 8003412:	439d      	bics	r5, r3
 8003414:	3508      	adds	r5, #8
 8003416:	0006      	movs	r6, r0
 8003418:	2d0c      	cmp	r5, #12
 800341a:	d234      	bcs.n	8003486 <_malloc_r+0x7a>
 800341c:	250c      	movs	r5, #12
 800341e:	42a9      	cmp	r1, r5
 8003420:	d833      	bhi.n	800348a <_malloc_r+0x7e>
 8003422:	0030      	movs	r0, r6
 8003424:	f000 f86c 	bl	8003500 <__malloc_lock>
 8003428:	4f34      	ldr	r7, [pc, #208]	; (80034fc <_malloc_r+0xf0>)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	001c      	movs	r4, r3
 800342e:	2c00      	cmp	r4, #0
 8003430:	d12f      	bne.n	8003492 <_malloc_r+0x86>
 8003432:	0029      	movs	r1, r5
 8003434:	0030      	movs	r0, r6
 8003436:	f7ff ffc7 	bl	80033c8 <sbrk_aligned>
 800343a:	0004      	movs	r4, r0
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d158      	bne.n	80034f2 <_malloc_r+0xe6>
 8003440:	683c      	ldr	r4, [r7, #0]
 8003442:	0021      	movs	r1, r4
 8003444:	2900      	cmp	r1, #0
 8003446:	d149      	bne.n	80034dc <_malloc_r+0xd0>
 8003448:	2c00      	cmp	r4, #0
 800344a:	d04c      	beq.n	80034e6 <_malloc_r+0xda>
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	0030      	movs	r0, r6
 8003450:	18e3      	adds	r3, r4, r3
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	f000 fc8c 	bl	8003d70 <_sbrk_r>
 8003458:	9b01      	ldr	r3, [sp, #4]
 800345a:	4283      	cmp	r3, r0
 800345c:	d143      	bne.n	80034e6 <_malloc_r+0xda>
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	0030      	movs	r0, r6
 8003462:	1aed      	subs	r5, r5, r3
 8003464:	0029      	movs	r1, r5
 8003466:	f7ff ffaf 	bl	80033c8 <sbrk_aligned>
 800346a:	3001      	adds	r0, #1
 800346c:	d03b      	beq.n	80034e6 <_malloc_r+0xda>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	195b      	adds	r3, r3, r5
 8003472:	6023      	str	r3, [r4, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d03d      	beq.n	80034f6 <_malloc_r+0xea>
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	42a2      	cmp	r2, r4
 800347e:	d130      	bne.n	80034e2 <_malloc_r+0xd6>
 8003480:	2200      	movs	r2, #0
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	e012      	b.n	80034ac <_malloc_r+0xa0>
 8003486:	2d00      	cmp	r5, #0
 8003488:	dac9      	bge.n	800341e <_malloc_r+0x12>
 800348a:	230c      	movs	r3, #12
 800348c:	6033      	str	r3, [r6, #0]
 800348e:	2000      	movs	r0, #0
 8003490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003492:	6821      	ldr	r1, [r4, #0]
 8003494:	1b49      	subs	r1, r1, r5
 8003496:	d41e      	bmi.n	80034d6 <_malloc_r+0xca>
 8003498:	290b      	cmp	r1, #11
 800349a:	d917      	bls.n	80034cc <_malloc_r+0xc0>
 800349c:	1962      	adds	r2, r4, r5
 800349e:	6025      	str	r5, [r4, #0]
 80034a0:	42a3      	cmp	r3, r4
 80034a2:	d111      	bne.n	80034c8 <_malloc_r+0xbc>
 80034a4:	603a      	str	r2, [r7, #0]
 80034a6:	6863      	ldr	r3, [r4, #4]
 80034a8:	6011      	str	r1, [r2, #0]
 80034aa:	6053      	str	r3, [r2, #4]
 80034ac:	0030      	movs	r0, r6
 80034ae:	f000 f82f 	bl	8003510 <__malloc_unlock>
 80034b2:	0020      	movs	r0, r4
 80034b4:	2207      	movs	r2, #7
 80034b6:	300b      	adds	r0, #11
 80034b8:	1d23      	adds	r3, r4, #4
 80034ba:	4390      	bics	r0, r2
 80034bc:	1ac2      	subs	r2, r0, r3
 80034be:	4298      	cmp	r0, r3
 80034c0:	d0e6      	beq.n	8003490 <_malloc_r+0x84>
 80034c2:	1a1b      	subs	r3, r3, r0
 80034c4:	50a3      	str	r3, [r4, r2]
 80034c6:	e7e3      	b.n	8003490 <_malloc_r+0x84>
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	e7ec      	b.n	80034a6 <_malloc_r+0x9a>
 80034cc:	6862      	ldr	r2, [r4, #4]
 80034ce:	42a3      	cmp	r3, r4
 80034d0:	d1d7      	bne.n	8003482 <_malloc_r+0x76>
 80034d2:	603a      	str	r2, [r7, #0]
 80034d4:	e7ea      	b.n	80034ac <_malloc_r+0xa0>
 80034d6:	0023      	movs	r3, r4
 80034d8:	6864      	ldr	r4, [r4, #4]
 80034da:	e7a8      	b.n	800342e <_malloc_r+0x22>
 80034dc:	000c      	movs	r4, r1
 80034de:	6849      	ldr	r1, [r1, #4]
 80034e0:	e7b0      	b.n	8003444 <_malloc_r+0x38>
 80034e2:	0013      	movs	r3, r2
 80034e4:	e7c7      	b.n	8003476 <_malloc_r+0x6a>
 80034e6:	230c      	movs	r3, #12
 80034e8:	0030      	movs	r0, r6
 80034ea:	6033      	str	r3, [r6, #0]
 80034ec:	f000 f810 	bl	8003510 <__malloc_unlock>
 80034f0:	e7cd      	b.n	800348e <_malloc_r+0x82>
 80034f2:	6005      	str	r5, [r0, #0]
 80034f4:	e7da      	b.n	80034ac <_malloc_r+0xa0>
 80034f6:	605b      	str	r3, [r3, #4]
 80034f8:	deff      	udf	#255	; 0xff
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	200001f4 	.word	0x200001f4

08003500 <__malloc_lock>:
 8003500:	b510      	push	{r4, lr}
 8003502:	4802      	ldr	r0, [pc, #8]	; (800350c <__malloc_lock+0xc>)
 8003504:	f7ff ff13 	bl	800332e <__retarget_lock_acquire_recursive>
 8003508:	bd10      	pop	{r4, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	200001ec 	.word	0x200001ec

08003510 <__malloc_unlock>:
 8003510:	b510      	push	{r4, lr}
 8003512:	4802      	ldr	r0, [pc, #8]	; (800351c <__malloc_unlock+0xc>)
 8003514:	f7ff ff0c 	bl	8003330 <__retarget_lock_release_recursive>
 8003518:	bd10      	pop	{r4, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	200001ec 	.word	0x200001ec

08003520 <__sfputc_r>:
 8003520:	6893      	ldr	r3, [r2, #8]
 8003522:	b510      	push	{r4, lr}
 8003524:	3b01      	subs	r3, #1
 8003526:	6093      	str	r3, [r2, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	da04      	bge.n	8003536 <__sfputc_r+0x16>
 800352c:	6994      	ldr	r4, [r2, #24]
 800352e:	42a3      	cmp	r3, r4
 8003530:	db07      	blt.n	8003542 <__sfputc_r+0x22>
 8003532:	290a      	cmp	r1, #10
 8003534:	d005      	beq.n	8003542 <__sfputc_r+0x22>
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	1c58      	adds	r0, r3, #1
 800353a:	6010      	str	r0, [r2, #0]
 800353c:	7019      	strb	r1, [r3, #0]
 800353e:	0008      	movs	r0, r1
 8003540:	bd10      	pop	{r4, pc}
 8003542:	f000 fb74 	bl	8003c2e <__swbuf_r>
 8003546:	0001      	movs	r1, r0
 8003548:	e7f9      	b.n	800353e <__sfputc_r+0x1e>

0800354a <__sfputs_r>:
 800354a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354c:	0006      	movs	r6, r0
 800354e:	000f      	movs	r7, r1
 8003550:	0014      	movs	r4, r2
 8003552:	18d5      	adds	r5, r2, r3
 8003554:	42ac      	cmp	r4, r5
 8003556:	d101      	bne.n	800355c <__sfputs_r+0x12>
 8003558:	2000      	movs	r0, #0
 800355a:	e007      	b.n	800356c <__sfputs_r+0x22>
 800355c:	7821      	ldrb	r1, [r4, #0]
 800355e:	003a      	movs	r2, r7
 8003560:	0030      	movs	r0, r6
 8003562:	f7ff ffdd 	bl	8003520 <__sfputc_r>
 8003566:	3401      	adds	r4, #1
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d1f3      	bne.n	8003554 <__sfputs_r+0xa>
 800356c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003570 <_vfiprintf_r>:
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	b0a1      	sub	sp, #132	; 0x84
 8003574:	000f      	movs	r7, r1
 8003576:	0015      	movs	r5, r2
 8003578:	001e      	movs	r6, r3
 800357a:	9003      	str	r0, [sp, #12]
 800357c:	2800      	cmp	r0, #0
 800357e:	d004      	beq.n	800358a <_vfiprintf_r+0x1a>
 8003580:	6a03      	ldr	r3, [r0, #32]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <_vfiprintf_r+0x1a>
 8003586:	f7ff fdc7 	bl	8003118 <__sinit>
 800358a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800358c:	07db      	lsls	r3, r3, #31
 800358e:	d405      	bmi.n	800359c <_vfiprintf_r+0x2c>
 8003590:	89bb      	ldrh	r3, [r7, #12]
 8003592:	059b      	lsls	r3, r3, #22
 8003594:	d402      	bmi.n	800359c <_vfiprintf_r+0x2c>
 8003596:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003598:	f7ff fec9 	bl	800332e <__retarget_lock_acquire_recursive>
 800359c:	89bb      	ldrh	r3, [r7, #12]
 800359e:	071b      	lsls	r3, r3, #28
 80035a0:	d502      	bpl.n	80035a8 <_vfiprintf_r+0x38>
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <_vfiprintf_r+0x60>
 80035a8:	0039      	movs	r1, r7
 80035aa:	9803      	ldr	r0, [sp, #12]
 80035ac:	f000 fb82 	bl	8003cb4 <__swsetup_r>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d00d      	beq.n	80035d0 <_vfiprintf_r+0x60>
 80035b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b6:	07db      	lsls	r3, r3, #31
 80035b8:	d503      	bpl.n	80035c2 <_vfiprintf_r+0x52>
 80035ba:	2001      	movs	r0, #1
 80035bc:	4240      	negs	r0, r0
 80035be:	b021      	add	sp, #132	; 0x84
 80035c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c2:	89bb      	ldrh	r3, [r7, #12]
 80035c4:	059b      	lsls	r3, r3, #22
 80035c6:	d4f8      	bmi.n	80035ba <_vfiprintf_r+0x4a>
 80035c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80035ca:	f7ff feb1 	bl	8003330 <__retarget_lock_release_recursive>
 80035ce:	e7f4      	b.n	80035ba <_vfiprintf_r+0x4a>
 80035d0:	2300      	movs	r3, #0
 80035d2:	ac08      	add	r4, sp, #32
 80035d4:	6163      	str	r3, [r4, #20]
 80035d6:	3320      	adds	r3, #32
 80035d8:	7663      	strb	r3, [r4, #25]
 80035da:	3310      	adds	r3, #16
 80035dc:	76a3      	strb	r3, [r4, #26]
 80035de:	9607      	str	r6, [sp, #28]
 80035e0:	002e      	movs	r6, r5
 80035e2:	7833      	ldrb	r3, [r6, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <_vfiprintf_r+0x7c>
 80035e8:	2b25      	cmp	r3, #37	; 0x25
 80035ea:	d148      	bne.n	800367e <_vfiprintf_r+0x10e>
 80035ec:	1b73      	subs	r3, r6, r5
 80035ee:	9305      	str	r3, [sp, #20]
 80035f0:	42ae      	cmp	r6, r5
 80035f2:	d00b      	beq.n	800360c <_vfiprintf_r+0x9c>
 80035f4:	002a      	movs	r2, r5
 80035f6:	0039      	movs	r1, r7
 80035f8:	9803      	ldr	r0, [sp, #12]
 80035fa:	f7ff ffa6 	bl	800354a <__sfputs_r>
 80035fe:	3001      	adds	r0, #1
 8003600:	d100      	bne.n	8003604 <_vfiprintf_r+0x94>
 8003602:	e0ae      	b.n	8003762 <_vfiprintf_r+0x1f2>
 8003604:	6963      	ldr	r3, [r4, #20]
 8003606:	9a05      	ldr	r2, [sp, #20]
 8003608:	189b      	adds	r3, r3, r2
 800360a:	6163      	str	r3, [r4, #20]
 800360c:	7833      	ldrb	r3, [r6, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d100      	bne.n	8003614 <_vfiprintf_r+0xa4>
 8003612:	e0a6      	b.n	8003762 <_vfiprintf_r+0x1f2>
 8003614:	2201      	movs	r2, #1
 8003616:	2300      	movs	r3, #0
 8003618:	4252      	negs	r2, r2
 800361a:	6062      	str	r2, [r4, #4]
 800361c:	a904      	add	r1, sp, #16
 800361e:	3254      	adds	r2, #84	; 0x54
 8003620:	1852      	adds	r2, r2, r1
 8003622:	1c75      	adds	r5, r6, #1
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	60e3      	str	r3, [r4, #12]
 8003628:	60a3      	str	r3, [r4, #8]
 800362a:	7013      	strb	r3, [r2, #0]
 800362c:	65a3      	str	r3, [r4, #88]	; 0x58
 800362e:	4b59      	ldr	r3, [pc, #356]	; (8003794 <_vfiprintf_r+0x224>)
 8003630:	2205      	movs	r2, #5
 8003632:	0018      	movs	r0, r3
 8003634:	7829      	ldrb	r1, [r5, #0]
 8003636:	9305      	str	r3, [sp, #20]
 8003638:	f000 fbac 	bl	8003d94 <memchr>
 800363c:	1c6e      	adds	r6, r5, #1
 800363e:	2800      	cmp	r0, #0
 8003640:	d11f      	bne.n	8003682 <_vfiprintf_r+0x112>
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	06d3      	lsls	r3, r2, #27
 8003646:	d504      	bpl.n	8003652 <_vfiprintf_r+0xe2>
 8003648:	2353      	movs	r3, #83	; 0x53
 800364a:	a904      	add	r1, sp, #16
 800364c:	185b      	adds	r3, r3, r1
 800364e:	2120      	movs	r1, #32
 8003650:	7019      	strb	r1, [r3, #0]
 8003652:	0713      	lsls	r3, r2, #28
 8003654:	d504      	bpl.n	8003660 <_vfiprintf_r+0xf0>
 8003656:	2353      	movs	r3, #83	; 0x53
 8003658:	a904      	add	r1, sp, #16
 800365a:	185b      	adds	r3, r3, r1
 800365c:	212b      	movs	r1, #43	; 0x2b
 800365e:	7019      	strb	r1, [r3, #0]
 8003660:	782b      	ldrb	r3, [r5, #0]
 8003662:	2b2a      	cmp	r3, #42	; 0x2a
 8003664:	d016      	beq.n	8003694 <_vfiprintf_r+0x124>
 8003666:	002e      	movs	r6, r5
 8003668:	2100      	movs	r1, #0
 800366a:	200a      	movs	r0, #10
 800366c:	68e3      	ldr	r3, [r4, #12]
 800366e:	7832      	ldrb	r2, [r6, #0]
 8003670:	1c75      	adds	r5, r6, #1
 8003672:	3a30      	subs	r2, #48	; 0x30
 8003674:	2a09      	cmp	r2, #9
 8003676:	d950      	bls.n	800371a <_vfiprintf_r+0x1aa>
 8003678:	2900      	cmp	r1, #0
 800367a:	d111      	bne.n	80036a0 <_vfiprintf_r+0x130>
 800367c:	e017      	b.n	80036ae <_vfiprintf_r+0x13e>
 800367e:	3601      	adds	r6, #1
 8003680:	e7af      	b.n	80035e2 <_vfiprintf_r+0x72>
 8003682:	9b05      	ldr	r3, [sp, #20]
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	1ac0      	subs	r0, r0, r3
 8003688:	2301      	movs	r3, #1
 800368a:	4083      	lsls	r3, r0
 800368c:	4313      	orrs	r3, r2
 800368e:	0035      	movs	r5, r6
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	e7cc      	b.n	800362e <_vfiprintf_r+0xbe>
 8003694:	9b07      	ldr	r3, [sp, #28]
 8003696:	1d19      	adds	r1, r3, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	9107      	str	r1, [sp, #28]
 800369c:	2b00      	cmp	r3, #0
 800369e:	db01      	blt.n	80036a4 <_vfiprintf_r+0x134>
 80036a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80036a2:	e004      	b.n	80036ae <_vfiprintf_r+0x13e>
 80036a4:	425b      	negs	r3, r3
 80036a6:	60e3      	str	r3, [r4, #12]
 80036a8:	2302      	movs	r3, #2
 80036aa:	4313      	orrs	r3, r2
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	7833      	ldrb	r3, [r6, #0]
 80036b0:	2b2e      	cmp	r3, #46	; 0x2e
 80036b2:	d10c      	bne.n	80036ce <_vfiprintf_r+0x15e>
 80036b4:	7873      	ldrb	r3, [r6, #1]
 80036b6:	2b2a      	cmp	r3, #42	; 0x2a
 80036b8:	d134      	bne.n	8003724 <_vfiprintf_r+0x1b4>
 80036ba:	9b07      	ldr	r3, [sp, #28]
 80036bc:	3602      	adds	r6, #2
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	9207      	str	r2, [sp, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da01      	bge.n	80036cc <_vfiprintf_r+0x15c>
 80036c8:	2301      	movs	r3, #1
 80036ca:	425b      	negs	r3, r3
 80036cc:	9309      	str	r3, [sp, #36]	; 0x24
 80036ce:	4d32      	ldr	r5, [pc, #200]	; (8003798 <_vfiprintf_r+0x228>)
 80036d0:	2203      	movs	r2, #3
 80036d2:	0028      	movs	r0, r5
 80036d4:	7831      	ldrb	r1, [r6, #0]
 80036d6:	f000 fb5d 	bl	8003d94 <memchr>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d006      	beq.n	80036ec <_vfiprintf_r+0x17c>
 80036de:	2340      	movs	r3, #64	; 0x40
 80036e0:	1b40      	subs	r0, r0, r5
 80036e2:	4083      	lsls	r3, r0
 80036e4:	6822      	ldr	r2, [r4, #0]
 80036e6:	3601      	adds	r6, #1
 80036e8:	4313      	orrs	r3, r2
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	7831      	ldrb	r1, [r6, #0]
 80036ee:	2206      	movs	r2, #6
 80036f0:	482a      	ldr	r0, [pc, #168]	; (800379c <_vfiprintf_r+0x22c>)
 80036f2:	1c75      	adds	r5, r6, #1
 80036f4:	7621      	strb	r1, [r4, #24]
 80036f6:	f000 fb4d 	bl	8003d94 <memchr>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d040      	beq.n	8003780 <_vfiprintf_r+0x210>
 80036fe:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <_vfiprintf_r+0x230>)
 8003700:	2b00      	cmp	r3, #0
 8003702:	d122      	bne.n	800374a <_vfiprintf_r+0x1da>
 8003704:	2207      	movs	r2, #7
 8003706:	9b07      	ldr	r3, [sp, #28]
 8003708:	3307      	adds	r3, #7
 800370a:	4393      	bics	r3, r2
 800370c:	3308      	adds	r3, #8
 800370e:	9307      	str	r3, [sp, #28]
 8003710:	6963      	ldr	r3, [r4, #20]
 8003712:	9a04      	ldr	r2, [sp, #16]
 8003714:	189b      	adds	r3, r3, r2
 8003716:	6163      	str	r3, [r4, #20]
 8003718:	e762      	b.n	80035e0 <_vfiprintf_r+0x70>
 800371a:	4343      	muls	r3, r0
 800371c:	002e      	movs	r6, r5
 800371e:	2101      	movs	r1, #1
 8003720:	189b      	adds	r3, r3, r2
 8003722:	e7a4      	b.n	800366e <_vfiprintf_r+0xfe>
 8003724:	2300      	movs	r3, #0
 8003726:	200a      	movs	r0, #10
 8003728:	0019      	movs	r1, r3
 800372a:	3601      	adds	r6, #1
 800372c:	6063      	str	r3, [r4, #4]
 800372e:	7832      	ldrb	r2, [r6, #0]
 8003730:	1c75      	adds	r5, r6, #1
 8003732:	3a30      	subs	r2, #48	; 0x30
 8003734:	2a09      	cmp	r2, #9
 8003736:	d903      	bls.n	8003740 <_vfiprintf_r+0x1d0>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0c8      	beq.n	80036ce <_vfiprintf_r+0x15e>
 800373c:	9109      	str	r1, [sp, #36]	; 0x24
 800373e:	e7c6      	b.n	80036ce <_vfiprintf_r+0x15e>
 8003740:	4341      	muls	r1, r0
 8003742:	002e      	movs	r6, r5
 8003744:	2301      	movs	r3, #1
 8003746:	1889      	adds	r1, r1, r2
 8003748:	e7f1      	b.n	800372e <_vfiprintf_r+0x1be>
 800374a:	aa07      	add	r2, sp, #28
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	0021      	movs	r1, r4
 8003750:	003a      	movs	r2, r7
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <_vfiprintf_r+0x234>)
 8003754:	9803      	ldr	r0, [sp, #12]
 8003756:	e000      	b.n	800375a <_vfiprintf_r+0x1ea>
 8003758:	bf00      	nop
 800375a:	9004      	str	r0, [sp, #16]
 800375c:	9b04      	ldr	r3, [sp, #16]
 800375e:	3301      	adds	r3, #1
 8003760:	d1d6      	bne.n	8003710 <_vfiprintf_r+0x1a0>
 8003762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003764:	07db      	lsls	r3, r3, #31
 8003766:	d405      	bmi.n	8003774 <_vfiprintf_r+0x204>
 8003768:	89bb      	ldrh	r3, [r7, #12]
 800376a:	059b      	lsls	r3, r3, #22
 800376c:	d402      	bmi.n	8003774 <_vfiprintf_r+0x204>
 800376e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003770:	f7ff fdde 	bl	8003330 <__retarget_lock_release_recursive>
 8003774:	89bb      	ldrh	r3, [r7, #12]
 8003776:	065b      	lsls	r3, r3, #25
 8003778:	d500      	bpl.n	800377c <_vfiprintf_r+0x20c>
 800377a:	e71e      	b.n	80035ba <_vfiprintf_r+0x4a>
 800377c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800377e:	e71e      	b.n	80035be <_vfiprintf_r+0x4e>
 8003780:	aa07      	add	r2, sp, #28
 8003782:	9200      	str	r2, [sp, #0]
 8003784:	0021      	movs	r1, r4
 8003786:	003a      	movs	r2, r7
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <_vfiprintf_r+0x234>)
 800378a:	9803      	ldr	r0, [sp, #12]
 800378c:	f000 f87c 	bl	8003888 <_printf_i>
 8003790:	e7e3      	b.n	800375a <_vfiprintf_r+0x1ea>
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	080044cc 	.word	0x080044cc
 8003798:	080044d2 	.word	0x080044d2
 800379c:	080044d6 	.word	0x080044d6
 80037a0:	00000000 	.word	0x00000000
 80037a4:	0800354b 	.word	0x0800354b

080037a8 <_printf_common>:
 80037a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037aa:	0016      	movs	r6, r2
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	688a      	ldr	r2, [r1, #8]
 80037b0:	690b      	ldr	r3, [r1, #16]
 80037b2:	000c      	movs	r4, r1
 80037b4:	9000      	str	r0, [sp, #0]
 80037b6:	4293      	cmp	r3, r2
 80037b8:	da00      	bge.n	80037bc <_printf_common+0x14>
 80037ba:	0013      	movs	r3, r2
 80037bc:	0022      	movs	r2, r4
 80037be:	6033      	str	r3, [r6, #0]
 80037c0:	3243      	adds	r2, #67	; 0x43
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	d001      	beq.n	80037cc <_printf_common+0x24>
 80037c8:	3301      	adds	r3, #1
 80037ca:	6033      	str	r3, [r6, #0]
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	069b      	lsls	r3, r3, #26
 80037d0:	d502      	bpl.n	80037d8 <_printf_common+0x30>
 80037d2:	6833      	ldr	r3, [r6, #0]
 80037d4:	3302      	adds	r3, #2
 80037d6:	6033      	str	r3, [r6, #0]
 80037d8:	6822      	ldr	r2, [r4, #0]
 80037da:	2306      	movs	r3, #6
 80037dc:	0015      	movs	r5, r2
 80037de:	401d      	ands	r5, r3
 80037e0:	421a      	tst	r2, r3
 80037e2:	d027      	beq.n	8003834 <_printf_common+0x8c>
 80037e4:	0023      	movs	r3, r4
 80037e6:	3343      	adds	r3, #67	; 0x43
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	4193      	sbcs	r3, r2
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	0692      	lsls	r2, r2, #26
 80037f2:	d430      	bmi.n	8003856 <_printf_common+0xae>
 80037f4:	0022      	movs	r2, r4
 80037f6:	9901      	ldr	r1, [sp, #4]
 80037f8:	9800      	ldr	r0, [sp, #0]
 80037fa:	9d08      	ldr	r5, [sp, #32]
 80037fc:	3243      	adds	r2, #67	; 0x43
 80037fe:	47a8      	blx	r5
 8003800:	3001      	adds	r0, #1
 8003802:	d025      	beq.n	8003850 <_printf_common+0xa8>
 8003804:	2206      	movs	r2, #6
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	2500      	movs	r5, #0
 800380a:	4013      	ands	r3, r2
 800380c:	2b04      	cmp	r3, #4
 800380e:	d105      	bne.n	800381c <_printf_common+0x74>
 8003810:	6833      	ldr	r3, [r6, #0]
 8003812:	68e5      	ldr	r5, [r4, #12]
 8003814:	1aed      	subs	r5, r5, r3
 8003816:	43eb      	mvns	r3, r5
 8003818:	17db      	asrs	r3, r3, #31
 800381a:	401d      	ands	r5, r3
 800381c:	68a3      	ldr	r3, [r4, #8]
 800381e:	6922      	ldr	r2, [r4, #16]
 8003820:	4293      	cmp	r3, r2
 8003822:	dd01      	ble.n	8003828 <_printf_common+0x80>
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	18ed      	adds	r5, r5, r3
 8003828:	2600      	movs	r6, #0
 800382a:	42b5      	cmp	r5, r6
 800382c:	d120      	bne.n	8003870 <_printf_common+0xc8>
 800382e:	2000      	movs	r0, #0
 8003830:	e010      	b.n	8003854 <_printf_common+0xac>
 8003832:	3501      	adds	r5, #1
 8003834:	68e3      	ldr	r3, [r4, #12]
 8003836:	6832      	ldr	r2, [r6, #0]
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	42ab      	cmp	r3, r5
 800383c:	ddd2      	ble.n	80037e4 <_printf_common+0x3c>
 800383e:	0022      	movs	r2, r4
 8003840:	2301      	movs	r3, #1
 8003842:	9901      	ldr	r1, [sp, #4]
 8003844:	9800      	ldr	r0, [sp, #0]
 8003846:	9f08      	ldr	r7, [sp, #32]
 8003848:	3219      	adds	r2, #25
 800384a:	47b8      	blx	r7
 800384c:	3001      	adds	r0, #1
 800384e:	d1f0      	bne.n	8003832 <_printf_common+0x8a>
 8003850:	2001      	movs	r0, #1
 8003852:	4240      	negs	r0, r0
 8003854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003856:	2030      	movs	r0, #48	; 0x30
 8003858:	18e1      	adds	r1, r4, r3
 800385a:	3143      	adds	r1, #67	; 0x43
 800385c:	7008      	strb	r0, [r1, #0]
 800385e:	0021      	movs	r1, r4
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	3145      	adds	r1, #69	; 0x45
 8003864:	7809      	ldrb	r1, [r1, #0]
 8003866:	18a2      	adds	r2, r4, r2
 8003868:	3243      	adds	r2, #67	; 0x43
 800386a:	3302      	adds	r3, #2
 800386c:	7011      	strb	r1, [r2, #0]
 800386e:	e7c1      	b.n	80037f4 <_printf_common+0x4c>
 8003870:	0022      	movs	r2, r4
 8003872:	2301      	movs	r3, #1
 8003874:	9901      	ldr	r1, [sp, #4]
 8003876:	9800      	ldr	r0, [sp, #0]
 8003878:	9f08      	ldr	r7, [sp, #32]
 800387a:	321a      	adds	r2, #26
 800387c:	47b8      	blx	r7
 800387e:	3001      	adds	r0, #1
 8003880:	d0e6      	beq.n	8003850 <_printf_common+0xa8>
 8003882:	3601      	adds	r6, #1
 8003884:	e7d1      	b.n	800382a <_printf_common+0x82>
	...

08003888 <_printf_i>:
 8003888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388a:	b08b      	sub	sp, #44	; 0x2c
 800388c:	9206      	str	r2, [sp, #24]
 800388e:	000a      	movs	r2, r1
 8003890:	3243      	adds	r2, #67	; 0x43
 8003892:	9307      	str	r3, [sp, #28]
 8003894:	9005      	str	r0, [sp, #20]
 8003896:	9204      	str	r2, [sp, #16]
 8003898:	7e0a      	ldrb	r2, [r1, #24]
 800389a:	000c      	movs	r4, r1
 800389c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800389e:	2a78      	cmp	r2, #120	; 0x78
 80038a0:	d809      	bhi.n	80038b6 <_printf_i+0x2e>
 80038a2:	2a62      	cmp	r2, #98	; 0x62
 80038a4:	d80b      	bhi.n	80038be <_printf_i+0x36>
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d100      	bne.n	80038ac <_printf_i+0x24>
 80038aa:	e0c8      	b.n	8003a3e <_printf_i+0x1b6>
 80038ac:	4981      	ldr	r1, [pc, #516]	; (8003ab4 <_printf_i+0x22c>)
 80038ae:	9103      	str	r1, [sp, #12]
 80038b0:	2a58      	cmp	r2, #88	; 0x58
 80038b2:	d100      	bne.n	80038b6 <_printf_i+0x2e>
 80038b4:	e09c      	b.n	80039f0 <_printf_i+0x168>
 80038b6:	0025      	movs	r5, r4
 80038b8:	3542      	adds	r5, #66	; 0x42
 80038ba:	702a      	strb	r2, [r5, #0]
 80038bc:	e022      	b.n	8003904 <_printf_i+0x7c>
 80038be:	0010      	movs	r0, r2
 80038c0:	3863      	subs	r0, #99	; 0x63
 80038c2:	2815      	cmp	r0, #21
 80038c4:	d8f7      	bhi.n	80038b6 <_printf_i+0x2e>
 80038c6:	f7fc fcdf 	bl	8000288 <__gnu_thumb1_case_shi>
 80038ca:	0016      	.short	0x0016
 80038cc:	fff6001f 	.word	0xfff6001f
 80038d0:	fff6fff6 	.word	0xfff6fff6
 80038d4:	001ffff6 	.word	0x001ffff6
 80038d8:	fff6fff6 	.word	0xfff6fff6
 80038dc:	fff6fff6 	.word	0xfff6fff6
 80038e0:	004f00ad 	.word	0x004f00ad
 80038e4:	fff6008c 	.word	0xfff6008c
 80038e8:	00befff6 	.word	0x00befff6
 80038ec:	004ffff6 	.word	0x004ffff6
 80038f0:	fff6fff6 	.word	0xfff6fff6
 80038f4:	0090      	.short	0x0090
 80038f6:	0025      	movs	r5, r4
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	3542      	adds	r5, #66	; 0x42
 80038fc:	1d11      	adds	r1, r2, #4
 80038fe:	6019      	str	r1, [r3, #0]
 8003900:	6813      	ldr	r3, [r2, #0]
 8003902:	702b      	strb	r3, [r5, #0]
 8003904:	2301      	movs	r3, #1
 8003906:	e0ac      	b.n	8003a62 <_printf_i+0x1da>
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	6809      	ldr	r1, [r1, #0]
 800390c:	1d02      	adds	r2, r0, #4
 800390e:	060d      	lsls	r5, r1, #24
 8003910:	d51f      	bpl.n	8003952 <_printf_i+0xca>
 8003912:	6806      	ldr	r6, [r0, #0]
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	4a67      	ldr	r2, [pc, #412]	; (8003ab4 <_printf_i+0x22c>)
 8003918:	270a      	movs	r7, #10
 800391a:	6861      	ldr	r1, [r4, #4]
 800391c:	9203      	str	r2, [sp, #12]
 800391e:	2e00      	cmp	r6, #0
 8003920:	da35      	bge.n	800398e <_printf_i+0x106>
 8003922:	0023      	movs	r3, r4
 8003924:	202d      	movs	r0, #45	; 0x2d
 8003926:	3343      	adds	r3, #67	; 0x43
 8003928:	7018      	strb	r0, [r3, #0]
 800392a:	60a1      	str	r1, [r4, #8]
 800392c:	2900      	cmp	r1, #0
 800392e:	da16      	bge.n	800395e <_printf_i+0xd6>
 8003930:	270a      	movs	r7, #10
 8003932:	4276      	negs	r6, r6
 8003934:	9203      	str	r2, [sp, #12]
 8003936:	9d04      	ldr	r5, [sp, #16]
 8003938:	0030      	movs	r0, r6
 800393a:	0039      	movs	r1, r7
 800393c:	f7fc fc46 	bl	80001cc <__aeabi_uidivmod>
 8003940:	9b03      	ldr	r3, [sp, #12]
 8003942:	3d01      	subs	r5, #1
 8003944:	5c5b      	ldrb	r3, [r3, r1]
 8003946:	702b      	strb	r3, [r5, #0]
 8003948:	0033      	movs	r3, r6
 800394a:	0006      	movs	r6, r0
 800394c:	429f      	cmp	r7, r3
 800394e:	d9f3      	bls.n	8003938 <_printf_i+0xb0>
 8003950:	e02a      	b.n	80039a8 <_printf_i+0x120>
 8003952:	6806      	ldr	r6, [r0, #0]
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	0649      	lsls	r1, r1, #25
 8003958:	d5dd      	bpl.n	8003916 <_printf_i+0x8e>
 800395a:	b236      	sxth	r6, r6
 800395c:	e7db      	b.n	8003916 <_printf_i+0x8e>
 800395e:	2104      	movs	r1, #4
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	438b      	bics	r3, r1
 8003964:	6023      	str	r3, [r4, #0]
 8003966:	e7e3      	b.n	8003930 <_printf_i+0xa8>
 8003968:	6808      	ldr	r0, [r1, #0]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	c940      	ldmia	r1!, {r6}
 800396e:	0605      	lsls	r5, r0, #24
 8003970:	d402      	bmi.n	8003978 <_printf_i+0xf0>
 8003972:	0640      	lsls	r0, r0, #25
 8003974:	d500      	bpl.n	8003978 <_printf_i+0xf0>
 8003976:	b2b6      	uxth	r6, r6
 8003978:	6019      	str	r1, [r3, #0]
 800397a:	4b4e      	ldr	r3, [pc, #312]	; (8003ab4 <_printf_i+0x22c>)
 800397c:	270a      	movs	r7, #10
 800397e:	9303      	str	r3, [sp, #12]
 8003980:	2a6f      	cmp	r2, #111	; 0x6f
 8003982:	d100      	bne.n	8003986 <_printf_i+0xfe>
 8003984:	3f02      	subs	r7, #2
 8003986:	0023      	movs	r3, r4
 8003988:	2200      	movs	r2, #0
 800398a:	3343      	adds	r3, #67	; 0x43
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	6863      	ldr	r3, [r4, #4]
 8003990:	60a3      	str	r3, [r4, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	dbcf      	blt.n	8003936 <_printf_i+0xae>
 8003996:	2104      	movs	r1, #4
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	438a      	bics	r2, r1
 800399c:	6022      	str	r2, [r4, #0]
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d1c9      	bne.n	8003936 <_printf_i+0xae>
 80039a2:	9d04      	ldr	r5, [sp, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1c6      	bne.n	8003936 <_printf_i+0xae>
 80039a8:	2f08      	cmp	r7, #8
 80039aa:	d109      	bne.n	80039c0 <_printf_i+0x138>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	07db      	lsls	r3, r3, #31
 80039b0:	d506      	bpl.n	80039c0 <_printf_i+0x138>
 80039b2:	6862      	ldr	r2, [r4, #4]
 80039b4:	6923      	ldr	r3, [r4, #16]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	dc02      	bgt.n	80039c0 <_printf_i+0x138>
 80039ba:	2330      	movs	r3, #48	; 0x30
 80039bc:	3d01      	subs	r5, #1
 80039be:	702b      	strb	r3, [r5, #0]
 80039c0:	9b04      	ldr	r3, [sp, #16]
 80039c2:	1b5b      	subs	r3, r3, r5
 80039c4:	6123      	str	r3, [r4, #16]
 80039c6:	9b07      	ldr	r3, [sp, #28]
 80039c8:	0021      	movs	r1, r4
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	9805      	ldr	r0, [sp, #20]
 80039ce:	9b06      	ldr	r3, [sp, #24]
 80039d0:	aa09      	add	r2, sp, #36	; 0x24
 80039d2:	f7ff fee9 	bl	80037a8 <_printf_common>
 80039d6:	3001      	adds	r0, #1
 80039d8:	d148      	bne.n	8003a6c <_printf_i+0x1e4>
 80039da:	2001      	movs	r0, #1
 80039dc:	4240      	negs	r0, r0
 80039de:	b00b      	add	sp, #44	; 0x2c
 80039e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e2:	2220      	movs	r2, #32
 80039e4:	6809      	ldr	r1, [r1, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	6022      	str	r2, [r4, #0]
 80039ea:	2278      	movs	r2, #120	; 0x78
 80039ec:	4932      	ldr	r1, [pc, #200]	; (8003ab8 <_printf_i+0x230>)
 80039ee:	9103      	str	r1, [sp, #12]
 80039f0:	0021      	movs	r1, r4
 80039f2:	3145      	adds	r1, #69	; 0x45
 80039f4:	700a      	strb	r2, [r1, #0]
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	6822      	ldr	r2, [r4, #0]
 80039fa:	c940      	ldmia	r1!, {r6}
 80039fc:	0610      	lsls	r0, r2, #24
 80039fe:	d402      	bmi.n	8003a06 <_printf_i+0x17e>
 8003a00:	0650      	lsls	r0, r2, #25
 8003a02:	d500      	bpl.n	8003a06 <_printf_i+0x17e>
 8003a04:	b2b6      	uxth	r6, r6
 8003a06:	6019      	str	r1, [r3, #0]
 8003a08:	07d3      	lsls	r3, r2, #31
 8003a0a:	d502      	bpl.n	8003a12 <_printf_i+0x18a>
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	2e00      	cmp	r6, #0
 8003a14:	d001      	beq.n	8003a1a <_printf_i+0x192>
 8003a16:	2710      	movs	r7, #16
 8003a18:	e7b5      	b.n	8003986 <_printf_i+0xfe>
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	4393      	bics	r3, r2
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	e7f8      	b.n	8003a16 <_printf_i+0x18e>
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	680d      	ldr	r5, [r1, #0]
 8003a28:	1d10      	adds	r0, r2, #4
 8003a2a:	6949      	ldr	r1, [r1, #20]
 8003a2c:	6018      	str	r0, [r3, #0]
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	062e      	lsls	r6, r5, #24
 8003a32:	d501      	bpl.n	8003a38 <_printf_i+0x1b0>
 8003a34:	6019      	str	r1, [r3, #0]
 8003a36:	e002      	b.n	8003a3e <_printf_i+0x1b6>
 8003a38:	066d      	lsls	r5, r5, #25
 8003a3a:	d5fb      	bpl.n	8003a34 <_printf_i+0x1ac>
 8003a3c:	8019      	strh	r1, [r3, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9d04      	ldr	r5, [sp, #16]
 8003a42:	6123      	str	r3, [r4, #16]
 8003a44:	e7bf      	b.n	80039c6 <_printf_i+0x13e>
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	1d11      	adds	r1, r2, #4
 8003a4a:	6019      	str	r1, [r3, #0]
 8003a4c:	6815      	ldr	r5, [r2, #0]
 8003a4e:	2100      	movs	r1, #0
 8003a50:	0028      	movs	r0, r5
 8003a52:	6862      	ldr	r2, [r4, #4]
 8003a54:	f000 f99e 	bl	8003d94 <memchr>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d001      	beq.n	8003a60 <_printf_i+0x1d8>
 8003a5c:	1b40      	subs	r0, r0, r5
 8003a5e:	6060      	str	r0, [r4, #4]
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	2300      	movs	r3, #0
 8003a66:	9a04      	ldr	r2, [sp, #16]
 8003a68:	7013      	strb	r3, [r2, #0]
 8003a6a:	e7ac      	b.n	80039c6 <_printf_i+0x13e>
 8003a6c:	002a      	movs	r2, r5
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	9906      	ldr	r1, [sp, #24]
 8003a72:	9805      	ldr	r0, [sp, #20]
 8003a74:	9d07      	ldr	r5, [sp, #28]
 8003a76:	47a8      	blx	r5
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d0ae      	beq.n	80039da <_printf_i+0x152>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	079b      	lsls	r3, r3, #30
 8003a80:	d415      	bmi.n	8003aae <_printf_i+0x226>
 8003a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a84:	68e0      	ldr	r0, [r4, #12]
 8003a86:	4298      	cmp	r0, r3
 8003a88:	daa9      	bge.n	80039de <_printf_i+0x156>
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	e7a7      	b.n	80039de <_printf_i+0x156>
 8003a8e:	0022      	movs	r2, r4
 8003a90:	2301      	movs	r3, #1
 8003a92:	9906      	ldr	r1, [sp, #24]
 8003a94:	9805      	ldr	r0, [sp, #20]
 8003a96:	9e07      	ldr	r6, [sp, #28]
 8003a98:	3219      	adds	r2, #25
 8003a9a:	47b0      	blx	r6
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d09c      	beq.n	80039da <_printf_i+0x152>
 8003aa0:	3501      	adds	r5, #1
 8003aa2:	68e3      	ldr	r3, [r4, #12]
 8003aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	42ab      	cmp	r3, r5
 8003aaa:	dcf0      	bgt.n	8003a8e <_printf_i+0x206>
 8003aac:	e7e9      	b.n	8003a82 <_printf_i+0x1fa>
 8003aae:	2500      	movs	r5, #0
 8003ab0:	e7f7      	b.n	8003aa2 <_printf_i+0x21a>
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	080044dd 	.word	0x080044dd
 8003ab8:	080044ee 	.word	0x080044ee

08003abc <__sflush_r>:
 8003abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003abe:	220c      	movs	r2, #12
 8003ac0:	5e8b      	ldrsh	r3, [r1, r2]
 8003ac2:	0005      	movs	r5, r0
 8003ac4:	000c      	movs	r4, r1
 8003ac6:	071a      	lsls	r2, r3, #28
 8003ac8:	d461      	bmi.n	8003b8e <__sflush_r+0xd2>
 8003aca:	684a      	ldr	r2, [r1, #4]
 8003acc:	2a00      	cmp	r2, #0
 8003ace:	dc02      	bgt.n	8003ad6 <__sflush_r+0x1a>
 8003ad0:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003ad2:	2a00      	cmp	r2, #0
 8003ad4:	dd42      	ble.n	8003b5c <__sflush_r+0xa0>
 8003ad6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003ad8:	2f00      	cmp	r7, #0
 8003ada:	d03f      	beq.n	8003b5c <__sflush_r+0xa0>
 8003adc:	2200      	movs	r2, #0
 8003ade:	2080      	movs	r0, #128	; 0x80
 8003ae0:	682e      	ldr	r6, [r5, #0]
 8003ae2:	602a      	str	r2, [r5, #0]
 8003ae4:	001a      	movs	r2, r3
 8003ae6:	0140      	lsls	r0, r0, #5
 8003ae8:	6a21      	ldr	r1, [r4, #32]
 8003aea:	4002      	ands	r2, r0
 8003aec:	4203      	tst	r3, r0
 8003aee:	d027      	beq.n	8003b40 <__sflush_r+0x84>
 8003af0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	075b      	lsls	r3, r3, #29
 8003af6:	d506      	bpl.n	8003b06 <__sflush_r+0x4a>
 8003af8:	6863      	ldr	r3, [r4, #4]
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <__sflush_r+0x4a>
 8003b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b04:	1ad2      	subs	r2, r2, r3
 8003b06:	2300      	movs	r3, #0
 8003b08:	0028      	movs	r0, r5
 8003b0a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003b0c:	6a21      	ldr	r1, [r4, #32]
 8003b0e:	47b8      	blx	r7
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d025      	beq.n	8003b60 <__sflush_r+0xa4>
 8003b14:	2300      	movs	r3, #0
 8003b16:	6063      	str	r3, [r4, #4]
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	89a3      	ldrh	r3, [r4, #12]
 8003b1e:	04db      	lsls	r3, r3, #19
 8003b20:	d500      	bpl.n	8003b24 <__sflush_r+0x68>
 8003b22:	6560      	str	r0, [r4, #84]	; 0x54
 8003b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b26:	602e      	str	r6, [r5, #0]
 8003b28:	2900      	cmp	r1, #0
 8003b2a:	d017      	beq.n	8003b5c <__sflush_r+0xa0>
 8003b2c:	0023      	movs	r3, r4
 8003b2e:	3344      	adds	r3, #68	; 0x44
 8003b30:	4299      	cmp	r1, r3
 8003b32:	d002      	beq.n	8003b3a <__sflush_r+0x7e>
 8003b34:	0028      	movs	r0, r5
 8003b36:	f7ff fbfd 	bl	8003334 <_free_r>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b3e:	e00d      	b.n	8003b5c <__sflush_r+0xa0>
 8003b40:	2301      	movs	r3, #1
 8003b42:	0028      	movs	r0, r5
 8003b44:	47b8      	blx	r7
 8003b46:	0002      	movs	r2, r0
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d1d2      	bne.n	8003af2 <__sflush_r+0x36>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0cf      	beq.n	8003af2 <__sflush_r+0x36>
 8003b52:	2b1d      	cmp	r3, #29
 8003b54:	d001      	beq.n	8003b5a <__sflush_r+0x9e>
 8003b56:	2b16      	cmp	r3, #22
 8003b58:	d131      	bne.n	8003bbe <__sflush_r+0x102>
 8003b5a:	602e      	str	r6, [r5, #0]
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e035      	b.n	8003bcc <__sflush_r+0x110>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	210c      	movs	r1, #12
 8003b64:	5e62      	ldrsh	r2, [r4, r1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <__sflush_r+0xc0>
 8003b6a:	2b1d      	cmp	r3, #29
 8003b6c:	d001      	beq.n	8003b72 <__sflush_r+0xb6>
 8003b6e:	2b16      	cmp	r3, #22
 8003b70:	d10a      	bne.n	8003b88 <__sflush_r+0xcc>
 8003b72:	2300      	movs	r3, #0
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	6923      	ldr	r3, [r4, #16]
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	e7d3      	b.n	8003b24 <__sflush_r+0x68>
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	04d2      	lsls	r2, r2, #19
 8003b84:	d4cd      	bmi.n	8003b22 <__sflush_r+0x66>
 8003b86:	e7cd      	b.n	8003b24 <__sflush_r+0x68>
 8003b88:	2340      	movs	r3, #64	; 0x40
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	e01b      	b.n	8003bc6 <__sflush_r+0x10a>
 8003b8e:	690e      	ldr	r6, [r1, #16]
 8003b90:	2e00      	cmp	r6, #0
 8003b92:	d0e3      	beq.n	8003b5c <__sflush_r+0xa0>
 8003b94:	680f      	ldr	r7, [r1, #0]
 8003b96:	600e      	str	r6, [r1, #0]
 8003b98:	1bba      	subs	r2, r7, r6
 8003b9a:	9201      	str	r2, [sp, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	079b      	lsls	r3, r3, #30
 8003ba0:	d100      	bne.n	8003ba4 <__sflush_r+0xe8>
 8003ba2:	694a      	ldr	r2, [r1, #20]
 8003ba4:	60a2      	str	r2, [r4, #8]
 8003ba6:	9b01      	ldr	r3, [sp, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	ddd7      	ble.n	8003b5c <__sflush_r+0xa0>
 8003bac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bae:	0032      	movs	r2, r6
 8003bb0:	001f      	movs	r7, r3
 8003bb2:	0028      	movs	r0, r5
 8003bb4:	9b01      	ldr	r3, [sp, #4]
 8003bb6:	6a21      	ldr	r1, [r4, #32]
 8003bb8:	47b8      	blx	r7
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	dc07      	bgt.n	8003bce <__sflush_r+0x112>
 8003bbe:	2340      	movs	r3, #64	; 0x40
 8003bc0:	89a2      	ldrh	r2, [r4, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	4240      	negs	r0, r0
 8003bcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bce:	9b01      	ldr	r3, [sp, #4]
 8003bd0:	1836      	adds	r6, r6, r0
 8003bd2:	1a1b      	subs	r3, r3, r0
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	e7e6      	b.n	8003ba6 <__sflush_r+0xea>

08003bd8 <_fflush_r>:
 8003bd8:	690b      	ldr	r3, [r1, #16]
 8003bda:	b570      	push	{r4, r5, r6, lr}
 8003bdc:	0005      	movs	r5, r0
 8003bde:	000c      	movs	r4, r1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <_fflush_r+0x12>
 8003be4:	2500      	movs	r5, #0
 8003be6:	0028      	movs	r0, r5
 8003be8:	bd70      	pop	{r4, r5, r6, pc}
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d004      	beq.n	8003bf8 <_fflush_r+0x20>
 8003bee:	6a03      	ldr	r3, [r0, #32]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <_fflush_r+0x20>
 8003bf4:	f7ff fa90 	bl	8003118 <__sinit>
 8003bf8:	220c      	movs	r2, #12
 8003bfa:	5ea3      	ldrsh	r3, [r4, r2]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f1      	beq.n	8003be4 <_fflush_r+0xc>
 8003c00:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c02:	07d2      	lsls	r2, r2, #31
 8003c04:	d404      	bmi.n	8003c10 <_fflush_r+0x38>
 8003c06:	059b      	lsls	r3, r3, #22
 8003c08:	d402      	bmi.n	8003c10 <_fflush_r+0x38>
 8003c0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c0c:	f7ff fb8f 	bl	800332e <__retarget_lock_acquire_recursive>
 8003c10:	0028      	movs	r0, r5
 8003c12:	0021      	movs	r1, r4
 8003c14:	f7ff ff52 	bl	8003abc <__sflush_r>
 8003c18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c1a:	0005      	movs	r5, r0
 8003c1c:	07db      	lsls	r3, r3, #31
 8003c1e:	d4e2      	bmi.n	8003be6 <_fflush_r+0xe>
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	059b      	lsls	r3, r3, #22
 8003c24:	d4df      	bmi.n	8003be6 <_fflush_r+0xe>
 8003c26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c28:	f7ff fb82 	bl	8003330 <__retarget_lock_release_recursive>
 8003c2c:	e7db      	b.n	8003be6 <_fflush_r+0xe>

08003c2e <__swbuf_r>:
 8003c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c30:	0006      	movs	r6, r0
 8003c32:	000d      	movs	r5, r1
 8003c34:	0014      	movs	r4, r2
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d004      	beq.n	8003c44 <__swbuf_r+0x16>
 8003c3a:	6a03      	ldr	r3, [r0, #32]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <__swbuf_r+0x16>
 8003c40:	f7ff fa6a 	bl	8003118 <__sinit>
 8003c44:	69a3      	ldr	r3, [r4, #24]
 8003c46:	60a3      	str	r3, [r4, #8]
 8003c48:	89a3      	ldrh	r3, [r4, #12]
 8003c4a:	071b      	lsls	r3, r3, #28
 8003c4c:	d502      	bpl.n	8003c54 <__swbuf_r+0x26>
 8003c4e:	6923      	ldr	r3, [r4, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <__swbuf_r+0x3a>
 8003c54:	0021      	movs	r1, r4
 8003c56:	0030      	movs	r0, r6
 8003c58:	f000 f82c 	bl	8003cb4 <__swsetup_r>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d003      	beq.n	8003c68 <__swbuf_r+0x3a>
 8003c60:	2501      	movs	r5, #1
 8003c62:	426d      	negs	r5, r5
 8003c64:	0028      	movs	r0, r5
 8003c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c68:	6923      	ldr	r3, [r4, #16]
 8003c6a:	6820      	ldr	r0, [r4, #0]
 8003c6c:	b2ef      	uxtb	r7, r5
 8003c6e:	1ac0      	subs	r0, r0, r3
 8003c70:	6963      	ldr	r3, [r4, #20]
 8003c72:	b2ed      	uxtb	r5, r5
 8003c74:	4283      	cmp	r3, r0
 8003c76:	dc05      	bgt.n	8003c84 <__swbuf_r+0x56>
 8003c78:	0021      	movs	r1, r4
 8003c7a:	0030      	movs	r0, r6
 8003c7c:	f7ff ffac 	bl	8003bd8 <_fflush_r>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d1ed      	bne.n	8003c60 <__swbuf_r+0x32>
 8003c84:	68a3      	ldr	r3, [r4, #8]
 8003c86:	3001      	adds	r0, #1
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	60a3      	str	r3, [r4, #8]
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	6022      	str	r2, [r4, #0]
 8003c92:	701f      	strb	r7, [r3, #0]
 8003c94:	6963      	ldr	r3, [r4, #20]
 8003c96:	4283      	cmp	r3, r0
 8003c98:	d004      	beq.n	8003ca4 <__swbuf_r+0x76>
 8003c9a:	89a3      	ldrh	r3, [r4, #12]
 8003c9c:	07db      	lsls	r3, r3, #31
 8003c9e:	d5e1      	bpl.n	8003c64 <__swbuf_r+0x36>
 8003ca0:	2d0a      	cmp	r5, #10
 8003ca2:	d1df      	bne.n	8003c64 <__swbuf_r+0x36>
 8003ca4:	0021      	movs	r1, r4
 8003ca6:	0030      	movs	r0, r6
 8003ca8:	f7ff ff96 	bl	8003bd8 <_fflush_r>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	d0d9      	beq.n	8003c64 <__swbuf_r+0x36>
 8003cb0:	e7d6      	b.n	8003c60 <__swbuf_r+0x32>
	...

08003cb4 <__swsetup_r>:
 8003cb4:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <__swsetup_r+0xb8>)
 8003cb6:	b570      	push	{r4, r5, r6, lr}
 8003cb8:	0005      	movs	r5, r0
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	000c      	movs	r4, r1
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d004      	beq.n	8003ccc <__swsetup_r+0x18>
 8003cc2:	6a03      	ldr	r3, [r0, #32]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <__swsetup_r+0x18>
 8003cc8:	f7ff fa26 	bl	8003118 <__sinit>
 8003ccc:	230c      	movs	r3, #12
 8003cce:	5ee2      	ldrsh	r2, [r4, r3]
 8003cd0:	0713      	lsls	r3, r2, #28
 8003cd2:	d423      	bmi.n	8003d1c <__swsetup_r+0x68>
 8003cd4:	06d3      	lsls	r3, r2, #27
 8003cd6:	d407      	bmi.n	8003ce8 <__swsetup_r+0x34>
 8003cd8:	2309      	movs	r3, #9
 8003cda:	602b      	str	r3, [r5, #0]
 8003cdc:	2340      	movs	r3, #64	; 0x40
 8003cde:	2001      	movs	r0, #1
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	81a3      	strh	r3, [r4, #12]
 8003ce4:	4240      	negs	r0, r0
 8003ce6:	e03a      	b.n	8003d5e <__swsetup_r+0xaa>
 8003ce8:	0752      	lsls	r2, r2, #29
 8003cea:	d513      	bpl.n	8003d14 <__swsetup_r+0x60>
 8003cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d008      	beq.n	8003d04 <__swsetup_r+0x50>
 8003cf2:	0023      	movs	r3, r4
 8003cf4:	3344      	adds	r3, #68	; 0x44
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	d002      	beq.n	8003d00 <__swsetup_r+0x4c>
 8003cfa:	0028      	movs	r0, r5
 8003cfc:	f7ff fb1a 	bl	8003334 <_free_r>
 8003d00:	2300      	movs	r3, #0
 8003d02:	6363      	str	r3, [r4, #52]	; 0x34
 8003d04:	2224      	movs	r2, #36	; 0x24
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	4393      	bics	r3, r2
 8003d0a:	81a3      	strh	r3, [r4, #12]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6063      	str	r3, [r4, #4]
 8003d10:	6923      	ldr	r3, [r4, #16]
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	2308      	movs	r3, #8
 8003d16:	89a2      	ldrh	r2, [r4, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	81a3      	strh	r3, [r4, #12]
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <__swsetup_r+0x86>
 8003d22:	21a0      	movs	r1, #160	; 0xa0
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	0089      	lsls	r1, r1, #2
 8003d2a:	0092      	lsls	r2, r2, #2
 8003d2c:	400b      	ands	r3, r1
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d003      	beq.n	8003d3a <__swsetup_r+0x86>
 8003d32:	0021      	movs	r1, r4
 8003d34:	0028      	movs	r0, r5
 8003d36:	f000 f863 	bl	8003e00 <__smakebuf_r>
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	5ee2      	ldrsh	r2, [r4, r3]
 8003d3e:	2101      	movs	r1, #1
 8003d40:	0013      	movs	r3, r2
 8003d42:	400b      	ands	r3, r1
 8003d44:	420a      	tst	r2, r1
 8003d46:	d00b      	beq.n	8003d60 <__swsetup_r+0xac>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60a3      	str	r3, [r4, #8]
 8003d4c:	6963      	ldr	r3, [r4, #20]
 8003d4e:	425b      	negs	r3, r3
 8003d50:	61a3      	str	r3, [r4, #24]
 8003d52:	2000      	movs	r0, #0
 8003d54:	6923      	ldr	r3, [r4, #16]
 8003d56:	4283      	cmp	r3, r0
 8003d58:	d101      	bne.n	8003d5e <__swsetup_r+0xaa>
 8003d5a:	0613      	lsls	r3, r2, #24
 8003d5c:	d4be      	bmi.n	8003cdc <__swsetup_r+0x28>
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
 8003d60:	0791      	lsls	r1, r2, #30
 8003d62:	d400      	bmi.n	8003d66 <__swsetup_r+0xb2>
 8003d64:	6963      	ldr	r3, [r4, #20]
 8003d66:	60a3      	str	r3, [r4, #8]
 8003d68:	e7f3      	b.n	8003d52 <__swsetup_r+0x9e>
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	2000000c 	.word	0x2000000c

08003d70 <_sbrk_r>:
 8003d70:	2300      	movs	r3, #0
 8003d72:	b570      	push	{r4, r5, r6, lr}
 8003d74:	4d06      	ldr	r5, [pc, #24]	; (8003d90 <_sbrk_r+0x20>)
 8003d76:	0004      	movs	r4, r0
 8003d78:	0008      	movs	r0, r1
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	f000 f99a 	bl	80040b4 <_sbrk>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d103      	bne.n	8003d8c <_sbrk_r+0x1c>
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d000      	beq.n	8003d8c <_sbrk_r+0x1c>
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	bd70      	pop	{r4, r5, r6, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	200001e8 	.word	0x200001e8

08003d94 <memchr>:
 8003d94:	b2c9      	uxtb	r1, r1
 8003d96:	1882      	adds	r2, r0, r2
 8003d98:	4290      	cmp	r0, r2
 8003d9a:	d101      	bne.n	8003da0 <memchr+0xc>
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	4770      	bx	lr
 8003da0:	7803      	ldrb	r3, [r0, #0]
 8003da2:	428b      	cmp	r3, r1
 8003da4:	d0fb      	beq.n	8003d9e <memchr+0xa>
 8003da6:	3001      	adds	r0, #1
 8003da8:	e7f6      	b.n	8003d98 <memchr+0x4>
	...

08003dac <__swhatbuf_r>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	000e      	movs	r6, r1
 8003db0:	001d      	movs	r5, r3
 8003db2:	230e      	movs	r3, #14
 8003db4:	5ec9      	ldrsh	r1, [r1, r3]
 8003db6:	0014      	movs	r4, r2
 8003db8:	b096      	sub	sp, #88	; 0x58
 8003dba:	2900      	cmp	r1, #0
 8003dbc:	da0c      	bge.n	8003dd8 <__swhatbuf_r+0x2c>
 8003dbe:	89b2      	ldrh	r2, [r6, #12]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	4019      	ands	r1, r3
 8003dc6:	421a      	tst	r2, r3
 8003dc8:	d114      	bne.n	8003df4 <__swhatbuf_r+0x48>
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	2000      	movs	r0, #0
 8003dd0:	6029      	str	r1, [r5, #0]
 8003dd2:	6023      	str	r3, [r4, #0]
 8003dd4:	b016      	add	sp, #88	; 0x58
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	466a      	mov	r2, sp
 8003dda:	f000 f853 	bl	8003e84 <_fstat_r>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	dbed      	blt.n	8003dbe <__swhatbuf_r+0x12>
 8003de2:	23f0      	movs	r3, #240	; 0xf0
 8003de4:	9901      	ldr	r1, [sp, #4]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	4019      	ands	r1, r3
 8003dea:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <__swhatbuf_r+0x50>)
 8003dec:	18c9      	adds	r1, r1, r3
 8003dee:	424b      	negs	r3, r1
 8003df0:	4159      	adcs	r1, r3
 8003df2:	e7ea      	b.n	8003dca <__swhatbuf_r+0x1e>
 8003df4:	2100      	movs	r1, #0
 8003df6:	2340      	movs	r3, #64	; 0x40
 8003df8:	e7e9      	b.n	8003dce <__swhatbuf_r+0x22>
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	ffffe000 	.word	0xffffe000

08003e00 <__smakebuf_r>:
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	2602      	movs	r6, #2
 8003e04:	898b      	ldrh	r3, [r1, #12]
 8003e06:	0005      	movs	r5, r0
 8003e08:	000c      	movs	r4, r1
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	4233      	tst	r3, r6
 8003e0e:	d007      	beq.n	8003e20 <__smakebuf_r+0x20>
 8003e10:	0023      	movs	r3, r4
 8003e12:	3347      	adds	r3, #71	; 0x47
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	6123      	str	r3, [r4, #16]
 8003e18:	2301      	movs	r3, #1
 8003e1a:	6163      	str	r3, [r4, #20]
 8003e1c:	b005      	add	sp, #20
 8003e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e20:	ab03      	add	r3, sp, #12
 8003e22:	aa02      	add	r2, sp, #8
 8003e24:	f7ff ffc2 	bl	8003dac <__swhatbuf_r>
 8003e28:	9f02      	ldr	r7, [sp, #8]
 8003e2a:	9001      	str	r0, [sp, #4]
 8003e2c:	0039      	movs	r1, r7
 8003e2e:	0028      	movs	r0, r5
 8003e30:	f7ff faec 	bl	800340c <_malloc_r>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d108      	bne.n	8003e4a <__smakebuf_r+0x4a>
 8003e38:	220c      	movs	r2, #12
 8003e3a:	5ea3      	ldrsh	r3, [r4, r2]
 8003e3c:	059a      	lsls	r2, r3, #22
 8003e3e:	d4ed      	bmi.n	8003e1c <__smakebuf_r+0x1c>
 8003e40:	2203      	movs	r2, #3
 8003e42:	4393      	bics	r3, r2
 8003e44:	431e      	orrs	r6, r3
 8003e46:	81a6      	strh	r6, [r4, #12]
 8003e48:	e7e2      	b.n	8003e10 <__smakebuf_r+0x10>
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	89a2      	ldrh	r2, [r4, #12]
 8003e4e:	6020      	str	r0, [r4, #0]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	81a3      	strh	r3, [r4, #12]
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	6120      	str	r0, [r4, #16]
 8003e58:	6167      	str	r7, [r4, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <__smakebuf_r+0x78>
 8003e5e:	0028      	movs	r0, r5
 8003e60:	230e      	movs	r3, #14
 8003e62:	5ee1      	ldrsh	r1, [r4, r3]
 8003e64:	f000 f820 	bl	8003ea8 <_isatty_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d005      	beq.n	8003e78 <__smakebuf_r+0x78>
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	89a2      	ldrh	r2, [r4, #12]
 8003e70:	439a      	bics	r2, r3
 8003e72:	3b02      	subs	r3, #2
 8003e74:	4313      	orrs	r3, r2
 8003e76:	81a3      	strh	r3, [r4, #12]
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	9a01      	ldr	r2, [sp, #4]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	e7cc      	b.n	8003e1c <__smakebuf_r+0x1c>
	...

08003e84 <_fstat_r>:
 8003e84:	2300      	movs	r3, #0
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	4d06      	ldr	r5, [pc, #24]	; (8003ea4 <_fstat_r+0x20>)
 8003e8a:	0004      	movs	r4, r0
 8003e8c:	0008      	movs	r0, r1
 8003e8e:	0011      	movs	r1, r2
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	f000 f957 	bl	8004144 <_fstat>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d103      	bne.n	8003ea2 <_fstat_r+0x1e>
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d000      	beq.n	8003ea2 <_fstat_r+0x1e>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
 8003ea4:	200001e8 	.word	0x200001e8

08003ea8 <_isatty_r>:
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	b570      	push	{r4, r5, r6, lr}
 8003eac:	4d06      	ldr	r5, [pc, #24]	; (8003ec8 <_isatty_r+0x20>)
 8003eae:	0004      	movs	r4, r0
 8003eb0:	0008      	movs	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f000 faa4 	bl	8004400 <_isatty>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d103      	bne.n	8003ec4 <_isatty_r+0x1c>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d000      	beq.n	8003ec4 <_isatty_r+0x1c>
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	bd70      	pop	{r4, r5, r6, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	200001e8 	.word	0x200001e8

08003ecc <findslot>:
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <findslot+0x2c>)
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	0004      	movs	r4, r0
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d004      	beq.n	8003ee2 <findslot+0x16>
 8003ed8:	6a03      	ldr	r3, [r0, #32]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <findslot+0x16>
 8003ede:	f7ff f91b 	bl	8003118 <__sinit>
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	2c13      	cmp	r4, #19
 8003ee6:	d805      	bhi.n	8003ef4 <findslot+0x28>
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <findslot+0x30>)
 8003eea:	00e4      	lsls	r4, r4, #3
 8003eec:	58e2      	ldr	r2, [r4, r3]
 8003eee:	3201      	adds	r2, #1
 8003ef0:	d000      	beq.n	8003ef4 <findslot+0x28>
 8003ef2:	18e0      	adds	r0, r4, r3
 8003ef4:	bd10      	pop	{r4, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	2000000c 	.word	0x2000000c
 8003efc:	20000208 	.word	0x20000208

08003f00 <error>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	0004      	movs	r4, r0
 8003f04:	f000 fa9a 	bl	800443c <__errno>
 8003f08:	2613      	movs	r6, #19
 8003f0a:	0005      	movs	r5, r0
 8003f0c:	2700      	movs	r7, #0
 8003f0e:	1c30      	adds	r0, r6, #0
 8003f10:	1c39      	adds	r1, r7, #0
 8003f12:	beab      	bkpt	0x00ab
 8003f14:	1c06      	adds	r6, r0, #0
 8003f16:	602e      	str	r6, [r5, #0]
 8003f18:	0020      	movs	r0, r4
 8003f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f1c <checkerror>:
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	d101      	bne.n	8003f26 <checkerror+0xa>
 8003f22:	f7ff ffed 	bl	8003f00 <error>
 8003f26:	bd10      	pop	{r4, pc}

08003f28 <_swiread>:
 8003f28:	b530      	push	{r4, r5, lr}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	ad01      	add	r5, sp, #4
 8003f2e:	9001      	str	r0, [sp, #4]
 8003f30:	9102      	str	r1, [sp, #8]
 8003f32:	9203      	str	r2, [sp, #12]
 8003f34:	2406      	movs	r4, #6
 8003f36:	1c20      	adds	r0, r4, #0
 8003f38:	1c29      	adds	r1, r5, #0
 8003f3a:	beab      	bkpt	0x00ab
 8003f3c:	1c04      	adds	r4, r0, #0
 8003f3e:	0020      	movs	r0, r4
 8003f40:	f7ff ffec 	bl	8003f1c <checkerror>
 8003f44:	b005      	add	sp, #20
 8003f46:	bd30      	pop	{r4, r5, pc}

08003f48 <_read>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	000e      	movs	r6, r1
 8003f4c:	0014      	movs	r4, r2
 8003f4e:	f7ff ffbd 	bl	8003ecc <findslot>
 8003f52:	1e05      	subs	r5, r0, #0
 8003f54:	d106      	bne.n	8003f64 <_read+0x1c>
 8003f56:	f000 fa71 	bl	800443c <__errno>
 8003f5a:	2309      	movs	r3, #9
 8003f5c:	6003      	str	r3, [r0, #0]
 8003f5e:	2001      	movs	r0, #1
 8003f60:	4240      	negs	r0, r0
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	0022      	movs	r2, r4
 8003f66:	0031      	movs	r1, r6
 8003f68:	6800      	ldr	r0, [r0, #0]
 8003f6a:	f7ff ffdd 	bl	8003f28 <_swiread>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d0f5      	beq.n	8003f5e <_read+0x16>
 8003f72:	686b      	ldr	r3, [r5, #4]
 8003f74:	1a20      	subs	r0, r4, r0
 8003f76:	181b      	adds	r3, r3, r0
 8003f78:	606b      	str	r3, [r5, #4]
 8003f7a:	e7f2      	b.n	8003f62 <_read+0x1a>

08003f7c <_swilseek>:
 8003f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f7e:	000c      	movs	r4, r1
 8003f80:	0016      	movs	r6, r2
 8003f82:	f7ff ffa3 	bl	8003ecc <findslot>
 8003f86:	1e05      	subs	r5, r0, #0
 8003f88:	d107      	bne.n	8003f9a <_swilseek+0x1e>
 8003f8a:	f000 fa57 	bl	800443c <__errno>
 8003f8e:	2309      	movs	r3, #9
 8003f90:	6003      	str	r3, [r0, #0]
 8003f92:	2401      	movs	r4, #1
 8003f94:	4264      	negs	r4, r4
 8003f96:	0020      	movs	r0, r4
 8003f98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f9a:	2e02      	cmp	r6, #2
 8003f9c:	d903      	bls.n	8003fa6 <_swilseek+0x2a>
 8003f9e:	f000 fa4d 	bl	800443c <__errno>
 8003fa2:	2316      	movs	r3, #22
 8003fa4:	e7f4      	b.n	8003f90 <_swilseek+0x14>
 8003fa6:	2e01      	cmp	r6, #1
 8003fa8:	d112      	bne.n	8003fd0 <_swilseek+0x54>
 8003faa:	6843      	ldr	r3, [r0, #4]
 8003fac:	18e4      	adds	r4, r4, r3
 8003fae:	d4f6      	bmi.n	8003f9e <_swilseek+0x22>
 8003fb0:	466f      	mov	r7, sp
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	260a      	movs	r6, #10
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	607c      	str	r4, [r7, #4]
 8003fba:	1c30      	adds	r0, r6, #0
 8003fbc:	1c39      	adds	r1, r7, #0
 8003fbe:	beab      	bkpt	0x00ab
 8003fc0:	1c06      	adds	r6, r0, #0
 8003fc2:	0030      	movs	r0, r6
 8003fc4:	f7ff ffaa 	bl	8003f1c <checkerror>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	dbe2      	blt.n	8003f92 <_swilseek+0x16>
 8003fcc:	606c      	str	r4, [r5, #4]
 8003fce:	e7e2      	b.n	8003f96 <_swilseek+0x1a>
 8003fd0:	6803      	ldr	r3, [r0, #0]
 8003fd2:	2e02      	cmp	r6, #2
 8003fd4:	d1ec      	bne.n	8003fb0 <_swilseek+0x34>
 8003fd6:	466f      	mov	r7, sp
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	360a      	adds	r6, #10
 8003fdc:	1c30      	adds	r0, r6, #0
 8003fde:	1c39      	adds	r1, r7, #0
 8003fe0:	beab      	bkpt	0x00ab
 8003fe2:	1c06      	adds	r6, r0, #0
 8003fe4:	0030      	movs	r0, r6
 8003fe6:	f7ff ff99 	bl	8003f1c <checkerror>
 8003fea:	1824      	adds	r4, r4, r0
 8003fec:	3001      	adds	r0, #1
 8003fee:	d1df      	bne.n	8003fb0 <_swilseek+0x34>
 8003ff0:	e7cf      	b.n	8003f92 <_swilseek+0x16>

08003ff2 <_lseek>:
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	f7ff ffc2 	bl	8003f7c <_swilseek>
 8003ff8:	bd10      	pop	{r4, pc}

08003ffa <_swiwrite>:
 8003ffa:	b530      	push	{r4, r5, lr}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	ad01      	add	r5, sp, #4
 8004000:	9001      	str	r0, [sp, #4]
 8004002:	9102      	str	r1, [sp, #8]
 8004004:	9203      	str	r2, [sp, #12]
 8004006:	2405      	movs	r4, #5
 8004008:	1c20      	adds	r0, r4, #0
 800400a:	1c29      	adds	r1, r5, #0
 800400c:	beab      	bkpt	0x00ab
 800400e:	1c04      	adds	r4, r0, #0
 8004010:	0020      	movs	r0, r4
 8004012:	f7ff ff83 	bl	8003f1c <checkerror>
 8004016:	b005      	add	sp, #20
 8004018:	bd30      	pop	{r4, r5, pc}

0800401a <_write>:
 800401a:	b570      	push	{r4, r5, r6, lr}
 800401c:	000e      	movs	r6, r1
 800401e:	0015      	movs	r5, r2
 8004020:	f7ff ff54 	bl	8003ecc <findslot>
 8004024:	1e04      	subs	r4, r0, #0
 8004026:	d106      	bne.n	8004036 <_write+0x1c>
 8004028:	f000 fa08 	bl	800443c <__errno>
 800402c:	2309      	movs	r3, #9
 800402e:	6003      	str	r3, [r0, #0]
 8004030:	2001      	movs	r0, #1
 8004032:	4240      	negs	r0, r0
 8004034:	bd70      	pop	{r4, r5, r6, pc}
 8004036:	002a      	movs	r2, r5
 8004038:	0031      	movs	r1, r6
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	f7ff ffdd 	bl	8003ffa <_swiwrite>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	dbf5      	blt.n	8004030 <_write+0x16>
 8004044:	6862      	ldr	r2, [r4, #4]
 8004046:	1a28      	subs	r0, r5, r0
 8004048:	1812      	adds	r2, r2, r0
 800404a:	6062      	str	r2, [r4, #4]
 800404c:	42ab      	cmp	r3, r5
 800404e:	d1f1      	bne.n	8004034 <_write+0x1a>
 8004050:	2000      	movs	r0, #0
 8004052:	f7ff ff55 	bl	8003f00 <error>
 8004056:	e7ed      	b.n	8004034 <_write+0x1a>

08004058 <_swiclose>:
 8004058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800405a:	2402      	movs	r4, #2
 800405c:	9001      	str	r0, [sp, #4]
 800405e:	ad01      	add	r5, sp, #4
 8004060:	1c20      	adds	r0, r4, #0
 8004062:	1c29      	adds	r1, r5, #0
 8004064:	beab      	bkpt	0x00ab
 8004066:	1c04      	adds	r4, r0, #0
 8004068:	0020      	movs	r0, r4
 800406a:	f7ff ff57 	bl	8003f1c <checkerror>
 800406e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08004070 <_close>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	0004      	movs	r4, r0
 8004074:	f7ff ff2a 	bl	8003ecc <findslot>
 8004078:	1e05      	subs	r5, r0, #0
 800407a:	d106      	bne.n	800408a <_close+0x1a>
 800407c:	f000 f9de 	bl	800443c <__errno>
 8004080:	2309      	movs	r3, #9
 8004082:	6003      	str	r3, [r0, #0]
 8004084:	2001      	movs	r0, #1
 8004086:	4240      	negs	r0, r0
 8004088:	bd70      	pop	{r4, r5, r6, pc}
 800408a:	3c01      	subs	r4, #1
 800408c:	2c01      	cmp	r4, #1
 800408e:	d809      	bhi.n	80040a4 <_close+0x34>
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <_close+0x40>)
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	429a      	cmp	r2, r3
 8004098:	d104      	bne.n	80040a4 <_close+0x34>
 800409a:	2301      	movs	r3, #1
 800409c:	425b      	negs	r3, r3
 800409e:	2000      	movs	r0, #0
 80040a0:	602b      	str	r3, [r5, #0]
 80040a2:	e7f1      	b.n	8004088 <_close+0x18>
 80040a4:	6828      	ldr	r0, [r5, #0]
 80040a6:	f7ff ffd7 	bl	8004058 <_swiclose>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d0f5      	beq.n	800409a <_close+0x2a>
 80040ae:	e7eb      	b.n	8004088 <_close+0x18>
 80040b0:	20000208 	.word	0x20000208

080040b4 <_sbrk>:
 80040b4:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <_sbrk+0x3c>)
 80040b6:	0003      	movs	r3, r0
 80040b8:	6811      	ldr	r1, [r2, #0]
 80040ba:	b510      	push	{r4, lr}
 80040bc:	2900      	cmp	r1, #0
 80040be:	d101      	bne.n	80040c4 <_sbrk+0x10>
 80040c0:	490c      	ldr	r1, [pc, #48]	; (80040f4 <_sbrk+0x40>)
 80040c2:	6011      	str	r1, [r2, #0]
 80040c4:	4669      	mov	r1, sp
 80040c6:	6810      	ldr	r0, [r2, #0]
 80040c8:	18c3      	adds	r3, r0, r3
 80040ca:	428b      	cmp	r3, r1
 80040cc:	d806      	bhi.n	80040dc <_sbrk+0x28>
 80040ce:	490a      	ldr	r1, [pc, #40]	; (80040f8 <_sbrk+0x44>)
 80040d0:	4c0a      	ldr	r4, [pc, #40]	; (80040fc <_sbrk+0x48>)
 80040d2:	6809      	ldr	r1, [r1, #0]
 80040d4:	42a1      	cmp	r1, r4
 80040d6:	d008      	beq.n	80040ea <_sbrk+0x36>
 80040d8:	428b      	cmp	r3, r1
 80040da:	d906      	bls.n	80040ea <_sbrk+0x36>
 80040dc:	f000 f9ae 	bl	800443c <__errno>
 80040e0:	230c      	movs	r3, #12
 80040e2:	6003      	str	r3, [r0, #0]
 80040e4:	2001      	movs	r0, #1
 80040e6:	4240      	negs	r0, r0
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e7fc      	b.n	80040e8 <_sbrk+0x34>
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	200001f8 	.word	0x200001f8
 80040f4:	200002a8 	.word	0x200002a8
 80040f8:	2000005c 	.word	0x2000005c
 80040fc:	cafedead 	.word	0xcafedead

08004100 <_swistat>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	000c      	movs	r4, r1
 8004104:	f7ff fee2 	bl	8003ecc <findslot>
 8004108:	1e05      	subs	r5, r0, #0
 800410a:	d106      	bne.n	800411a <_swistat+0x1a>
 800410c:	f000 f996 	bl	800443c <__errno>
 8004110:	2309      	movs	r3, #9
 8004112:	6003      	str	r3, [r0, #0]
 8004114:	2001      	movs	r0, #1
 8004116:	4240      	negs	r0, r0
 8004118:	bd70      	pop	{r4, r5, r6, pc}
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	6862      	ldr	r2, [r4, #4]
 800411e:	019b      	lsls	r3, r3, #6
 8004120:	4313      	orrs	r3, r2
 8004122:	6063      	str	r3, [r4, #4]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	260c      	movs	r6, #12
 800412a:	64a3      	str	r3, [r4, #72]	; 0x48
 800412c:	1c30      	adds	r0, r6, #0
 800412e:	1c29      	adds	r1, r5, #0
 8004130:	beab      	bkpt	0x00ab
 8004132:	1c05      	adds	r5, r0, #0
 8004134:	0028      	movs	r0, r5
 8004136:	f7ff fef1 	bl	8003f1c <checkerror>
 800413a:	1c43      	adds	r3, r0, #1
 800413c:	d0ea      	beq.n	8004114 <_swistat+0x14>
 800413e:	6120      	str	r0, [r4, #16]
 8004140:	2000      	movs	r0, #0
 8004142:	e7e9      	b.n	8004118 <_swistat+0x18>

08004144 <_fstat>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	000c      	movs	r4, r1
 8004148:	0005      	movs	r5, r0
 800414a:	2258      	movs	r2, #88	; 0x58
 800414c:	2100      	movs	r1, #0
 800414e:	0020      	movs	r0, r4
 8004150:	f7ff f872 	bl	8003238 <memset>
 8004154:	0028      	movs	r0, r5
 8004156:	0021      	movs	r1, r4
 8004158:	f7ff ffd2 	bl	8004100 <_swistat>
 800415c:	bd70      	pop	{r4, r5, r6, pc}

0800415e <_stat>:
 800415e:	b570      	push	{r4, r5, r6, lr}
 8004160:	000d      	movs	r5, r1
 8004162:	0004      	movs	r4, r0
 8004164:	2258      	movs	r2, #88	; 0x58
 8004166:	2100      	movs	r1, #0
 8004168:	0028      	movs	r0, r5
 800416a:	f7ff f865 	bl	8003238 <memset>
 800416e:	0020      	movs	r0, r4
 8004170:	2100      	movs	r1, #0
 8004172:	f000 f813 	bl	800419c <_swiopen>
 8004176:	0004      	movs	r4, r0
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d00c      	beq.n	8004196 <_stat+0x38>
 800417c:	2381      	movs	r3, #129	; 0x81
 800417e:	686a      	ldr	r2, [r5, #4]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	4313      	orrs	r3, r2
 8004184:	0029      	movs	r1, r5
 8004186:	606b      	str	r3, [r5, #4]
 8004188:	f7ff ffba 	bl	8004100 <_swistat>
 800418c:	0005      	movs	r5, r0
 800418e:	0020      	movs	r0, r4
 8004190:	f7ff ff6e 	bl	8004070 <_close>
 8004194:	002c      	movs	r4, r5
 8004196:	0020      	movs	r0, r4
 8004198:	bd70      	pop	{r4, r5, r6, pc}
	...

0800419c <_swiopen>:
 800419c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419e:	000e      	movs	r6, r1
 80041a0:	2500      	movs	r5, #0
 80041a2:	4b2a      	ldr	r3, [pc, #168]	; (800424c <_swiopen+0xb0>)
 80041a4:	b09b      	sub	sp, #108	; 0x6c
 80041a6:	9001      	str	r0, [sp, #4]
 80041a8:	9302      	str	r3, [sp, #8]
 80041aa:	00eb      	lsls	r3, r5, #3
 80041ac:	9303      	str	r3, [sp, #12]
 80041ae:	9b02      	ldr	r3, [sp, #8]
 80041b0:	00ea      	lsls	r2, r5, #3
 80041b2:	589b      	ldr	r3, [r3, r2]
 80041b4:	3301      	adds	r3, #1
 80041b6:	d00b      	beq.n	80041d0 <_swiopen+0x34>
 80041b8:	3501      	adds	r5, #1
 80041ba:	2d14      	cmp	r5, #20
 80041bc:	d1f5      	bne.n	80041aa <_swiopen+0xe>
 80041be:	f000 f93d 	bl	800443c <__errno>
 80041c2:	2318      	movs	r3, #24
 80041c4:	2501      	movs	r5, #1
 80041c6:	6003      	str	r3, [r0, #0]
 80041c8:	426d      	negs	r5, r5
 80041ca:	0028      	movs	r0, r5
 80041cc:	b01b      	add	sp, #108	; 0x6c
 80041ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d0:	23a0      	movs	r3, #160	; 0xa0
 80041d2:	0032      	movs	r2, r6
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	401a      	ands	r2, r3
 80041d8:	af04      	add	r7, sp, #16
 80041da:	429a      	cmp	r2, r3
 80041dc:	d109      	bne.n	80041f2 <_swiopen+0x56>
 80041de:	0039      	movs	r1, r7
 80041e0:	9801      	ldr	r0, [sp, #4]
 80041e2:	f7ff ffbc 	bl	800415e <_stat>
 80041e6:	3001      	adds	r0, #1
 80041e8:	d003      	beq.n	80041f2 <_swiopen+0x56>
 80041ea:	f000 f927 	bl	800443c <__errno>
 80041ee:	2311      	movs	r3, #17
 80041f0:	e7e8      	b.n	80041c4 <_swiopen+0x28>
 80041f2:	2302      	movs	r3, #2
 80041f4:	03f4      	lsls	r4, r6, #15
 80041f6:	0fe4      	lsrs	r4, r4, #31
 80041f8:	421e      	tst	r6, r3
 80041fa:	d000      	beq.n	80041fe <_swiopen+0x62>
 80041fc:	431c      	orrs	r4, r3
 80041fe:	4b14      	ldr	r3, [pc, #80]	; (8004250 <_swiopen+0xb4>)
 8004200:	421e      	tst	r6, r3
 8004202:	d001      	beq.n	8004208 <_swiopen+0x6c>
 8004204:	2304      	movs	r3, #4
 8004206:	431c      	orrs	r4, r3
 8004208:	2308      	movs	r3, #8
 800420a:	421e      	tst	r6, r3
 800420c:	d002      	beq.n	8004214 <_swiopen+0x78>
 800420e:	2204      	movs	r2, #4
 8004210:	4394      	bics	r4, r2
 8004212:	431c      	orrs	r4, r3
 8004214:	9b01      	ldr	r3, [sp, #4]
 8004216:	0018      	movs	r0, r3
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	f7fc f83f 	bl	800029c <strlen>
 800421e:	607c      	str	r4, [r7, #4]
 8004220:	60b8      	str	r0, [r7, #8]
 8004222:	2401      	movs	r4, #1
 8004224:	1c20      	adds	r0, r4, #0
 8004226:	1c39      	adds	r1, r7, #0
 8004228:	beab      	bkpt	0x00ab
 800422a:	1c04      	adds	r4, r0, #0
 800422c:	2c00      	cmp	r4, #0
 800422e:	db07      	blt.n	8004240 <_swiopen+0xa4>
 8004230:	00ea      	lsls	r2, r5, #3
 8004232:	9b02      	ldr	r3, [sp, #8]
 8004234:	4694      	mov	ip, r2
 8004236:	509c      	str	r4, [r3, r2]
 8004238:	2200      	movs	r2, #0
 800423a:	4463      	add	r3, ip
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	e7c4      	b.n	80041ca <_swiopen+0x2e>
 8004240:	0020      	movs	r0, r4
 8004242:	f7ff fe5d 	bl	8003f00 <error>
 8004246:	0005      	movs	r5, r0
 8004248:	e7bf      	b.n	80041ca <_swiopen+0x2e>
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	20000208 	.word	0x20000208
 8004250:	00000601 	.word	0x00000601

08004254 <_get_semihosting_exts>:
 8004254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004256:	b085      	sub	sp, #20
 8004258:	9000      	str	r0, [sp, #0]
 800425a:	9101      	str	r1, [sp, #4]
 800425c:	4826      	ldr	r0, [pc, #152]	; (80042f8 <_get_semihosting_exts+0xa4>)
 800425e:	2100      	movs	r1, #0
 8004260:	0015      	movs	r5, r2
 8004262:	f7ff ff9b 	bl	800419c <_swiopen>
 8004266:	0004      	movs	r4, r0
 8004268:	002a      	movs	r2, r5
 800426a:	2100      	movs	r1, #0
 800426c:	9800      	ldr	r0, [sp, #0]
 800426e:	f7fe ffe3 	bl	8003238 <memset>
 8004272:	1c63      	adds	r3, r4, #1
 8004274:	d013      	beq.n	800429e <_get_semihosting_exts+0x4a>
 8004276:	0020      	movs	r0, r4
 8004278:	f7ff fe28 	bl	8003ecc <findslot>
 800427c:	260c      	movs	r6, #12
 800427e:	0007      	movs	r7, r0
 8004280:	1c30      	adds	r0, r6, #0
 8004282:	1c39      	adds	r1, r7, #0
 8004284:	beab      	bkpt	0x00ab
 8004286:	1c06      	adds	r6, r0, #0
 8004288:	0030      	movs	r0, r6
 800428a:	f7ff fe47 	bl	8003f1c <checkerror>
 800428e:	2803      	cmp	r0, #3
 8004290:	dd02      	ble.n	8004298 <_get_semihosting_exts+0x44>
 8004292:	3803      	subs	r0, #3
 8004294:	42a8      	cmp	r0, r5
 8004296:	dc06      	bgt.n	80042a6 <_get_semihosting_exts+0x52>
 8004298:	0020      	movs	r0, r4
 800429a:	f7ff fee9 	bl	8004070 <_close>
 800429e:	2001      	movs	r0, #1
 80042a0:	4240      	negs	r0, r0
 80042a2:	b005      	add	sp, #20
 80042a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a6:	ae03      	add	r6, sp, #12
 80042a8:	2204      	movs	r2, #4
 80042aa:	0031      	movs	r1, r6
 80042ac:	0020      	movs	r0, r4
 80042ae:	f7ff fe4b 	bl	8003f48 <_read>
 80042b2:	2803      	cmp	r0, #3
 80042b4:	ddf0      	ble.n	8004298 <_get_semihosting_exts+0x44>
 80042b6:	7833      	ldrb	r3, [r6, #0]
 80042b8:	2b53      	cmp	r3, #83	; 0x53
 80042ba:	d1ed      	bne.n	8004298 <_get_semihosting_exts+0x44>
 80042bc:	7873      	ldrb	r3, [r6, #1]
 80042be:	2b48      	cmp	r3, #72	; 0x48
 80042c0:	d1ea      	bne.n	8004298 <_get_semihosting_exts+0x44>
 80042c2:	78b3      	ldrb	r3, [r6, #2]
 80042c4:	2b46      	cmp	r3, #70	; 0x46
 80042c6:	d1e7      	bne.n	8004298 <_get_semihosting_exts+0x44>
 80042c8:	78f3      	ldrb	r3, [r6, #3]
 80042ca:	2b42      	cmp	r3, #66	; 0x42
 80042cc:	d1e4      	bne.n	8004298 <_get_semihosting_exts+0x44>
 80042ce:	2201      	movs	r2, #1
 80042d0:	0020      	movs	r0, r4
 80042d2:	9901      	ldr	r1, [sp, #4]
 80042d4:	f7ff fe52 	bl	8003f7c <_swilseek>
 80042d8:	2800      	cmp	r0, #0
 80042da:	dbdd      	blt.n	8004298 <_get_semihosting_exts+0x44>
 80042dc:	002a      	movs	r2, r5
 80042de:	9900      	ldr	r1, [sp, #0]
 80042e0:	0020      	movs	r0, r4
 80042e2:	f7ff fe31 	bl	8003f48 <_read>
 80042e6:	0005      	movs	r5, r0
 80042e8:	0020      	movs	r0, r4
 80042ea:	f7ff fec1 	bl	8004070 <_close>
 80042ee:	0028      	movs	r0, r5
 80042f0:	f7ff fe14 	bl	8003f1c <checkerror>
 80042f4:	e7d5      	b.n	80042a2 <_get_semihosting_exts+0x4e>
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	080044ff 	.word	0x080044ff

080042fc <initialise_semihosting_exts>:
 80042fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042fe:	2401      	movs	r4, #1
 8004300:	2100      	movs	r1, #0
 8004302:	4e09      	ldr	r6, [pc, #36]	; (8004328 <initialise_semihosting_exts+0x2c>)
 8004304:	4d09      	ldr	r5, [pc, #36]	; (800432c <initialise_semihosting_exts+0x30>)
 8004306:	af01      	add	r7, sp, #4
 8004308:	0022      	movs	r2, r4
 800430a:	0038      	movs	r0, r7
 800430c:	6031      	str	r1, [r6, #0]
 800430e:	602c      	str	r4, [r5, #0]
 8004310:	f7ff ffa0 	bl	8004254 <_get_semihosting_exts>
 8004314:	2800      	cmp	r0, #0
 8004316:	dd05      	ble.n	8004324 <initialise_semihosting_exts+0x28>
 8004318:	2202      	movs	r2, #2
 800431a:	783b      	ldrb	r3, [r7, #0]
 800431c:	401c      	ands	r4, r3
 800431e:	4013      	ands	r3, r2
 8004320:	6034      	str	r4, [r6, #0]
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	20000064 	.word	0x20000064
 800432c:	20000060 	.word	0x20000060

08004330 <_has_ext_stdout_stderr>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4c04      	ldr	r4, [pc, #16]	; (8004344 <_has_ext_stdout_stderr+0x14>)
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	da01      	bge.n	800433e <_has_ext_stdout_stderr+0xe>
 800433a:	f7ff ffdf 	bl	80042fc <initialise_semihosting_exts>
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	bd10      	pop	{r4, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	20000060 	.word	0x20000060

08004348 <initialise_monitor_handles>:
 8004348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800434a:	4b28      	ldr	r3, [pc, #160]	; (80043ec <initialise_monitor_handles+0xa4>)
 800434c:	b087      	sub	sp, #28
 800434e:	9303      	str	r3, [sp, #12]
 8004350:	2500      	movs	r5, #0
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2303      	movs	r3, #3
 8004356:	ac03      	add	r4, sp, #12
 8004358:	60a3      	str	r3, [r4, #8]
 800435a:	2601      	movs	r6, #1
 800435c:	6065      	str	r5, [r4, #4]
 800435e:	1c30      	adds	r0, r6, #0
 8004360:	1c21      	adds	r1, r4, #0
 8004362:	beab      	bkpt	0x00ab
 8004364:	1c06      	adds	r6, r0, #0
 8004366:	2101      	movs	r1, #1
 8004368:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <initialise_monitor_handles+0xa8>)
 800436a:	4249      	negs	r1, r1
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	601e      	str	r6, [r3, #0]
 8004370:	002b      	movs	r3, r5
 8004372:	4d20      	ldr	r5, [pc, #128]	; (80043f4 <initialise_monitor_handles+0xac>)
 8004374:	00da      	lsls	r2, r3, #3
 8004376:	3301      	adds	r3, #1
 8004378:	50a9      	str	r1, [r5, r2]
 800437a:	2b14      	cmp	r3, #20
 800437c:	d1fa      	bne.n	8004374 <initialise_monitor_handles+0x2c>
 800437e:	f7ff ffd7 	bl	8004330 <_has_ext_stdout_stderr>
 8004382:	2800      	cmp	r0, #0
 8004384:	d018      	beq.n	80043b8 <initialise_monitor_handles+0x70>
 8004386:	9b00      	ldr	r3, [sp, #0]
 8004388:	2601      	movs	r6, #1
 800438a:	9303      	str	r3, [sp, #12]
 800438c:	2303      	movs	r3, #3
 800438e:	60a3      	str	r3, [r4, #8]
 8004390:	3301      	adds	r3, #1
 8004392:	6063      	str	r3, [r4, #4]
 8004394:	1c30      	adds	r0, r6, #0
 8004396:	1c21      	adds	r1, r4, #0
 8004398:	beab      	bkpt	0x00ab
 800439a:	1c07      	adds	r7, r0, #0
 800439c:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <initialise_monitor_handles+0xb0>)
 800439e:	9a00      	ldr	r2, [sp, #0]
 80043a0:	601f      	str	r7, [r3, #0]
 80043a2:	2303      	movs	r3, #3
 80043a4:	9203      	str	r2, [sp, #12]
 80043a6:	60a3      	str	r3, [r4, #8]
 80043a8:	3305      	adds	r3, #5
 80043aa:	6063      	str	r3, [r4, #4]
 80043ac:	1c30      	adds	r0, r6, #0
 80043ae:	1c21      	adds	r1, r4, #0
 80043b0:	beab      	bkpt	0x00ab
 80043b2:	1c06      	adds	r6, r0, #0
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <initialise_monitor_handles+0xb4>)
 80043b6:	601e      	str	r6, [r3, #0]
 80043b8:	4e10      	ldr	r6, [pc, #64]	; (80043fc <initialise_monitor_handles+0xb4>)
 80043ba:	6833      	ldr	r3, [r6, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	d102      	bne.n	80043c6 <initialise_monitor_handles+0x7e>
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <initialise_monitor_handles+0xb0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6033      	str	r3, [r6, #0]
 80043c6:	2400      	movs	r4, #0
 80043c8:	9b01      	ldr	r3, [sp, #4]
 80043ca:	606c      	str	r4, [r5, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	f7ff ffae 	bl	8004330 <_has_ext_stdout_stderr>
 80043d4:	42a0      	cmp	r0, r4
 80043d6:	d006      	beq.n	80043e6 <initialise_monitor_handles+0x9e>
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <initialise_monitor_handles+0xb0>)
 80043da:	60ec      	str	r4, [r5, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	616c      	str	r4, [r5, #20]
 80043e0:	60ab      	str	r3, [r5, #8]
 80043e2:	6833      	ldr	r3, [r6, #0]
 80043e4:	612b      	str	r3, [r5, #16]
 80043e6:	b007      	add	sp, #28
 80043e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	08004515 	.word	0x08004515
 80043f0:	20000204 	.word	0x20000204
 80043f4:	20000208 	.word	0x20000208
 80043f8:	20000200 	.word	0x20000200
 80043fc:	200001fc 	.word	0x200001fc

08004400 <_isatty>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	f7ff fd63 	bl	8003ecc <findslot>
 8004406:	2409      	movs	r4, #9
 8004408:	1e05      	subs	r5, r0, #0
 800440a:	d104      	bne.n	8004416 <_isatty+0x16>
 800440c:	f000 f816 	bl	800443c <__errno>
 8004410:	6004      	str	r4, [r0, #0]
 8004412:	2000      	movs	r0, #0
 8004414:	bd70      	pop	{r4, r5, r6, pc}
 8004416:	1c20      	adds	r0, r4, #0
 8004418:	1c29      	adds	r1, r5, #0
 800441a:	beab      	bkpt	0x00ab
 800441c:	1c04      	adds	r4, r0, #0
 800441e:	0020      	movs	r0, r4
 8004420:	2c01      	cmp	r4, #1
 8004422:	d0f7      	beq.n	8004414 <_isatty+0x14>
 8004424:	f000 f80a 	bl	800443c <__errno>
 8004428:	2513      	movs	r5, #19
 800442a:	0004      	movs	r4, r0
 800442c:	2600      	movs	r6, #0
 800442e:	1c28      	adds	r0, r5, #0
 8004430:	1c31      	adds	r1, r6, #0
 8004432:	beab      	bkpt	0x00ab
 8004434:	1c05      	adds	r5, r0, #0
 8004436:	6025      	str	r5, [r4, #0]
 8004438:	e7eb      	b.n	8004412 <_isatty+0x12>
	...

0800443c <__errno>:
 800443c:	4b01      	ldr	r3, [pc, #4]	; (8004444 <__errno+0x8>)
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	4770      	bx	lr
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	2000000c 	.word	0x2000000c

08004448 <_init>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr

08004454 <_fini>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr
